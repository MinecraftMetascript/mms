// Code generated from ./grammar/MinecraftMetascript.g4 by ANTLR 4.13.2. DO NOT EDIT.

package grammar // MinecraftMetascript
import (
	"fmt"
	"strconv"
	"sync"

	"github.com/antlr4-go/antlr/v4"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = strconv.Itoa
var _ = sync.Once{}

type MinecraftMetascriptParser struct {
	*antlr.BaseParser
}

var MinecraftMetascriptParserStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	LiteralNames           []string
	SymbolicNames          []string
	RuleNames              []string
	PredictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func minecraftmetascriptParserInit() {
	staticData := &MinecraftMetascriptParserStaticData
	staticData.LiteralNames = []string{
		"", "'namespace'", "'{'", "'}'", "'Surface'", "'~'", "'='", "'!'", "'And'",
		"'('", "')'", "'Or'", "'AboveSurface()'", "'Biome'", "','", "'Hole'",
		"'Steep'", "'Freezing'", "'NoiseThreshold'", "'StoneDepth('", "'.SecondaryDepthRange('",
		"'VerticalGradient'", "'AboveWater'", "'YAbove'", "'Block'", "'['",
		"']'", "'Bandlands'", "'If'", "'.XZScale('", "'.YScale('", "'.XZFactor('",
		"'.YFactor('", "'.Noise'", "'Smear'", "'.Type1'", "'.Type2'", "'.Shift'",
		"'.Amplitudes'", "'.Offset('", "'.Add()'", "'.Mul('", "'.Min('", "'.Max('",
		"'.Top'", "'.Bottom'", "'.InRange'", "'.OutRange'", "':'", "'Noise'",
		"'DensityFn'", "'BlendAlpha'", "'BlendOffset'", "'EndIslands'", "'Interpolated'",
		"'BlendDensity'", "'FlatCache'", "'Abs'", "'Square'", "'Cube'", "'HalfNeg'",
		"'QuarterNeg'", "'Squeeze'", "'Shift'", "'ShiftA'", "'ShiftB'", "'Cache'",
		"'Min'", "'Max'", "'OldBlendedNoise'", "'WeirdScaledSampler'", "'ShiftedNoise'",
		"'RangeChoice'", "'Clamp'", "'YClampedGradient'", "'Spline'", "'.Point'",
		"'+'", "'*'",
	}
	staticData.SymbolicNames = []string{
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "StoneDepthMode", "Axis",
		"Int", "Float", "String", "NL", "WS", "Identifier", "BlockComment",
		"LineComment", "DensityFn_CacheKind",
	}
	staticData.RuleNames = []string{
		"script", "namespaceDeclaration", "namespace", "contentBlocks", "surfaceBlock",
		"surfaceStatement", "verticalAnchor", "verticalAnchorDeclaration", "surfaceCondition",
		"surfaceConditionDeclaration", "surfaceCondition_Not", "surfaceCondition_And",
		"surfaceCondition_Or", "surfaceCondition_Reference", "surfaceCondition_AboveSurface",
		"surfaceCondition_Biome", "surfaceCondition_Hole", "surfaceCondition_Steep",
		"surfaceCondition_Freezing", "surfaceCondition_NoiseThresholdBuilder",
		"surfaceCondition_NoiseThreshold", "surfaceCondition_StoneDepth", "surfaceCondition_StoneDepthBuilder",
		"surfaceCondition_StoneDepthBuilder_SecondaryDepthRange", "surfaceCondition_VerticalGradient",
		"surfaceCondition_VerticalGradientBuilder", "surfaceCondition_AboveWater",
		"surfaceCondition_AboveWaterBuilder", "surfaceCondition_YAbove", "surfaceCondition_YAboveBuilder",
		"surfaceRuleDeclaration", "surfaceRule", "surfaceRule_Reference", "surfaceRule_Block",
		"surfaceRule_Sequence", "surfaceRule_Bandlands", "surfaceRule_If", "builder_XZScale",
		"builder_YScale", "builder_XZFactor", "builder_YFactor", "builder_Noise",
		"builder_Smear", "builder_Type1", "builder_Type2", "builder_Shift",
		"builder_Amplitudes", "builder_Offset", "builder_Add", "builder_Mul",
		"builder_MulInt", "builder_Min", "builder_Max", "builder_Top", "builder_TopLiteral",
		"builder_Bottom", "builder_BottomLiteral", "builder_InRange", "builder_OutRange",
		"resourceReference", "number", "noiseBlock", "noiseDeclaration", "noise",
		"noiseDefinition", "noise_Builder", "densityFnBlock", "densityFnDeclaration",
		"densityFn", "densityFn_NoInput", "densityFn_SingleInput", "densityFn_InlineNoise",
		"densityFn_Noise", "densityFn_NoiseBuilder", "densityFn_Cache", "densityFn_DualInput",
		"densityFn_OldBlendedNoise", "densityFn_OldBlendedNoiseBuilder", "densityFn_WierdScaledSampler",
		"densityFn_WierdScaledSamplerBuilder", "densityFn_ShiftedNoise", "densityFn_ShiftedNoiseBuilder",
		"densityFn_RangeChoice", "densityFn_RangeChoiceBuilder", "densityFn_Clamp",
		"densityFn_ClampBuilder", "densityFn_YClampedGradient", "densityFn_YClampedGradientBuilder",
		"densityFn_SplineFn", "densityFn_Spline", "densityFn_SplinePoint", "densityFn_Constant",
		"densityFn_Reference", "densityFn_Math",
	}
	staticData.PredictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 1, 89, 1381, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4, 7,
		4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10, 7,
		10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15, 7, 15,
		2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7, 20, 2,
		21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25, 2, 26,
		7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2, 31, 7,
		31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36, 7, 36,
		2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7, 41, 2,
		42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46, 2, 47,
		7, 47, 2, 48, 7, 48, 2, 49, 7, 49, 2, 50, 7, 50, 2, 51, 7, 51, 2, 52, 7,
		52, 2, 53, 7, 53, 2, 54, 7, 54, 2, 55, 7, 55, 2, 56, 7, 56, 2, 57, 7, 57,
		2, 58, 7, 58, 2, 59, 7, 59, 2, 60, 7, 60, 2, 61, 7, 61, 2, 62, 7, 62, 2,
		63, 7, 63, 2, 64, 7, 64, 2, 65, 7, 65, 2, 66, 7, 66, 2, 67, 7, 67, 2, 68,
		7, 68, 2, 69, 7, 69, 2, 70, 7, 70, 2, 71, 7, 71, 2, 72, 7, 72, 2, 73, 7,
		73, 2, 74, 7, 74, 2, 75, 7, 75, 2, 76, 7, 76, 2, 77, 7, 77, 2, 78, 7, 78,
		2, 79, 7, 79, 2, 80, 7, 80, 2, 81, 7, 81, 2, 82, 7, 82, 2, 83, 7, 83, 2,
		84, 7, 84, 2, 85, 7, 85, 2, 86, 7, 86, 2, 87, 7, 87, 2, 88, 7, 88, 2, 89,
		7, 89, 2, 90, 7, 90, 2, 91, 7, 91, 2, 92, 7, 92, 2, 93, 7, 93, 1, 0, 5,
		0, 190, 8, 0, 10, 0, 12, 0, 193, 9, 0, 1, 0, 1, 0, 5, 0, 197, 8, 0, 10,
		0, 12, 0, 200, 9, 0, 5, 0, 202, 8, 0, 10, 0, 12, 0, 205, 9, 0, 1, 1, 1,
		1, 1, 1, 1, 2, 1, 2, 5, 2, 212, 8, 2, 10, 2, 12, 2, 215, 9, 2, 1, 2, 1,
		2, 5, 2, 219, 8, 2, 10, 2, 12, 2, 222, 9, 2, 1, 2, 1, 2, 5, 2, 226, 8,
		2, 10, 2, 12, 2, 229, 9, 2, 5, 2, 231, 8, 2, 10, 2, 12, 2, 234, 9, 2, 1,
		2, 5, 2, 237, 8, 2, 10, 2, 12, 2, 240, 9, 2, 1, 2, 1, 2, 1, 3, 1, 3, 1,
		3, 3, 3, 247, 8, 3, 1, 4, 1, 4, 5, 4, 251, 8, 4, 10, 4, 12, 4, 254, 9,
		4, 1, 4, 1, 4, 5, 4, 258, 8, 4, 10, 4, 12, 4, 261, 9, 4, 1, 4, 1, 4, 5,
		4, 265, 8, 4, 10, 4, 12, 4, 268, 9, 4, 5, 4, 270, 8, 4, 10, 4, 12, 4, 273,
		9, 4, 1, 4, 5, 4, 276, 8, 4, 10, 4, 12, 4, 279, 9, 4, 1, 4, 1, 4, 1, 5,
		1, 5, 1, 5, 3, 5, 286, 8, 5, 1, 6, 3, 6, 289, 8, 6, 1, 6, 1, 6, 3, 6, 293,
		8, 6, 1, 7, 1, 7, 1, 7, 5, 7, 298, 8, 7, 10, 7, 12, 7, 301, 9, 7, 1, 7,
		1, 7, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8,
		1, 8, 1, 8, 1, 8, 3, 8, 319, 8, 8, 1, 9, 1, 9, 1, 9, 5, 9, 324, 8, 9, 10,
		9, 12, 9, 327, 9, 9, 1, 9, 1, 9, 1, 10, 1, 10, 1, 10, 1, 11, 1, 11, 5,
		11, 336, 8, 11, 10, 11, 12, 11, 339, 9, 11, 1, 11, 1, 11, 5, 11, 343, 8,
		11, 10, 11, 12, 11, 346, 9, 11, 1, 11, 1, 11, 5, 11, 350, 8, 11, 10, 11,
		12, 11, 353, 9, 11, 5, 11, 355, 8, 11, 10, 11, 12, 11, 358, 9, 11, 1, 11,
		1, 11, 5, 11, 362, 8, 11, 10, 11, 12, 11, 365, 9, 11, 1, 11, 1, 11, 1,
		12, 1, 12, 5, 12, 371, 8, 12, 10, 12, 12, 12, 374, 9, 12, 1, 12, 1, 12,
		5, 12, 378, 8, 12, 10, 12, 12, 12, 381, 9, 12, 1, 12, 1, 12, 5, 12, 385,
		8, 12, 10, 12, 12, 12, 388, 9, 12, 5, 12, 390, 8, 12, 10, 12, 12, 12, 393,
		9, 12, 1, 12, 1, 12, 5, 12, 397, 8, 12, 10, 12, 12, 12, 400, 9, 12, 1,
		12, 1, 12, 1, 13, 1, 13, 1, 14, 1, 14, 1, 15, 1, 15, 1, 15, 5, 15, 411,
		8, 15, 10, 15, 12, 15, 414, 9, 15, 1, 15, 1, 15, 1, 15, 5, 15, 419, 8,
		15, 10, 15, 12, 15, 422, 9, 15, 5, 15, 424, 8, 15, 10, 15, 12, 15, 427,
		9, 15, 1, 15, 5, 15, 430, 8, 15, 10, 15, 12, 15, 433, 9, 15, 1, 15, 1,
		15, 5, 15, 437, 8, 15, 10, 15, 12, 15, 440, 9, 15, 1, 15, 1, 15, 1, 16,
		1, 16, 1, 16, 1, 16, 1, 17, 1, 17, 1, 17, 1, 17, 1, 18, 1, 18, 1, 18, 1,
		18, 1, 19, 1, 19, 3, 19, 458, 8, 19, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20,
		5, 20, 465, 8, 20, 10, 20, 12, 20, 468, 9, 20, 1, 20, 1, 20, 5, 20, 472,
		8, 20, 10, 20, 12, 20, 475, 9, 20, 5, 20, 477, 8, 20, 10, 20, 12, 20, 480,
		9, 20, 1, 21, 1, 21, 1, 21, 1, 21, 5, 21, 486, 8, 21, 10, 21, 12, 21, 489,
		9, 21, 1, 21, 1, 21, 5, 21, 493, 8, 21, 10, 21, 12, 21, 496, 9, 21, 5,
		21, 498, 8, 21, 10, 21, 12, 21, 501, 9, 21, 1, 22, 1, 22, 1, 22, 3, 22,
		506, 8, 22, 1, 23, 1, 23, 1, 23, 1, 23, 1, 24, 1, 24, 1, 24, 1, 24, 1,
		24, 5, 24, 517, 8, 24, 10, 24, 12, 24, 520, 9, 24, 1, 24, 1, 24, 5, 24,
		524, 8, 24, 10, 24, 12, 24, 527, 9, 24, 5, 24, 529, 8, 24, 10, 24, 12,
		24, 532, 9, 24, 1, 25, 1, 25, 3, 25, 536, 8, 25, 1, 26, 1, 26, 1, 26, 1,
		26, 5, 26, 542, 8, 26, 10, 26, 12, 26, 545, 9, 26, 1, 26, 1, 26, 5, 26,
		549, 8, 26, 10, 26, 12, 26, 552, 9, 26, 5, 26, 554, 8, 26, 10, 26, 12,
		26, 557, 9, 26, 1, 27, 1, 27, 1, 27, 3, 27, 562, 8, 27, 1, 28, 1, 28, 1,
		28, 1, 28, 1, 28, 5, 28, 569, 8, 28, 10, 28, 12, 28, 572, 9, 28, 1, 28,
		1, 28, 5, 28, 576, 8, 28, 10, 28, 12, 28, 579, 9, 28, 5, 28, 581, 8, 28,
		10, 28, 12, 28, 584, 9, 28, 1, 29, 1, 29, 3, 29, 588, 8, 29, 1, 30, 1,
		30, 1, 30, 5, 30, 593, 8, 30, 10, 30, 12, 30, 596, 9, 30, 1, 30, 1, 30,
		1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 3, 31, 605, 8, 31, 1, 32, 1, 32, 1,
		33, 1, 33, 1, 33, 1, 33, 1, 33, 1, 34, 1, 34, 5, 34, 616, 8, 34, 10, 34,
		12, 34, 619, 9, 34, 1, 34, 1, 34, 5, 34, 623, 8, 34, 10, 34, 12, 34, 626,
		9, 34, 5, 34, 628, 8, 34, 10, 34, 12, 34, 631, 9, 34, 1, 34, 5, 34, 634,
		8, 34, 10, 34, 12, 34, 637, 9, 34, 1, 34, 1, 34, 1, 35, 1, 35, 1, 35, 1,
		35, 1, 36, 1, 36, 5, 36, 647, 8, 36, 10, 36, 12, 36, 650, 9, 36, 1, 36,
		1, 36, 5, 36, 654, 8, 36, 10, 36, 12, 36, 657, 9, 36, 1, 36, 1, 36, 5,
		36, 661, 8, 36, 10, 36, 12, 36, 664, 9, 36, 1, 36, 1, 36, 5, 36, 668, 8,
		36, 10, 36, 12, 36, 671, 9, 36, 1, 36, 1, 36, 1, 37, 1, 37, 1, 37, 1, 37,
		1, 38, 1, 38, 1, 38, 1, 38, 1, 39, 1, 39, 1, 39, 1, 39, 1, 40, 1, 40, 1,
		40, 1, 40, 1, 41, 1, 41, 1, 41, 1, 41, 1, 41, 1, 41, 3, 41, 697, 8, 41,
		1, 42, 1, 42, 1, 42, 1, 42, 1, 42, 1, 43, 1, 43, 1, 43, 1, 43, 1, 44, 1,
		44, 1, 44, 1, 44, 1, 45, 1, 45, 1, 45, 1, 45, 1, 45, 1, 45, 1, 45, 1, 46,
		1, 46, 1, 46, 1, 46, 1, 46, 5, 46, 724, 8, 46, 10, 46, 12, 46, 727, 9,
		46, 1, 46, 1, 46, 1, 46, 1, 47, 1, 47, 1, 47, 1, 47, 1, 48, 1, 48, 1, 49,
		1, 49, 1, 49, 1, 49, 1, 50, 1, 50, 1, 50, 1, 50, 1, 51, 1, 51, 1, 51, 1,
		51, 1, 52, 1, 52, 1, 52, 1, 52, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 54,
		1, 54, 1, 54, 1, 54, 1, 54, 1, 55, 1, 55, 1, 55, 1, 55, 1, 55, 1, 56, 1,
		56, 1, 56, 1, 56, 1, 56, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 58, 1, 58,
		1, 58, 1, 58, 1, 58, 1, 59, 1, 59, 3, 59, 786, 8, 59, 1, 59, 1, 59, 1,
		60, 1, 60, 1, 61, 1, 61, 5, 61, 794, 8, 61, 10, 61, 12, 61, 797, 9, 61,
		1, 61, 1, 61, 5, 61, 801, 8, 61, 10, 61, 12, 61, 804, 9, 61, 1, 61, 1,
		61, 5, 61, 808, 8, 61, 10, 61, 12, 61, 811, 9, 61, 5, 61, 813, 8, 61, 10,
		61, 12, 61, 816, 9, 61, 1, 61, 5, 61, 819, 8, 61, 10, 61, 12, 61, 822,
		9, 61, 1, 61, 1, 61, 1, 62, 1, 62, 1, 62, 1, 62, 1, 63, 1, 63, 1, 63, 1,
		64, 1, 64, 5, 64, 835, 8, 64, 10, 64, 12, 64, 838, 9, 64, 1, 64, 1, 64,
		5, 64, 842, 8, 64, 10, 64, 12, 64, 845, 9, 64, 1, 64, 1, 64, 5, 64, 849,
		8, 64, 10, 64, 12, 64, 852, 9, 64, 1, 64, 1, 64, 5, 64, 856, 8, 64, 10,
		64, 12, 64, 859, 9, 64, 5, 64, 861, 8, 64, 10, 64, 12, 64, 864, 9, 64,
		1, 65, 1, 65, 1, 66, 1, 66, 5, 66, 870, 8, 66, 10, 66, 12, 66, 873, 9,
		66, 1, 66, 1, 66, 5, 66, 877, 8, 66, 10, 66, 12, 66, 880, 9, 66, 1, 66,
		1, 66, 5, 66, 884, 8, 66, 10, 66, 12, 66, 887, 9, 66, 5, 66, 889, 8, 66,
		10, 66, 12, 66, 892, 9, 66, 1, 66, 5, 66, 895, 8, 66, 10, 66, 12, 66, 898,
		9, 66, 1, 66, 1, 66, 1, 67, 1, 67, 5, 67, 904, 8, 67, 10, 67, 12, 67, 907,
		9, 67, 1, 67, 1, 67, 5, 67, 911, 8, 67, 10, 67, 12, 67, 914, 9, 67, 1,
		67, 1, 67, 1, 68, 1, 68, 1, 68, 1, 68, 1, 68, 1, 68, 1, 68, 1, 68, 1, 68,
		1, 68, 1, 68, 1, 68, 1, 68, 1, 68, 3, 68, 932, 8, 68, 1, 68, 3, 68, 935,
		8, 68, 1, 69, 1, 69, 1, 70, 1, 70, 5, 70, 941, 8, 70, 10, 70, 12, 70, 944,
		9, 70, 1, 70, 1, 70, 5, 70, 948, 8, 70, 10, 70, 12, 70, 951, 9, 70, 1,
		70, 1, 70, 5, 70, 955, 8, 70, 10, 70, 12, 70, 958, 9, 70, 1, 70, 1, 70,
		1, 71, 1, 71, 1, 72, 1, 72, 5, 72, 966, 8, 72, 10, 72, 12, 72, 969, 9,
		72, 1, 72, 1, 72, 5, 72, 973, 8, 72, 10, 72, 12, 72, 976, 9, 72, 1, 72,
		1, 72, 5, 72, 980, 8, 72, 10, 72, 12, 72, 983, 9, 72, 1, 72, 1, 72, 1,
		72, 3, 72, 988, 8, 72, 1, 72, 5, 72, 991, 8, 72, 10, 72, 12, 72, 994, 9,
		72, 1, 72, 1, 72, 5, 72, 998, 8, 72, 10, 72, 12, 72, 1001, 9, 72, 5, 72,
		1003, 8, 72, 10, 72, 12, 72, 1006, 9, 72, 1, 73, 1, 73, 3, 73, 1010, 8,
		73, 1, 74, 1, 74, 5, 74, 1014, 8, 74, 10, 74, 12, 74, 1017, 9, 74, 1, 74,
		1, 74, 5, 74, 1021, 8, 74, 10, 74, 12, 74, 1024, 9, 74, 1, 74, 1, 74, 5,
		74, 1028, 8, 74, 10, 74, 12, 74, 1031, 9, 74, 1, 74, 1, 74, 5, 74, 1035,
		8, 74, 10, 74, 12, 74, 1038, 9, 74, 1, 74, 1, 74, 5, 74, 1042, 8, 74, 10,
		74, 12, 74, 1045, 9, 74, 1, 74, 1, 74, 1, 75, 1, 75, 1, 75, 3, 75, 1052,
		8, 75, 1, 75, 5, 75, 1055, 8, 75, 10, 75, 12, 75, 1058, 9, 75, 1, 75, 1,
		75, 5, 75, 1062, 8, 75, 10, 75, 12, 75, 1065, 9, 75, 1, 75, 1, 75, 1, 75,
		5, 75, 1070, 8, 75, 10, 75, 12, 75, 1073, 9, 75, 1, 75, 1, 75, 5, 75, 1077,
		8, 75, 10, 75, 12, 75, 1080, 9, 75, 1, 75, 1, 75, 1, 76, 1, 76, 5, 76,
		1086, 8, 76, 10, 76, 12, 76, 1089, 9, 76, 1, 76, 1, 76, 5, 76, 1093, 8,
		76, 10, 76, 12, 76, 1096, 9, 76, 1, 76, 1, 76, 5, 76, 1100, 8, 76, 10,
		76, 12, 76, 1103, 9, 76, 1, 76, 1, 76, 5, 76, 1107, 8, 76, 10, 76, 12,
		76, 1110, 9, 76, 5, 76, 1112, 8, 76, 10, 76, 12, 76, 1115, 9, 76, 1, 77,
		1, 77, 1, 77, 1, 77, 1, 77, 3, 77, 1122, 8, 77, 1, 78, 1, 78, 5, 78, 1126,
		8, 78, 10, 78, 12, 78, 1129, 9, 78, 1, 78, 1, 78, 5, 78, 1133, 8, 78, 10,
		78, 12, 78, 1136, 9, 78, 1, 78, 1, 78, 5, 78, 1140, 8, 78, 10, 78, 12,
		78, 1143, 9, 78, 1, 78, 1, 78, 5, 78, 1147, 8, 78, 10, 78, 12, 78, 1150,
		9, 78, 1, 78, 1, 78, 5, 78, 1154, 8, 78, 10, 78, 12, 78, 1157, 9, 78, 5,
		78, 1159, 8, 78, 10, 78, 12, 78, 1162, 9, 78, 1, 79, 1, 79, 1, 79, 3, 79,
		1167, 8, 79, 1, 80, 1, 80, 5, 80, 1171, 8, 80, 10, 80, 12, 80, 1174, 9,
		80, 1, 80, 1, 80, 5, 80, 1178, 8, 80, 10, 80, 12, 80, 1181, 9, 80, 1, 80,
		1, 80, 5, 80, 1185, 8, 80, 10, 80, 12, 80, 1188, 9, 80, 1, 80, 1, 80, 5,
		80, 1192, 8, 80, 10, 80, 12, 80, 1195, 9, 80, 5, 80, 1197, 8, 80, 10, 80,
		12, 80, 1200, 9, 80, 1, 81, 1, 81, 1, 81, 1, 81, 3, 81, 1206, 8, 81, 1,
		82, 1, 82, 5, 82, 1210, 8, 82, 10, 82, 12, 82, 1213, 9, 82, 1, 82, 1, 82,
		1, 82, 1, 82, 5, 82, 1219, 8, 82, 10, 82, 12, 82, 1222, 9, 82, 1, 82, 1,
		82, 5, 82, 1226, 8, 82, 10, 82, 12, 82, 1229, 9, 82, 5, 82, 1231, 8, 82,
		10, 82, 12, 82, 1234, 9, 82, 1, 83, 1, 83, 1, 83, 1, 83, 3, 83, 1240, 8,
		83, 1, 84, 1, 84, 5, 84, 1244, 8, 84, 10, 84, 12, 84, 1247, 9, 84, 1, 84,
		1, 84, 1, 84, 1, 84, 5, 84, 1253, 8, 84, 10, 84, 12, 84, 1256, 9, 84, 1,
		84, 1, 84, 5, 84, 1260, 8, 84, 10, 84, 12, 84, 1263, 9, 84, 5, 84, 1265,
		8, 84, 10, 84, 12, 84, 1268, 9, 84, 1, 85, 1, 85, 3, 85, 1272, 8, 85, 1,
		86, 1, 86, 5, 86, 1276, 8, 86, 10, 86, 12, 86, 1279, 9, 86, 1, 86, 1, 86,
		5, 86, 1283, 8, 86, 10, 86, 12, 86, 1286, 9, 86, 1, 86, 1, 86, 5, 86, 1290,
		8, 86, 10, 86, 12, 86, 1293, 9, 86, 1, 86, 1, 86, 5, 86, 1297, 8, 86, 10,
		86, 12, 86, 1300, 9, 86, 5, 86, 1302, 8, 86, 10, 86, 12, 86, 1305, 9, 86,
		1, 87, 1, 87, 1, 87, 1, 87, 3, 87, 1311, 8, 87, 1, 88, 1, 88, 1, 89, 1,
		89, 5, 89, 1317, 8, 89, 10, 89, 12, 89, 1320, 9, 89, 1, 89, 1, 89, 5, 89,
		1324, 8, 89, 10, 89, 12, 89, 1327, 9, 89, 1, 89, 1, 89, 5, 89, 1331, 8,
		89, 10, 89, 12, 89, 1334, 9, 89, 1, 89, 1, 89, 5, 89, 1338, 8, 89, 10,
		89, 12, 89, 1341, 9, 89, 1, 89, 1, 89, 5, 89, 1345, 8, 89, 10, 89, 12,
		89, 1348, 9, 89, 5, 89, 1350, 8, 89, 10, 89, 12, 89, 1353, 9, 89, 1, 89,
		1, 89, 1, 89, 1, 89, 3, 89, 1359, 8, 89, 1, 90, 1, 90, 1, 90, 1, 90, 1,
		90, 1, 90, 1, 90, 3, 90, 1368, 8, 90, 1, 90, 1, 90, 1, 90, 1, 90, 1, 91,
		1, 91, 1, 92, 1, 92, 1, 93, 1, 93, 1, 93, 1, 93, 0, 0, 94, 0, 2, 4, 6,
		8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42,
		44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78,
		80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112,
		114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142,
		144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172,
		174, 176, 178, 180, 182, 184, 186, 0, 4, 1, 0, 81, 82, 1, 0, 51, 53, 1,
		0, 54, 65, 1, 0, 77, 78, 1480, 0, 191, 1, 0, 0, 0, 2, 206, 1, 0, 0, 0,
		4, 209, 1, 0, 0, 0, 6, 246, 1, 0, 0, 0, 8, 248, 1, 0, 0, 0, 10, 285, 1,
		0, 0, 0, 12, 292, 1, 0, 0, 0, 14, 294, 1, 0, 0, 0, 16, 318, 1, 0, 0, 0,
		18, 320, 1, 0, 0, 0, 20, 330, 1, 0, 0, 0, 22, 333, 1, 0, 0, 0, 24, 368,
		1, 0, 0, 0, 26, 403, 1, 0, 0, 0, 28, 405, 1, 0, 0, 0, 30, 407, 1, 0, 0,
		0, 32, 443, 1, 0, 0, 0, 34, 447, 1, 0, 0, 0, 36, 451, 1, 0, 0, 0, 38, 457,
		1, 0, 0, 0, 40, 459, 1, 0, 0, 0, 42, 481, 1, 0, 0, 0, 44, 505, 1, 0, 0,
		0, 46, 507, 1, 0, 0, 0, 48, 511, 1, 0, 0, 0, 50, 535, 1, 0, 0, 0, 52, 537,
		1, 0, 0, 0, 54, 561, 1, 0, 0, 0, 56, 563, 1, 0, 0, 0, 58, 587, 1, 0, 0,
		0, 60, 589, 1, 0, 0, 0, 62, 604, 1, 0, 0, 0, 64, 606, 1, 0, 0, 0, 66, 608,
		1, 0, 0, 0, 68, 613, 1, 0, 0, 0, 70, 640, 1, 0, 0, 0, 72, 644, 1, 0, 0,
		0, 74, 674, 1, 0, 0, 0, 76, 678, 1, 0, 0, 0, 78, 682, 1, 0, 0, 0, 80, 686,
		1, 0, 0, 0, 82, 690, 1, 0, 0, 0, 84, 698, 1, 0, 0, 0, 86, 703, 1, 0, 0,
		0, 88, 707, 1, 0, 0, 0, 90, 711, 1, 0, 0, 0, 92, 718, 1, 0, 0, 0, 94, 731,
		1, 0, 0, 0, 96, 735, 1, 0, 0, 0, 98, 737, 1, 0, 0, 0, 100, 741, 1, 0, 0,
		0, 102, 745, 1, 0, 0, 0, 104, 749, 1, 0, 0, 0, 106, 753, 1, 0, 0, 0, 108,
		758, 1, 0, 0, 0, 110, 763, 1, 0, 0, 0, 112, 768, 1, 0, 0, 0, 114, 773,
		1, 0, 0, 0, 116, 778, 1, 0, 0, 0, 118, 785, 1, 0, 0, 0, 120, 789, 1, 0,
		0, 0, 122, 791, 1, 0, 0, 0, 124, 825, 1, 0, 0, 0, 126, 829, 1, 0, 0, 0,
		128, 832, 1, 0, 0, 0, 130, 865, 1, 0, 0, 0, 132, 867, 1, 0, 0, 0, 134,
		901, 1, 0, 0, 0, 136, 931, 1, 0, 0, 0, 138, 936, 1, 0, 0, 0, 140, 938,
		1, 0, 0, 0, 142, 961, 1, 0, 0, 0, 144, 987, 1, 0, 0, 0, 146, 1009, 1, 0,
		0, 0, 148, 1011, 1, 0, 0, 0, 150, 1051, 1, 0, 0, 0, 152, 1083, 1, 0, 0,
		0, 154, 1121, 1, 0, 0, 0, 156, 1123, 1, 0, 0, 0, 158, 1166, 1, 0, 0, 0,
		160, 1168, 1, 0, 0, 0, 162, 1205, 1, 0, 0, 0, 164, 1207, 1, 0, 0, 0, 166,
		1239, 1, 0, 0, 0, 168, 1241, 1, 0, 0, 0, 170, 1271, 1, 0, 0, 0, 172, 1273,
		1, 0, 0, 0, 174, 1310, 1, 0, 0, 0, 176, 1312, 1, 0, 0, 0, 178, 1314, 1,
		0, 0, 0, 180, 1360, 1, 0, 0, 0, 182, 1373, 1, 0, 0, 0, 184, 1375, 1, 0,
		0, 0, 186, 1377, 1, 0, 0, 0, 188, 190, 5, 84, 0, 0, 189, 188, 1, 0, 0,
		0, 190, 193, 1, 0, 0, 0, 191, 189, 1, 0, 0, 0, 191, 192, 1, 0, 0, 0, 192,
		203, 1, 0, 0, 0, 193, 191, 1, 0, 0, 0, 194, 198, 3, 4, 2, 0, 195, 197,
		5, 84, 0, 0, 196, 195, 1, 0, 0, 0, 197, 200, 1, 0, 0, 0, 198, 196, 1, 0,
		0, 0, 198, 199, 1, 0, 0, 0, 199, 202, 1, 0, 0, 0, 200, 198, 1, 0, 0, 0,
		201, 194, 1, 0, 0, 0, 202, 205, 1, 0, 0, 0, 203, 201, 1, 0, 0, 0, 203,
		204, 1, 0, 0, 0, 204, 1, 1, 0, 0, 0, 205, 203, 1, 0, 0, 0, 206, 207, 5,
		1, 0, 0, 207, 208, 5, 86, 0, 0, 208, 3, 1, 0, 0, 0, 209, 213, 3, 2, 1,
		0, 210, 212, 5, 84, 0, 0, 211, 210, 1, 0, 0, 0, 212, 215, 1, 0, 0, 0, 213,
		211, 1, 0, 0, 0, 213, 214, 1, 0, 0, 0, 214, 216, 1, 0, 0, 0, 215, 213,
		1, 0, 0, 0, 216, 220, 5, 2, 0, 0, 217, 219, 5, 84, 0, 0, 218, 217, 1, 0,
		0, 0, 219, 222, 1, 0, 0, 0, 220, 218, 1, 0, 0, 0, 220, 221, 1, 0, 0, 0,
		221, 232, 1, 0, 0, 0, 222, 220, 1, 0, 0, 0, 223, 227, 3, 6, 3, 0, 224,
		226, 5, 84, 0, 0, 225, 224, 1, 0, 0, 0, 226, 229, 1, 0, 0, 0, 227, 225,
		1, 0, 0, 0, 227, 228, 1, 0, 0, 0, 228, 231, 1, 0, 0, 0, 229, 227, 1, 0,
		0, 0, 230, 223, 1, 0, 0, 0, 231, 234, 1, 0, 0, 0, 232, 230, 1, 0, 0, 0,
		232, 233, 1, 0, 0, 0, 233, 238, 1, 0, 0, 0, 234, 232, 1, 0, 0, 0, 235,
		237, 5, 84, 0, 0, 236, 235, 1, 0, 0, 0, 237, 240, 1, 0, 0, 0, 238, 236,
		1, 0, 0, 0, 238, 239, 1, 0, 0, 0, 239, 241, 1, 0, 0, 0, 240, 238, 1, 0,
		0, 0, 241, 242, 5, 3, 0, 0, 242, 5, 1, 0, 0, 0, 243, 247, 3, 8, 4, 0, 244,
		247, 3, 122, 61, 0, 245, 247, 3, 132, 66, 0, 246, 243, 1, 0, 0, 0, 246,
		244, 1, 0, 0, 0, 246, 245, 1, 0, 0, 0, 247, 7, 1, 0, 0, 0, 248, 252, 5,
		4, 0, 0, 249, 251, 5, 84, 0, 0, 250, 249, 1, 0, 0, 0, 251, 254, 1, 0, 0,
		0, 252, 250, 1, 0, 0, 0, 252, 253, 1, 0, 0, 0, 253, 255, 1, 0, 0, 0, 254,
		252, 1, 0, 0, 0, 255, 259, 5, 2, 0, 0, 256, 258, 5, 84, 0, 0, 257, 256,
		1, 0, 0, 0, 258, 261, 1, 0, 0, 0, 259, 257, 1, 0, 0, 0, 259, 260, 1, 0,
		0, 0, 260, 271, 1, 0, 0, 0, 261, 259, 1, 0, 0, 0, 262, 266, 3, 10, 5, 0,
		263, 265, 5, 84, 0, 0, 264, 263, 1, 0, 0, 0, 265, 268, 1, 0, 0, 0, 266,
		264, 1, 0, 0, 0, 266, 267, 1, 0, 0, 0, 267, 270, 1, 0, 0, 0, 268, 266,
		1, 0, 0, 0, 269, 262, 1, 0, 0, 0, 270, 273, 1, 0, 0, 0, 271, 269, 1, 0,
		0, 0, 271, 272, 1, 0, 0, 0, 272, 277, 1, 0, 0, 0, 273, 271, 1, 0, 0, 0,
		274, 276, 5, 84, 0, 0, 275, 274, 1, 0, 0, 0, 276, 279, 1, 0, 0, 0, 277,
		275, 1, 0, 0, 0, 277, 278, 1, 0, 0, 0, 278, 280, 1, 0, 0, 0, 279, 277,
		1, 0, 0, 0, 280, 281, 5, 3, 0, 0, 281, 9, 1, 0, 0, 0, 282, 286, 3, 14,
		7, 0, 283, 286, 3, 18, 9, 0, 284, 286, 3, 60, 30, 0, 285, 282, 1, 0, 0,
		0, 285, 283, 1, 0, 0, 0, 285, 284, 1, 0, 0, 0, 286, 11, 1, 0, 0, 0, 287,
		289, 5, 5, 0, 0, 288, 287, 1, 0, 0, 0, 288, 289, 1, 0, 0, 0, 289, 290,
		1, 0, 0, 0, 290, 293, 5, 81, 0, 0, 291, 293, 5, 86, 0, 0, 292, 288, 1,
		0, 0, 0, 292, 291, 1, 0, 0, 0, 293, 13, 1, 0, 0, 0, 294, 295, 5, 86, 0,
		0, 295, 299, 5, 6, 0, 0, 296, 298, 5, 84, 0, 0, 297, 296, 1, 0, 0, 0, 298,
		301, 1, 0, 0, 0, 299, 297, 1, 0, 0, 0, 299, 300, 1, 0, 0, 0, 300, 302,
		1, 0, 0, 0, 301, 299, 1, 0, 0, 0, 302, 303, 3, 12, 6, 0, 303, 15, 1, 0,
		0, 0, 304, 319, 3, 20, 10, 0, 305, 319, 3, 28, 14, 0, 306, 319, 3, 30,
		15, 0, 307, 319, 3, 32, 16, 0, 308, 319, 3, 34, 17, 0, 309, 319, 3, 36,
		18, 0, 310, 319, 3, 40, 20, 0, 311, 319, 3, 42, 21, 0, 312, 319, 3, 52,
		26, 0, 313, 319, 3, 56, 28, 0, 314, 319, 3, 26, 13, 0, 315, 319, 3, 22,
		11, 0, 316, 319, 3, 24, 12, 0, 317, 319, 3, 48, 24, 0, 318, 304, 1, 0,
		0, 0, 318, 305, 1, 0, 0, 0, 318, 306, 1, 0, 0, 0, 318, 307, 1, 0, 0, 0,
		318, 308, 1, 0, 0, 0, 318, 309, 1, 0, 0, 0, 318, 310, 1, 0, 0, 0, 318,
		311, 1, 0, 0, 0, 318, 312, 1, 0, 0, 0, 318, 313, 1, 0, 0, 0, 318, 314,
		1, 0, 0, 0, 318, 315, 1, 0, 0, 0, 318, 316, 1, 0, 0, 0, 318, 317, 1, 0,
		0, 0, 319, 17, 1, 0, 0, 0, 320, 321, 5, 86, 0, 0, 321, 325, 5, 6, 0, 0,
		322, 324, 5, 84, 0, 0, 323, 322, 1, 0, 0, 0, 324, 327, 1, 0, 0, 0, 325,
		323, 1, 0, 0, 0, 325, 326, 1, 0, 0, 0, 326, 328, 1, 0, 0, 0, 327, 325,
		1, 0, 0, 0, 328, 329, 3, 16, 8, 0, 329, 19, 1, 0, 0, 0, 330, 331, 5, 7,
		0, 0, 331, 332, 3, 16, 8, 0, 332, 21, 1, 0, 0, 0, 333, 337, 5, 8, 0, 0,
		334, 336, 5, 84, 0, 0, 335, 334, 1, 0, 0, 0, 336, 339, 1, 0, 0, 0, 337,
		335, 1, 0, 0, 0, 337, 338, 1, 0, 0, 0, 338, 340, 1, 0, 0, 0, 339, 337,
		1, 0, 0, 0, 340, 344, 5, 9, 0, 0, 341, 343, 5, 84, 0, 0, 342, 341, 1, 0,
		0, 0, 343, 346, 1, 0, 0, 0, 344, 342, 1, 0, 0, 0, 344, 345, 1, 0, 0, 0,
		345, 356, 1, 0, 0, 0, 346, 344, 1, 0, 0, 0, 347, 351, 3, 16, 8, 0, 348,
		350, 5, 84, 0, 0, 349, 348, 1, 0, 0, 0, 350, 353, 1, 0, 0, 0, 351, 349,
		1, 0, 0, 0, 351, 352, 1, 0, 0, 0, 352, 355, 1, 0, 0, 0, 353, 351, 1, 0,
		0, 0, 354, 347, 1, 0, 0, 0, 355, 358, 1, 0, 0, 0, 356, 354, 1, 0, 0, 0,
		356, 357, 1, 0, 0, 0, 357, 359, 1, 0, 0, 0, 358, 356, 1, 0, 0, 0, 359,
		363, 3, 16, 8, 0, 360, 362, 5, 84, 0, 0, 361, 360, 1, 0, 0, 0, 362, 365,
		1, 0, 0, 0, 363, 361, 1, 0, 0, 0, 363, 364, 1, 0, 0, 0, 364, 366, 1, 0,
		0, 0, 365, 363, 1, 0, 0, 0, 366, 367, 5, 10, 0, 0, 367, 23, 1, 0, 0, 0,
		368, 372, 5, 11, 0, 0, 369, 371, 5, 84, 0, 0, 370, 369, 1, 0, 0, 0, 371,
		374, 1, 0, 0, 0, 372, 370, 1, 0, 0, 0, 372, 373, 1, 0, 0, 0, 373, 375,
		1, 0, 0, 0, 374, 372, 1, 0, 0, 0, 375, 379, 5, 9, 0, 0, 376, 378, 5, 84,
		0, 0, 377, 376, 1, 0, 0, 0, 378, 381, 1, 0, 0, 0, 379, 377, 1, 0, 0, 0,
		379, 380, 1, 0, 0, 0, 380, 391, 1, 0, 0, 0, 381, 379, 1, 0, 0, 0, 382,
		386, 3, 16, 8, 0, 383, 385, 5, 84, 0, 0, 384, 383, 1, 0, 0, 0, 385, 388,
		1, 0, 0, 0, 386, 384, 1, 0, 0, 0, 386, 387, 1, 0, 0, 0, 387, 390, 1, 0,
		0, 0, 388, 386, 1, 0, 0, 0, 389, 382, 1, 0, 0, 0, 390, 393, 1, 0, 0, 0,
		391, 389, 1, 0, 0, 0, 391, 392, 1, 0, 0, 0, 392, 394, 1, 0, 0, 0, 393,
		391, 1, 0, 0, 0, 394, 398, 3, 16, 8, 0, 395, 397, 5, 84, 0, 0, 396, 395,
		1, 0, 0, 0, 397, 400, 1, 0, 0, 0, 398, 396, 1, 0, 0, 0, 398, 399, 1, 0,
		0, 0, 399, 401, 1, 0, 0, 0, 400, 398, 1, 0, 0, 0, 401, 402, 5, 10, 0, 0,
		402, 25, 1, 0, 0, 0, 403, 404, 3, 118, 59, 0, 404, 27, 1, 0, 0, 0, 405,
		406, 5, 12, 0, 0, 406, 29, 1, 0, 0, 0, 407, 408, 5, 13, 0, 0, 408, 412,
		5, 9, 0, 0, 409, 411, 5, 84, 0, 0, 410, 409, 1, 0, 0, 0, 411, 414, 1, 0,
		0, 0, 412, 410, 1, 0, 0, 0, 412, 413, 1, 0, 0, 0, 413, 425, 1, 0, 0, 0,
		414, 412, 1, 0, 0, 0, 415, 416, 3, 118, 59, 0, 416, 420, 5, 14, 0, 0, 417,
		419, 5, 84, 0, 0, 418, 417, 1, 0, 0, 0, 419, 422, 1, 0, 0, 0, 420, 418,
		1, 0, 0, 0, 420, 421, 1, 0, 0, 0, 421, 424, 1, 0, 0, 0, 422, 420, 1, 0,
		0, 0, 423, 415, 1, 0, 0, 0, 424, 427, 1, 0, 0, 0, 425, 423, 1, 0, 0, 0,
		425, 426, 1, 0, 0, 0, 426, 431, 1, 0, 0, 0, 427, 425, 1, 0, 0, 0, 428,
		430, 5, 84, 0, 0, 429, 428, 1, 0, 0, 0, 430, 433, 1, 0, 0, 0, 431, 429,
		1, 0, 0, 0, 431, 432, 1, 0, 0, 0, 432, 434, 1, 0, 0, 0, 433, 431, 1, 0,
		0, 0, 434, 438, 3, 118, 59, 0, 435, 437, 5, 84, 0, 0, 436, 435, 1, 0, 0,
		0, 437, 440, 1, 0, 0, 0, 438, 436, 1, 0, 0, 0, 438, 439, 1, 0, 0, 0, 439,
		441, 1, 0, 0, 0, 440, 438, 1, 0, 0, 0, 441, 442, 5, 10, 0, 0, 442, 31,
		1, 0, 0, 0, 443, 444, 5, 15, 0, 0, 444, 445, 5, 9, 0, 0, 445, 446, 5, 10,
		0, 0, 446, 33, 1, 0, 0, 0, 447, 448, 5, 16, 0, 0, 448, 449, 5, 9, 0, 0,
		449, 450, 5, 10, 0, 0, 450, 35, 1, 0, 0, 0, 451, 452, 5, 17, 0, 0, 452,
		453, 5, 9, 0, 0, 453, 454, 5, 10, 0, 0, 454, 37, 1, 0, 0, 0, 455, 458,
		3, 104, 52, 0, 456, 458, 3, 102, 51, 0, 457, 455, 1, 0, 0, 0, 457, 456,
		1, 0, 0, 0, 458, 39, 1, 0, 0, 0, 459, 460, 5, 18, 0, 0, 460, 461, 5, 9,
		0, 0, 461, 462, 3, 118, 59, 0, 462, 466, 5, 10, 0, 0, 463, 465, 5, 84,
		0, 0, 464, 463, 1, 0, 0, 0, 465, 468, 1, 0, 0, 0, 466, 464, 1, 0, 0, 0,
		466, 467, 1, 0, 0, 0, 467, 478, 1, 0, 0, 0, 468, 466, 1, 0, 0, 0, 469,
		473, 3, 38, 19, 0, 470, 472, 5, 84, 0, 0, 471, 470, 1, 0, 0, 0, 472, 475,
		1, 0, 0, 0, 473, 471, 1, 0, 0, 0, 473, 474, 1, 0, 0, 0, 474, 477, 1, 0,
		0, 0, 475, 473, 1, 0, 0, 0, 476, 469, 1, 0, 0, 0, 477, 480, 1, 0, 0, 0,
		478, 476, 1, 0, 0, 0, 478, 479, 1, 0, 0, 0, 479, 41, 1, 0, 0, 0, 480, 478,
		1, 0, 0, 0, 481, 482, 5, 19, 0, 0, 482, 483, 5, 79, 0, 0, 483, 487, 5,
		10, 0, 0, 484, 486, 5, 84, 0, 0, 485, 484, 1, 0, 0, 0, 486, 489, 1, 0,
		0, 0, 487, 485, 1, 0, 0, 0, 487, 488, 1, 0, 0, 0, 488, 499, 1, 0, 0, 0,
		489, 487, 1, 0, 0, 0, 490, 494, 3, 44, 22, 0, 491, 493, 5, 84, 0, 0, 492,
		491, 1, 0, 0, 0, 493, 496, 1, 0, 0, 0, 494, 492, 1, 0, 0, 0, 494, 495,
		1, 0, 0, 0, 495, 498, 1, 0, 0, 0, 496, 494, 1, 0, 0, 0, 497, 490, 1, 0,
		0, 0, 498, 501, 1, 0, 0, 0, 499, 497, 1, 0, 0, 0, 499, 500, 1, 0, 0, 0,
		500, 43, 1, 0, 0, 0, 501, 499, 1, 0, 0, 0, 502, 506, 3, 94, 47, 0, 503,
		506, 3, 96, 48, 0, 504, 506, 3, 46, 23, 0, 505, 502, 1, 0, 0, 0, 505, 503,
		1, 0, 0, 0, 505, 504, 1, 0, 0, 0, 506, 45, 1, 0, 0, 0, 507, 508, 5, 20,
		0, 0, 508, 509, 5, 81, 0, 0, 509, 510, 5, 10, 0, 0, 510, 47, 1, 0, 0, 0,
		511, 512, 5, 21, 0, 0, 512, 513, 5, 9, 0, 0, 513, 514, 5, 83, 0, 0, 514,
		518, 5, 10, 0, 0, 515, 517, 5, 84, 0, 0, 516, 515, 1, 0, 0, 0, 517, 520,
		1, 0, 0, 0, 518, 516, 1, 0, 0, 0, 518, 519, 1, 0, 0, 0, 519, 530, 1, 0,
		0, 0, 520, 518, 1, 0, 0, 0, 521, 525, 3, 50, 25, 0, 522, 524, 5, 84, 0,
		0, 523, 522, 1, 0, 0, 0, 524, 527, 1, 0, 0, 0, 525, 523, 1, 0, 0, 0, 525,
		526, 1, 0, 0, 0, 526, 529, 1, 0, 0, 0, 527, 525, 1, 0, 0, 0, 528, 521,
		1, 0, 0, 0, 529, 532, 1, 0, 0, 0, 530, 528, 1, 0, 0, 0, 530, 531, 1, 0,
		0, 0, 531, 49, 1, 0, 0, 0, 532, 530, 1, 0, 0, 0, 533, 536, 3, 106, 53,
		0, 534, 536, 3, 110, 55, 0, 535, 533, 1, 0, 0, 0, 535, 534, 1, 0, 0, 0,
		536, 51, 1, 0, 0, 0, 537, 538, 5, 22, 0, 0, 538, 539, 5, 9, 0, 0, 539,
		543, 5, 10, 0, 0, 540, 542, 5, 84, 0, 0, 541, 540, 1, 0, 0, 0, 542, 545,
		1, 0, 0, 0, 543, 541, 1, 0, 0, 0, 543, 544, 1, 0, 0, 0, 544, 555, 1, 0,
		0, 0, 545, 543, 1, 0, 0, 0, 546, 550, 3, 54, 27, 0, 547, 549, 5, 84, 0,
		0, 548, 547, 1, 0, 0, 0, 549, 552, 1, 0, 0, 0, 550, 548, 1, 0, 0, 0, 550,
		551, 1, 0, 0, 0, 551, 554, 1, 0, 0, 0, 552, 550, 1, 0, 0, 0, 553, 546,
		1, 0, 0, 0, 554, 557, 1, 0, 0, 0, 555, 553, 1, 0, 0, 0, 555, 556, 1, 0,
		0, 0, 556, 53, 1, 0, 0, 0, 557, 555, 1, 0, 0, 0, 558, 562, 3, 94, 47, 0,
		559, 562, 3, 96, 48, 0, 560, 562, 3, 98, 49, 0, 561, 558, 1, 0, 0, 0, 561,
		559, 1, 0, 0, 0, 561, 560, 1, 0, 0, 0, 562, 55, 1, 0, 0, 0, 563, 564, 5,
		23, 0, 0, 564, 565, 5, 9, 0, 0, 565, 566, 3, 12, 6, 0, 566, 570, 5, 10,
		0, 0, 567, 569, 5, 84, 0, 0, 568, 567, 1, 0, 0, 0, 569, 572, 1, 0, 0, 0,
		570, 568, 1, 0, 0, 0, 570, 571, 1, 0, 0, 0, 571, 582, 1, 0, 0, 0, 572,
		570, 1, 0, 0, 0, 573, 577, 3, 58, 29, 0, 574, 576, 5, 84, 0, 0, 575, 574,
		1, 0, 0, 0, 576, 579, 1, 0, 0, 0, 577, 575, 1, 0, 0, 0, 577, 578, 1, 0,
		0, 0, 578, 581, 1, 0, 0, 0, 579, 577, 1, 0, 0, 0, 580, 573, 1, 0, 0, 0,
		581, 584, 1, 0, 0, 0, 582, 580, 1, 0, 0, 0, 582, 583, 1, 0, 0, 0, 583,
		57, 1, 0, 0, 0, 584, 582, 1, 0, 0, 0, 585, 588, 3, 100, 50, 0, 586, 588,
		3, 96, 48, 0, 587, 585, 1, 0, 0, 0, 587, 586, 1, 0, 0, 0, 588, 59, 1, 0,
		0, 0, 589, 590, 5, 86, 0, 0, 590, 594, 5, 6, 0, 0, 591, 593, 5, 84, 0,
		0, 592, 591, 1, 0, 0, 0, 593, 596, 1, 0, 0, 0, 594, 592, 1, 0, 0, 0, 594,
		595, 1, 0, 0, 0, 595, 597, 1, 0, 0, 0, 596, 594, 1, 0, 0, 0, 597, 598,
		3, 62, 31, 0, 598, 61, 1, 0, 0, 0, 599, 605, 3, 66, 33, 0, 600, 605, 3,
		68, 34, 0, 601, 605, 3, 64, 32, 0, 602, 605, 3, 72, 36, 0, 603, 605, 3,
		70, 35, 0, 604, 599, 1, 0, 0, 0, 604, 600, 1, 0, 0, 0, 604, 601, 1, 0,
		0, 0, 604, 602, 1, 0, 0, 0, 604, 603, 1, 0, 0, 0, 605, 63, 1, 0, 0, 0,
		606, 607, 3, 118, 59, 0, 607, 65, 1, 0, 0, 0, 608, 609, 5, 24, 0, 0, 609,
		610, 5, 9, 0, 0, 610, 611, 3, 118, 59, 0, 611, 612, 5, 10, 0, 0, 612, 67,
		1, 0, 0, 0, 613, 617, 5, 25, 0, 0, 614, 616, 5, 84, 0, 0, 615, 614, 1,
		0, 0, 0, 616, 619, 1, 0, 0, 0, 617, 615, 1, 0, 0, 0, 617, 618, 1, 0, 0,
		0, 618, 629, 1, 0, 0, 0, 619, 617, 1, 0, 0, 0, 620, 624, 3, 62, 31, 0,
		621, 623, 5, 84, 0, 0, 622, 621, 1, 0, 0, 0, 623, 626, 1, 0, 0, 0, 624,
		622, 1, 0, 0, 0, 624, 625, 1, 0, 0, 0, 625, 628, 1, 0, 0, 0, 626, 624,
		1, 0, 0, 0, 627, 620, 1, 0, 0, 0, 628, 631, 1, 0, 0, 0, 629, 627, 1, 0,
		0, 0, 629, 630, 1, 0, 0, 0, 630, 635, 1, 0, 0, 0, 631, 629, 1, 0, 0, 0,
		632, 634, 5, 84, 0, 0, 633, 632, 1, 0, 0, 0, 634, 637, 1, 0, 0, 0, 635,
		633, 1, 0, 0, 0, 635, 636, 1, 0, 0, 0, 636, 638, 1, 0, 0, 0, 637, 635,
		1, 0, 0, 0, 638, 639, 5, 26, 0, 0, 639, 69, 1, 0, 0, 0, 640, 641, 5, 27,
		0, 0, 641, 642, 5, 9, 0, 0, 642, 643, 5, 10, 0, 0, 643, 71, 1, 0, 0, 0,
		644, 648, 5, 28, 0, 0, 645, 647, 5, 84, 0, 0, 646, 645, 1, 0, 0, 0, 647,
		650, 1, 0, 0, 0, 648, 646, 1, 0, 0, 0, 648, 649, 1, 0, 0, 0, 649, 651,
		1, 0, 0, 0, 650, 648, 1, 0, 0, 0, 651, 655, 5, 9, 0, 0, 652, 654, 5, 84,
		0, 0, 653, 652, 1, 0, 0, 0, 654, 657, 1, 0, 0, 0, 655, 653, 1, 0, 0, 0,
		655, 656, 1, 0, 0, 0, 656, 658, 1, 0, 0, 0, 657, 655, 1, 0, 0, 0, 658,
		662, 3, 16, 8, 0, 659, 661, 5, 84, 0, 0, 660, 659, 1, 0, 0, 0, 661, 664,
		1, 0, 0, 0, 662, 660, 1, 0, 0, 0, 662, 663, 1, 0, 0, 0, 663, 665, 1, 0,
		0, 0, 664, 662, 1, 0, 0, 0, 665, 669, 5, 10, 0, 0, 666, 668, 5, 84, 0,
		0, 667, 666, 1, 0, 0, 0, 668, 671, 1, 0, 0, 0, 669, 667, 1, 0, 0, 0, 669,
		670, 1, 0, 0, 0, 670, 672, 1, 0, 0, 0, 671, 669, 1, 0, 0, 0, 672, 673,
		3, 62, 31, 0, 673, 73, 1, 0, 0, 0, 674, 675, 5, 29, 0, 0, 675, 676, 3,
		120, 60, 0, 676, 677, 5, 10, 0, 0, 677, 75, 1, 0, 0, 0, 678, 679, 5, 30,
		0, 0, 679, 680, 3, 120, 60, 0, 680, 681, 5, 10, 0, 0, 681, 77, 1, 0, 0,
		0, 682, 683, 5, 31, 0, 0, 683, 684, 3, 120, 60, 0, 684, 685, 5, 10, 0,
		0, 685, 79, 1, 0, 0, 0, 686, 687, 5, 32, 0, 0, 687, 688, 3, 120, 60, 0,
		688, 689, 5, 10, 0, 0, 689, 81, 1, 0, 0, 0, 690, 696, 5, 33, 0, 0, 691,
		697, 3, 128, 64, 0, 692, 693, 5, 9, 0, 0, 693, 694, 3, 118, 59, 0, 694,
		695, 5, 10, 0, 0, 695, 697, 1, 0, 0, 0, 696, 691, 1, 0, 0, 0, 696, 692,
		1, 0, 0, 0, 697, 83, 1, 0, 0, 0, 698, 699, 5, 34, 0, 0, 699, 700, 5, 9,
		0, 0, 700, 701, 3, 120, 60, 0, 701, 702, 5, 10, 0, 0, 702, 85, 1, 0, 0,
		0, 703, 704, 5, 35, 0, 0, 704, 705, 5, 9, 0, 0, 705, 706, 5, 10, 0, 0,
		706, 87, 1, 0, 0, 0, 707, 708, 5, 36, 0, 0, 708, 709, 5, 9, 0, 0, 709,
		710, 5, 10, 0, 0, 710, 89, 1, 0, 0, 0, 711, 712, 5, 37, 0, 0, 712, 713,
		5, 9, 0, 0, 713, 714, 5, 80, 0, 0, 714, 715, 5, 14, 0, 0, 715, 716, 3,
		136, 68, 0, 716, 717, 5, 10, 0, 0, 717, 91, 1, 0, 0, 0, 718, 719, 5, 38,
		0, 0, 719, 725, 5, 9, 0, 0, 720, 721, 3, 120, 60, 0, 721, 722, 5, 14, 0,
		0, 722, 724, 1, 0, 0, 0, 723, 720, 1, 0, 0, 0, 724, 727, 1, 0, 0, 0, 725,
		723, 1, 0, 0, 0, 725, 726, 1, 0, 0, 0, 726, 728, 1, 0, 0, 0, 727, 725,
		1, 0, 0, 0, 728, 729, 3, 120, 60, 0, 729, 730, 5, 10, 0, 0, 730, 93, 1,
		0, 0, 0, 731, 732, 5, 39, 0, 0, 732, 733, 5, 81, 0, 0, 733, 734, 5, 10,
		0, 0, 734, 95, 1, 0, 0, 0, 735, 736, 5, 40, 0, 0, 736, 97, 1, 0, 0, 0,
		737, 738, 5, 41, 0, 0, 738, 739, 3, 120, 60, 0, 739, 740, 5, 10, 0, 0,
		740, 99, 1, 0, 0, 0, 741, 742, 5, 41, 0, 0, 742, 743, 5, 81, 0, 0, 743,
		744, 5, 10, 0, 0, 744, 101, 1, 0, 0, 0, 745, 746, 5, 42, 0, 0, 746, 747,
		3, 120, 60, 0, 747, 748, 5, 10, 0, 0, 748, 103, 1, 0, 0, 0, 749, 750, 5,
		43, 0, 0, 750, 751, 3, 120, 60, 0, 751, 752, 5, 10, 0, 0, 752, 105, 1,
		0, 0, 0, 753, 754, 5, 44, 0, 0, 754, 755, 5, 9, 0, 0, 755, 756, 3, 12,
		6, 0, 756, 757, 5, 10, 0, 0, 757, 107, 1, 0, 0, 0, 758, 759, 5, 44, 0,
		0, 759, 760, 5, 9, 0, 0, 760, 761, 5, 81, 0, 0, 761, 762, 5, 10, 0, 0,
		762, 109, 1, 0, 0, 0, 763, 764, 5, 45, 0, 0, 764, 765, 5, 9, 0, 0, 765,
		766, 3, 12, 6, 0, 766, 767, 5, 10, 0, 0, 767, 111, 1, 0, 0, 0, 768, 769,
		5, 45, 0, 0, 769, 770, 5, 9, 0, 0, 770, 771, 5, 81, 0, 0, 771, 772, 5,
		10, 0, 0, 772, 113, 1, 0, 0, 0, 773, 774, 5, 46, 0, 0, 774, 775, 5, 9,
		0, 0, 775, 776, 3, 136, 68, 0, 776, 777, 5, 10, 0, 0, 777, 115, 1, 0, 0,
		0, 778, 779, 5, 47, 0, 0, 779, 780, 5, 9, 0, 0, 780, 781, 3, 136, 68, 0,
		781, 782, 5, 10, 0, 0, 782, 117, 1, 0, 0, 0, 783, 784, 5, 86, 0, 0, 784,
		786, 5, 48, 0, 0, 785, 783, 1, 0, 0, 0, 785, 786, 1, 0, 0, 0, 786, 787,
		1, 0, 0, 0, 787, 788, 5, 86, 0, 0, 788, 119, 1, 0, 0, 0, 789, 790, 7, 0,
		0, 0, 790, 121, 1, 0, 0, 0, 791, 795, 5, 49, 0, 0, 792, 794, 5, 84, 0,
		0, 793, 792, 1, 0, 0, 0, 794, 797, 1, 0, 0, 0, 795, 793, 1, 0, 0, 0, 795,
		796, 1, 0, 0, 0, 796, 798, 1, 0, 0, 0, 797, 795, 1, 0, 0, 0, 798, 802,
		5, 2, 0, 0, 799, 801, 5, 84, 0, 0, 800, 799, 1, 0, 0, 0, 801, 804, 1, 0,
		0, 0, 802, 800, 1, 0, 0, 0, 802, 803, 1, 0, 0, 0, 803, 814, 1, 0, 0, 0,
		804, 802, 1, 0, 0, 0, 805, 809, 3, 124, 62, 0, 806, 808, 5, 84, 0, 0, 807,
		806, 1, 0, 0, 0, 808, 811, 1, 0, 0, 0, 809, 807, 1, 0, 0, 0, 809, 810,
		1, 0, 0, 0, 810, 813, 1, 0, 0, 0, 811, 809, 1, 0, 0, 0, 812, 805, 1, 0,
		0, 0, 813, 816, 1, 0, 0, 0, 814, 812, 1, 0, 0, 0, 814, 815, 1, 0, 0, 0,
		815, 820, 1, 0, 0, 0, 816, 814, 1, 0, 0, 0, 817, 819, 5, 84, 0, 0, 818,
		817, 1, 0, 0, 0, 819, 822, 1, 0, 0, 0, 820, 818, 1, 0, 0, 0, 820, 821,
		1, 0, 0, 0, 821, 823, 1, 0, 0, 0, 822, 820, 1, 0, 0, 0, 823, 824, 5, 3,
		0, 0, 824, 123, 1, 0, 0, 0, 825, 826, 5, 86, 0, 0, 826, 827, 5, 6, 0, 0,
		827, 828, 3, 126, 63, 0, 828, 125, 1, 0, 0, 0, 829, 830, 5, 49, 0, 0, 830,
		831, 3, 128, 64, 0, 831, 127, 1, 0, 0, 0, 832, 836, 5, 9, 0, 0, 833, 835,
		5, 84, 0, 0, 834, 833, 1, 0, 0, 0, 835, 838, 1, 0, 0, 0, 836, 834, 1, 0,
		0, 0, 836, 837, 1, 0, 0, 0, 837, 839, 1, 0, 0, 0, 838, 836, 1, 0, 0, 0,
		839, 843, 5, 81, 0, 0, 840, 842, 5, 84, 0, 0, 841, 840, 1, 0, 0, 0, 842,
		845, 1, 0, 0, 0, 843, 841, 1, 0, 0, 0, 843, 844, 1, 0, 0, 0, 844, 846,
		1, 0, 0, 0, 845, 843, 1, 0, 0, 0, 846, 850, 5, 10, 0, 0, 847, 849, 5, 84,
		0, 0, 848, 847, 1, 0, 0, 0, 849, 852, 1, 0, 0, 0, 850, 848, 1, 0, 0, 0,
		850, 851, 1, 0, 0, 0, 851, 862, 1, 0, 0, 0, 852, 850, 1, 0, 0, 0, 853,
		857, 3, 130, 65, 0, 854, 856, 5, 84, 0, 0, 855, 854, 1, 0, 0, 0, 856, 859,
		1, 0, 0, 0, 857, 855, 1, 0, 0, 0, 857, 858, 1, 0, 0, 0, 858, 861, 1, 0,
		0, 0, 859, 857, 1, 0, 0, 0, 860, 853, 1, 0, 0, 0, 861, 864, 1, 0, 0, 0,
		862, 860, 1, 0, 0, 0, 862, 863, 1, 0, 0, 0, 863, 129, 1, 0, 0, 0, 864,
		862, 1, 0, 0, 0, 865, 866, 3, 92, 46, 0, 866, 131, 1, 0, 0, 0, 867, 871,
		5, 50, 0, 0, 868, 870, 5, 84, 0, 0, 869, 868, 1, 0, 0, 0, 870, 873, 1,
		0, 0, 0, 871, 869, 1, 0, 0, 0, 871, 872, 1, 0, 0, 0, 872, 874, 1, 0, 0,
		0, 873, 871, 1, 0, 0, 0, 874, 878, 5, 2, 0, 0, 875, 877, 5, 84, 0, 0, 876,
		875, 1, 0, 0, 0, 877, 880, 1, 0, 0, 0, 878, 876, 1, 0, 0, 0, 878, 879,
		1, 0, 0, 0, 879, 890, 1, 0, 0, 0, 880, 878, 1, 0, 0, 0, 881, 885, 3, 134,
		67, 0, 882, 884, 5, 84, 0, 0, 883, 882, 1, 0, 0, 0, 884, 887, 1, 0, 0,
		0, 885, 883, 1, 0, 0, 0, 885, 886, 1, 0, 0, 0, 886, 889, 1, 0, 0, 0, 887,
		885, 1, 0, 0, 0, 888, 881, 1, 0, 0, 0, 889, 892, 1, 0, 0, 0, 890, 888,
		1, 0, 0, 0, 890, 891, 1, 0, 0, 0, 891, 896, 1, 0, 0, 0, 892, 890, 1, 0,
		0, 0, 893, 895, 5, 84, 0, 0, 894, 893, 1, 0, 0, 0, 895, 898, 1, 0, 0, 0,
		896, 894, 1, 0, 0, 0, 896, 897, 1, 0, 0, 0, 897, 899, 1, 0, 0, 0, 898,
		896, 1, 0, 0, 0, 899, 900, 5, 3, 0, 0, 900, 133, 1, 0, 0, 0, 901, 905,
		5, 86, 0, 0, 902, 904, 5, 84, 0, 0, 903, 902, 1, 0, 0, 0, 904, 907, 1,
		0, 0, 0, 905, 903, 1, 0, 0, 0, 905, 906, 1, 0, 0, 0, 906, 908, 1, 0, 0,
		0, 907, 905, 1, 0, 0, 0, 908, 912, 5, 6, 0, 0, 909, 911, 5, 84, 0, 0, 910,
		909, 1, 0, 0, 0, 911, 914, 1, 0, 0, 0, 912, 910, 1, 0, 0, 0, 912, 913,
		1, 0, 0, 0, 913, 915, 1, 0, 0, 0, 914, 912, 1, 0, 0, 0, 915, 916, 3, 136,
		68, 0, 916, 135, 1, 0, 0, 0, 917, 932, 3, 140, 70, 0, 918, 932, 3, 148,
		74, 0, 919, 932, 3, 150, 75, 0, 920, 932, 3, 182, 91, 0, 921, 932, 3, 144,
		72, 0, 922, 932, 3, 138, 69, 0, 923, 932, 3, 152, 76, 0, 924, 932, 3, 156,
		78, 0, 925, 932, 3, 160, 80, 0, 926, 932, 3, 164, 82, 0, 927, 932, 3, 168,
		84, 0, 928, 932, 3, 172, 86, 0, 929, 932, 3, 176, 88, 0, 930, 932, 3, 184,
		92, 0, 931, 917, 1, 0, 0, 0, 931, 918, 1, 0, 0, 0, 931, 919, 1, 0, 0, 0,
		931, 920, 1, 0, 0, 0, 931, 921, 1, 0, 0, 0, 931, 922, 1, 0, 0, 0, 931,
		923, 1, 0, 0, 0, 931, 924, 1, 0, 0, 0, 931, 925, 1, 0, 0, 0, 931, 926,
		1, 0, 0, 0, 931, 927, 1, 0, 0, 0, 931, 928, 1, 0, 0, 0, 931, 929, 1, 0,
		0, 0, 931, 930, 1, 0, 0, 0, 932, 934, 1, 0, 0, 0, 933, 935, 3, 186, 93,
		0, 934, 933, 1, 0, 0, 0, 934, 935, 1, 0, 0, 0, 935, 137, 1, 0, 0, 0, 936,
		937, 7, 1, 0, 0, 937, 139, 1, 0, 0, 0, 938, 942, 7, 2, 0, 0, 939, 941,
		5, 84, 0, 0, 940, 939, 1, 0, 0, 0, 941, 944, 1, 0, 0, 0, 942, 940, 1, 0,
		0, 0, 942, 943, 1, 0, 0, 0, 943, 945, 1, 0, 0, 0, 944, 942, 1, 0, 0, 0,
		945, 949, 5, 9, 0, 0, 946, 948, 5, 84, 0, 0, 947, 946, 1, 0, 0, 0, 948,
		951, 1, 0, 0, 0, 949, 947, 1, 0, 0, 0, 949, 950, 1, 0, 0, 0, 950, 952,
		1, 0, 0, 0, 951, 949, 1, 0, 0, 0, 952, 956, 3, 136, 68, 0, 953, 955, 5,
		84, 0, 0, 954, 953, 1, 0, 0, 0, 955, 958, 1, 0, 0, 0, 956, 954, 1, 0, 0,
		0, 956, 957, 1, 0, 0, 0, 957, 959, 1, 0, 0, 0, 958, 956, 1, 0, 0, 0, 959,
		960, 5, 10, 0, 0, 960, 141, 1, 0, 0, 0, 961, 962, 3, 126, 63, 0, 962, 143,
		1, 0, 0, 0, 963, 967, 5, 49, 0, 0, 964, 966, 5, 84, 0, 0, 965, 964, 1,
		0, 0, 0, 966, 969, 1, 0, 0, 0, 967, 965, 1, 0, 0, 0, 967, 968, 1, 0, 0,
		0, 968, 970, 1, 0, 0, 0, 969, 967, 1, 0, 0, 0, 970, 974, 5, 9, 0, 0, 971,
		973, 5, 84, 0, 0, 972, 971, 1, 0, 0, 0, 973, 976, 1, 0, 0, 0, 974, 972,
		1, 0, 0, 0, 974, 975, 1, 0, 0, 0, 975, 977, 1, 0, 0, 0, 976, 974, 1, 0,
		0, 0, 977, 981, 3, 118, 59, 0, 978, 980, 5, 84, 0, 0, 979, 978, 1, 0, 0,
		0, 980, 983, 1, 0, 0, 0, 981, 979, 1, 0, 0, 0, 981, 982, 1, 0, 0, 0, 982,
		984, 1, 0, 0, 0, 983, 981, 1, 0, 0, 0, 984, 985, 5, 10, 0, 0, 985, 988,
		1, 0, 0, 0, 986, 988, 3, 142, 71, 0, 987, 963, 1, 0, 0, 0, 987, 986, 1,
		0, 0, 0, 988, 992, 1, 0, 0, 0, 989, 991, 5, 84, 0, 0, 990, 989, 1, 0, 0,
		0, 991, 994, 1, 0, 0, 0, 992, 990, 1, 0, 0, 0, 992, 993, 1, 0, 0, 0, 993,
		1004, 1, 0, 0, 0, 994, 992, 1, 0, 0, 0, 995, 999, 3, 146, 73, 0, 996, 998,
		5, 84, 0, 0, 997, 996, 1, 0, 0, 0, 998, 1001, 1, 0, 0, 0, 999, 997, 1,
		0, 0, 0, 999, 1000, 1, 0, 0, 0, 1000, 1003, 1, 0, 0, 0, 1001, 999, 1, 0,
		0, 0, 1002, 995, 1, 0, 0, 0, 1003, 1006, 1, 0, 0, 0, 1004, 1002, 1, 0,
		0, 0, 1004, 1005, 1, 0, 0, 0, 1005, 145, 1, 0, 0, 0, 1006, 1004, 1, 0,
		0, 0, 1007, 1010, 3, 74, 37, 0, 1008, 1010, 3, 76, 38, 0, 1009, 1007, 1,
		0, 0, 0, 1009, 1008, 1, 0, 0, 0, 1010, 147, 1, 0, 0, 0, 1011, 1015, 5,
		66, 0, 0, 1012, 1014, 5, 84, 0, 0, 1013, 1012, 1, 0, 0, 0, 1014, 1017,
		1, 0, 0, 0, 1015, 1013, 1, 0, 0, 0, 1015, 1016, 1, 0, 0, 0, 1016, 1018,
		1, 0, 0, 0, 1017, 1015, 1, 0, 0, 0, 1018, 1022, 5, 9, 0, 0, 1019, 1021,
		5, 84, 0, 0, 1020, 1019, 1, 0, 0, 0, 1021, 1024, 1, 0, 0, 0, 1022, 1020,
		1, 0, 0, 0, 1022, 1023, 1, 0, 0, 0, 1023, 1025, 1, 0, 0, 0, 1024, 1022,
		1, 0, 0, 0, 1025, 1029, 5, 89, 0, 0, 1026, 1028, 5, 84, 0, 0, 1027, 1026,
		1, 0, 0, 0, 1028, 1031, 1, 0, 0, 0, 1029, 1027, 1, 0, 0, 0, 1029, 1030,
		1, 0, 0, 0, 1030, 1032, 1, 0, 0, 0, 1031, 1029, 1, 0, 0, 0, 1032, 1036,
		5, 14, 0, 0, 1033, 1035, 5, 84, 0, 0, 1034, 1033, 1, 0, 0, 0, 1035, 1038,
		1, 0, 0, 0, 1036, 1034, 1, 0, 0, 0, 1036, 1037, 1, 0, 0, 0, 1037, 1039,
		1, 0, 0, 0, 1038, 1036, 1, 0, 0, 0, 1039, 1043, 3, 136, 68, 0, 1040, 1042,
		5, 84, 0, 0, 1041, 1040, 1, 0, 0, 0, 1042, 1045, 1, 0, 0, 0, 1043, 1041,
		1, 0, 0, 0, 1043, 1044, 1, 0, 0, 0, 1044, 1046, 1, 0, 0, 0, 1045, 1043,
		1, 0, 0, 0, 1046, 1047, 5, 10, 0, 0, 1047, 149, 1, 0, 0, 0, 1048, 1052,
		1, 0, 0, 0, 1049, 1052, 5, 67, 0, 0, 1050, 1052, 5, 68, 0, 0, 1051, 1048,
		1, 0, 0, 0, 1051, 1049, 1, 0, 0, 0, 1051, 1050, 1, 0, 0, 0, 1052, 1056,
		1, 0, 0, 0, 1053, 1055, 5, 84, 0, 0, 1054, 1053, 1, 0, 0, 0, 1055, 1058,
		1, 0, 0, 0, 1056, 1054, 1, 0, 0, 0, 1056, 1057, 1, 0, 0, 0, 1057, 1059,
		1, 0, 0, 0, 1058, 1056, 1, 0, 0, 0, 1059, 1063, 5, 9, 0, 0, 1060, 1062,
		5, 84, 0, 0, 1061, 1060, 1, 0, 0, 0, 1062, 1065, 1, 0, 0, 0, 1063, 1061,
		1, 0, 0, 0, 1063, 1064, 1, 0, 0, 0, 1064, 1066, 1, 0, 0, 0, 1065, 1063,
		1, 0, 0, 0, 1066, 1067, 3, 136, 68, 0, 1067, 1071, 5, 14, 0, 0, 1068, 1070,
		5, 84, 0, 0, 1069, 1068, 1, 0, 0, 0, 1070, 1073, 1, 0, 0, 0, 1071, 1069,
		1, 0, 0, 0, 1071, 1072, 1, 0, 0, 0, 1072, 1074, 1, 0, 0, 0, 1073, 1071,
		1, 0, 0, 0, 1074, 1078, 3, 136, 68, 0, 1075, 1077, 5, 84, 0, 0, 1076, 1075,
		1, 0, 0, 0, 1077, 1080, 1, 0, 0, 0, 1078, 1076, 1, 0, 0, 0, 1078, 1079,
		1, 0, 0, 0, 1079, 1081, 1, 0, 0, 0, 1080, 1078, 1, 0, 0, 0, 1081, 1082,
		5, 10, 0, 0, 1082, 151, 1, 0, 0, 0, 1083, 1087, 5, 69, 0, 0, 1084, 1086,
		5, 84, 0, 0, 1085, 1084, 1, 0, 0, 0, 1086, 1089, 1, 0, 0, 0, 1087, 1085,
		1, 0, 0, 0, 1087, 1088, 1, 0, 0, 0, 1088, 1090, 1, 0, 0, 0, 1089, 1087,
		1, 0, 0, 0, 1090, 1094, 5, 9, 0, 0, 1091, 1093, 5, 84, 0, 0, 1092, 1091,
		1, 0, 0, 0, 1093, 1096, 1, 0, 0, 0, 1094, 1092, 1, 0, 0, 0, 1094, 1095,
		1, 0, 0, 0, 1095, 1097, 1, 0, 0, 0, 1096, 1094, 1, 0, 0, 0, 1097, 1101,
		5, 10, 0, 0, 1098, 1100, 5, 84, 0, 0, 1099, 1098, 1, 0, 0, 0, 1100, 1103,
		1, 0, 0, 0, 1101, 1099, 1, 0, 0, 0, 1101, 1102, 1, 0, 0, 0, 1102, 1113,
		1, 0, 0, 0, 1103, 1101, 1, 0, 0, 0, 1104, 1108, 3, 154, 77, 0, 1105, 1107,
		5, 84, 0, 0, 1106, 1105, 1, 0, 0, 0, 1107, 1110, 1, 0, 0, 0, 1108, 1106,
		1, 0, 0, 0, 1108, 1109, 1, 0, 0, 0, 1109, 1112, 1, 0, 0, 0, 1110, 1108,
		1, 0, 0, 0, 1111, 1104, 1, 0, 0, 0, 1112, 1115, 1, 0, 0, 0, 1113, 1111,
		1, 0, 0, 0, 1113, 1114, 1, 0, 0, 0, 1114, 153, 1, 0, 0, 0, 1115, 1113,
		1, 0, 0, 0, 1116, 1122, 3, 74, 37, 0, 1117, 1122, 3, 76, 38, 0, 1118, 1122,
		3, 78, 39, 0, 1119, 1122, 3, 80, 40, 0, 1120, 1122, 3, 84, 42, 0, 1121,
		1116, 1, 0, 0, 0, 1121, 1117, 1, 0, 0, 0, 1121, 1118, 1, 0, 0, 0, 1121,
		1119, 1, 0, 0, 0, 1121, 1120, 1, 0, 0, 0, 1122, 155, 1, 0, 0, 0, 1123,
		1127, 5, 70, 0, 0, 1124, 1126, 5, 84, 0, 0, 1125, 1124, 1, 0, 0, 0, 1126,
		1129, 1, 0, 0, 0, 1127, 1125, 1, 0, 0, 0, 1127, 1128, 1, 0, 0, 0, 1128,
		1130, 1, 0, 0, 0, 1129, 1127, 1, 0, 0, 0, 1130, 1134, 5, 9, 0, 0, 1131,
		1133, 5, 84, 0, 0, 1132, 1131, 1, 0, 0, 0, 1133, 1136, 1, 0, 0, 0, 1134,
		1132, 1, 0, 0, 0, 1134, 1135, 1, 0, 0, 0, 1135, 1137, 1, 0, 0, 0, 1136,
		1134, 1, 0, 0, 0, 1137, 1141, 3, 136, 68, 0, 1138, 1140, 5, 84, 0, 0, 1139,
		1138, 1, 0, 0, 0, 1140, 1143, 1, 0, 0, 0, 1141, 1139, 1, 0, 0, 0, 1141,
		1142, 1, 0, 0, 0, 1142, 1144, 1, 0, 0, 0, 1143, 1141, 1, 0, 0, 0, 1144,
		1148, 5, 10, 0, 0, 1145, 1147, 5, 84, 0, 0, 1146, 1145, 1, 0, 0, 0, 1147,
		1150, 1, 0, 0, 0, 1148, 1146, 1, 0, 0, 0, 1148, 1149, 1, 0, 0, 0, 1149,
		1160, 1, 0, 0, 0, 1150, 1148, 1, 0, 0, 0, 1151, 1155, 3, 158, 79, 0, 1152,
		1154, 5, 84, 0, 0, 1153, 1152, 1, 0, 0, 0, 1154, 1157, 1, 0, 0, 0, 1155,
		1153, 1, 0, 0, 0, 1155, 1156, 1, 0, 0, 0, 1156, 1159, 1, 0, 0, 0, 1157,
		1155, 1, 0, 0, 0, 1158, 1151, 1, 0, 0, 0, 1159, 1162, 1, 0, 0, 0, 1160,
		1158, 1, 0, 0, 0, 1160, 1161, 1, 0, 0, 0, 1161, 157, 1, 0, 0, 0, 1162,
		1160, 1, 0, 0, 0, 1163, 1167, 3, 86, 43, 0, 1164, 1167, 3, 88, 44, 0, 1165,
		1167, 3, 82, 41, 0, 1166, 1163, 1, 0, 0, 0, 1166, 1164, 1, 0, 0, 0, 1166,
		1165, 1, 0, 0, 0, 1167, 159, 1, 0, 0, 0, 1168, 1172, 5, 71, 0, 0, 1169,
		1171, 5, 84, 0, 0, 1170, 1169, 1, 0, 0, 0, 1171, 1174, 1, 0, 0, 0, 1172,
		1170, 1, 0, 0, 0, 1172, 1173, 1, 0, 0, 0, 1173, 1175, 1, 0, 0, 0, 1174,
		1172, 1, 0, 0, 0, 1175, 1179, 5, 9, 0, 0, 1176, 1178, 5, 84, 0, 0, 1177,
		1176, 1, 0, 0, 0, 1178, 1181, 1, 0, 0, 0, 1179, 1177, 1, 0, 0, 0, 1179,
		1180, 1, 0, 0, 0, 1180, 1182, 1, 0, 0, 0, 1181, 1179, 1, 0, 0, 0, 1182,
		1186, 5, 10, 0, 0, 1183, 1185, 5, 84, 0, 0, 1184, 1183, 1, 0, 0, 0, 1185,
		1188, 1, 0, 0, 0, 1186, 1184, 1, 0, 0, 0, 1186, 1187, 1, 0, 0, 0, 1187,
		1198, 1, 0, 0, 0, 1188, 1186, 1, 0, 0, 0, 1189, 1193, 3, 162, 81, 0, 1190,
		1192, 5, 84, 0, 0, 1191, 1190, 1, 0, 0, 0, 1192, 1195, 1, 0, 0, 0, 1193,
		1191, 1, 0, 0, 0, 1193, 1194, 1, 0, 0, 0, 1194, 1197, 1, 0, 0, 0, 1195,
		1193, 1, 0, 0, 0, 1196, 1189, 1, 0, 0, 0, 1197, 1200, 1, 0, 0, 0, 1198,
		1196, 1, 0, 0, 0, 1198, 1199, 1, 0, 0, 0, 1199, 161, 1, 0, 0, 0, 1200,
		1198, 1, 0, 0, 0, 1201, 1206, 3, 82, 41, 0, 1202, 1206, 3, 74, 37, 0, 1203,
		1206, 3, 76, 38, 0, 1204, 1206, 3, 90, 45, 0, 1205, 1201, 1, 0, 0, 0, 1205,
		1202, 1, 0, 0, 0, 1205, 1203, 1, 0, 0, 0, 1205, 1204, 1, 0, 0, 0, 1206,
		163, 1, 0, 0, 0, 1207, 1211, 5, 72, 0, 0, 1208, 1210, 5, 84, 0, 0, 1209,
		1208, 1, 0, 0, 0, 1210, 1213, 1, 0, 0, 0, 1211, 1209, 1, 0, 0, 0, 1211,
		1212, 1, 0, 0, 0, 1212, 1214, 1, 0, 0, 0, 1213, 1211, 1, 0, 0, 0, 1214,
		1215, 5, 9, 0, 0, 1215, 1216, 3, 136, 68, 0, 1216, 1220, 5, 10, 0, 0, 1217,
		1219, 5, 84, 0, 0, 1218, 1217, 1, 0, 0, 0, 1219, 1222, 1, 0, 0, 0, 1220,
		1218, 1, 0, 0, 0, 1220, 1221, 1, 0, 0, 0, 1221, 1232, 1, 0, 0, 0, 1222,
		1220, 1, 0, 0, 0, 1223, 1227, 3, 166, 83, 0, 1224, 1226, 5, 84, 0, 0, 1225,
		1224, 1, 0, 0, 0, 1226, 1229, 1, 0, 0, 0, 1227, 1225, 1, 0, 0, 0, 1227,
		1228, 1, 0, 0, 0, 1228, 1231, 1, 0, 0, 0, 1229, 1227, 1, 0, 0, 0, 1230,
		1223, 1, 0, 0, 0, 1231, 1234, 1, 0, 0, 0, 1232, 1230, 1, 0, 0, 0, 1232,
		1233, 1, 0, 0, 0, 1233, 165, 1, 0, 0, 0, 1234, 1232, 1, 0, 0, 0, 1235,
		1240, 3, 102, 51, 0, 1236, 1240, 3, 104, 52, 0, 1237, 1240, 3, 114, 57,
		0, 1238, 1240, 3, 116, 58, 0, 1239, 1235, 1, 0, 0, 0, 1239, 1236, 1, 0,
		0, 0, 1239, 1237, 1, 0, 0, 0, 1239, 1238, 1, 0, 0, 0, 1240, 167, 1, 0,
		0, 0, 1241, 1245, 5, 73, 0, 0, 1242, 1244, 5, 84, 0, 0, 1243, 1242, 1,
		0, 0, 0, 1244, 1247, 1, 0, 0, 0, 1245, 1243, 1, 0, 0, 0, 1245, 1246, 1,
		0, 0, 0, 1246, 1248, 1, 0, 0, 0, 1247, 1245, 1, 0, 0, 0, 1248, 1249, 5,
		9, 0, 0, 1249, 1250, 3, 136, 68, 0, 1250, 1254, 5, 10, 0, 0, 1251, 1253,
		5, 84, 0, 0, 1252, 1251, 1, 0, 0, 0, 1253, 1256, 1, 0, 0, 0, 1254, 1252,
		1, 0, 0, 0, 1254, 1255, 1, 0, 0, 0, 1255, 1266, 1, 0, 0, 0, 1256, 1254,
		1, 0, 0, 0, 1257, 1261, 3, 170, 85, 0, 1258, 1260, 5, 84, 0, 0, 1259, 1258,
		1, 0, 0, 0, 1260, 1263, 1, 0, 0, 0, 1261, 1259, 1, 0, 0, 0, 1261, 1262,
		1, 0, 0, 0, 1262, 1265, 1, 0, 0, 0, 1263, 1261, 1, 0, 0, 0, 1264, 1257,
		1, 0, 0, 0, 1265, 1268, 1, 0, 0, 0, 1266, 1264, 1, 0, 0, 0, 1266, 1267,
		1, 0, 0, 0, 1267, 169, 1, 0, 0, 0, 1268, 1266, 1, 0, 0, 0, 1269, 1272,
		3, 102, 51, 0, 1270, 1272, 3, 104, 52, 0, 1271, 1269, 1, 0, 0, 0, 1271,
		1270, 1, 0, 0, 0, 1272, 171, 1, 0, 0, 0, 1273, 1277, 5, 74, 0, 0, 1274,
		1276, 5, 84, 0, 0, 1275, 1274, 1, 0, 0, 0, 1276, 1279, 1, 0, 0, 0, 1277,
		1275, 1, 0, 0, 0, 1277, 1278, 1, 0, 0, 0, 1278, 1280, 1, 0, 0, 0, 1279,
		1277, 1, 0, 0, 0, 1280, 1284, 5, 9, 0, 0, 1281, 1283, 5, 84, 0, 0, 1282,
		1281, 1, 0, 0, 0, 1283, 1286, 1, 0, 0, 0, 1284, 1282, 1, 0, 0, 0, 1284,
		1285, 1, 0, 0, 0, 1285, 1287, 1, 0, 0, 0, 1286, 1284, 1, 0, 0, 0, 1287,
		1291, 5, 10, 0, 0, 1288, 1290, 5, 84, 0, 0, 1289, 1288, 1, 0, 0, 0, 1290,
		1293, 1, 0, 0, 0, 1291, 1289, 1, 0, 0, 0, 1291, 1292, 1, 0, 0, 0, 1292,
		1303, 1, 0, 0, 0, 1293, 1291, 1, 0, 0, 0, 1294, 1298, 3, 174, 87, 0, 1295,
		1297, 5, 84, 0, 0, 1296, 1295, 1, 0, 0, 0, 1297, 1300, 1, 0, 0, 0, 1298,
		1296, 1, 0, 0, 0, 1298, 1299, 1, 0, 0, 0, 1299, 1302, 1, 0, 0, 0, 1300,
		1298, 1, 0, 0, 0, 1301, 1294, 1, 0, 0, 0, 1302, 1305, 1, 0, 0, 0, 1303,
		1301, 1, 0, 0, 0, 1303, 1304, 1, 0, 0, 0, 1304, 173, 1, 0, 0, 0, 1305,
		1303, 1, 0, 0, 0, 1306, 1311, 3, 108, 54, 0, 1307, 1311, 3, 112, 56, 0,
		1308, 1311, 3, 102, 51, 0, 1309, 1311, 3, 104, 52, 0, 1310, 1306, 1, 0,
		0, 0, 1310, 1307, 1, 0, 0, 0, 1310, 1308, 1, 0, 0, 0, 1310, 1309, 1, 0,
		0, 0, 1311, 175, 1, 0, 0, 0, 1312, 1313, 3, 178, 89, 0, 1313, 177, 1, 0,
		0, 0, 1314, 1318, 5, 75, 0, 0, 1315, 1317, 5, 84, 0, 0, 1316, 1315, 1,
		0, 0, 0, 1317, 1320, 1, 0, 0, 0, 1318, 1316, 1, 0, 0, 0, 1318, 1319, 1,
		0, 0, 0, 1319, 1358, 1, 0, 0, 0, 1320, 1318, 1, 0, 0, 0, 1321, 1325, 5,
		9, 0, 0, 1322, 1324, 5, 84, 0, 0, 1323, 1322, 1, 0, 0, 0, 1324, 1327, 1,
		0, 0, 0, 1325, 1323, 1, 0, 0, 0, 1325, 1326, 1, 0, 0, 0, 1326, 1328, 1,
		0, 0, 0, 1327, 1325, 1, 0, 0, 0, 1328, 1332, 3, 136, 68, 0, 1329, 1331,
		5, 84, 0, 0, 1330, 1329, 1, 0, 0, 0, 1331, 1334, 1, 0, 0, 0, 1332, 1330,
		1, 0, 0, 0, 1332, 1333, 1, 0, 0, 0, 1333, 1335, 1, 0, 0, 0, 1334, 1332,
		1, 0, 0, 0, 1335, 1339, 5, 10, 0, 0, 1336, 1338, 5, 84, 0, 0, 1337, 1336,
		1, 0, 0, 0, 1338, 1341, 1, 0, 0, 0, 1339, 1337, 1, 0, 0, 0, 1339, 1340,
		1, 0, 0, 0, 1340, 1351, 1, 0, 0, 0, 1341, 1339, 1, 0, 0, 0, 1342, 1346,
		3, 180, 90, 0, 1343, 1345, 5, 84, 0, 0, 1344, 1343, 1, 0, 0, 0, 1345, 1348,
		1, 0, 0, 0, 1346, 1344, 1, 0, 0, 0, 1346, 1347, 1, 0, 0, 0, 1347, 1350,
		1, 0, 0, 0, 1348, 1346, 1, 0, 0, 0, 1349, 1342, 1, 0, 0, 0, 1350, 1353,
		1, 0, 0, 0, 1351, 1349, 1, 0, 0, 0, 1351, 1352, 1, 0, 0, 0, 1352, 1359,
		1, 0, 0, 0, 1353, 1351, 1, 0, 0, 0, 1354, 1355, 5, 9, 0, 0, 1355, 1356,
		3, 120, 60, 0, 1356, 1357, 5, 10, 0, 0, 1357, 1359, 1, 0, 0, 0, 1358, 1321,
		1, 0, 0, 0, 1358, 1354, 1, 0, 0, 0, 1359, 179, 1, 0, 0, 0, 1360, 1361,
		5, 76, 0, 0, 1361, 1362, 5, 9, 0, 0, 1362, 1363, 3, 120, 60, 0, 1363, 1367,
		5, 14, 0, 0, 1364, 1368, 3, 120, 60, 0, 1365, 1368, 3, 178, 89, 0, 1366,
		1368, 3, 118, 59, 0, 1367, 1364, 1, 0, 0, 0, 1367, 1365, 1, 0, 0, 0, 1367,
		1366, 1, 0, 0, 0, 1368, 1369, 1, 0, 0, 0, 1369, 1370, 5, 14, 0, 0, 1370,
		1371, 3, 120, 60, 0, 1371, 1372, 5, 10, 0, 0, 1372, 181, 1, 0, 0, 0, 1373,
		1374, 3, 120, 60, 0, 1374, 183, 1, 0, 0, 0, 1375, 1376, 3, 118, 59, 0,
		1376, 185, 1, 0, 0, 0, 1377, 1378, 7, 3, 0, 0, 1378, 1379, 3, 136, 68,
		0, 1379, 187, 1, 0, 0, 0, 151, 191, 198, 203, 213, 220, 227, 232, 238,
		246, 252, 259, 266, 271, 277, 285, 288, 292, 299, 318, 325, 337, 344, 351,
		356, 363, 372, 379, 386, 391, 398, 412, 420, 425, 431, 438, 457, 466, 473,
		478, 487, 494, 499, 505, 518, 525, 530, 535, 543, 550, 555, 561, 570, 577,
		582, 587, 594, 604, 617, 624, 629, 635, 648, 655, 662, 669, 696, 725, 785,
		795, 802, 809, 814, 820, 836, 843, 850, 857, 862, 871, 878, 885, 890, 896,
		905, 912, 931, 934, 942, 949, 956, 967, 974, 981, 987, 992, 999, 1004,
		1009, 1015, 1022, 1029, 1036, 1043, 1051, 1056, 1063, 1071, 1078, 1087,
		1094, 1101, 1108, 1113, 1121, 1127, 1134, 1141, 1148, 1155, 1160, 1166,
		1172, 1179, 1186, 1193, 1198, 1205, 1211, 1220, 1227, 1232, 1239, 1245,
		1254, 1261, 1266, 1271, 1277, 1284, 1291, 1298, 1303, 1310, 1318, 1325,
		1332, 1339, 1346, 1351, 1358, 1367,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// MinecraftMetascriptParserInit initializes any static state used to implement MinecraftMetascriptParser. By default the
// static state used to implement the parser is lazily initialized during the first call to
// NewMinecraftMetascriptParser(). You can call this function if you wish to initialize the static state ahead
// of time.
func MinecraftMetascriptParserInit() {
	staticData := &MinecraftMetascriptParserStaticData
	staticData.once.Do(minecraftmetascriptParserInit)
}

// NewMinecraftMetascriptParser produces a new parser instance for the optional input antlr.TokenStream.
func NewMinecraftMetascriptParser(input antlr.TokenStream) *MinecraftMetascriptParser {
	MinecraftMetascriptParserInit()
	this := new(MinecraftMetascriptParser)
	this.BaseParser = antlr.NewBaseParser(input)
	staticData := &MinecraftMetascriptParserStaticData
	this.Interpreter = antlr.NewParserATNSimulator(this, staticData.atn, staticData.decisionToDFA, staticData.PredictionContextCache)
	this.RuleNames = staticData.RuleNames
	this.LiteralNames = staticData.LiteralNames
	this.SymbolicNames = staticData.SymbolicNames
	this.GrammarFileName = "MinecraftMetascript.g4"

	return this
}

// MinecraftMetascriptParser tokens.
const (
	MinecraftMetascriptParserEOF                 = antlr.TokenEOF
	MinecraftMetascriptParserT__0                = 1
	MinecraftMetascriptParserT__1                = 2
	MinecraftMetascriptParserT__2                = 3
	MinecraftMetascriptParserT__3                = 4
	MinecraftMetascriptParserT__4                = 5
	MinecraftMetascriptParserT__5                = 6
	MinecraftMetascriptParserT__6                = 7
	MinecraftMetascriptParserT__7                = 8
	MinecraftMetascriptParserT__8                = 9
	MinecraftMetascriptParserT__9                = 10
	MinecraftMetascriptParserT__10               = 11
	MinecraftMetascriptParserT__11               = 12
	MinecraftMetascriptParserT__12               = 13
	MinecraftMetascriptParserT__13               = 14
	MinecraftMetascriptParserT__14               = 15
	MinecraftMetascriptParserT__15               = 16
	MinecraftMetascriptParserT__16               = 17
	MinecraftMetascriptParserT__17               = 18
	MinecraftMetascriptParserT__18               = 19
	MinecraftMetascriptParserT__19               = 20
	MinecraftMetascriptParserT__20               = 21
	MinecraftMetascriptParserT__21               = 22
	MinecraftMetascriptParserT__22               = 23
	MinecraftMetascriptParserT__23               = 24
	MinecraftMetascriptParserT__24               = 25
	MinecraftMetascriptParserT__25               = 26
	MinecraftMetascriptParserT__26               = 27
	MinecraftMetascriptParserT__27               = 28
	MinecraftMetascriptParserT__28               = 29
	MinecraftMetascriptParserT__29               = 30
	MinecraftMetascriptParserT__30               = 31
	MinecraftMetascriptParserT__31               = 32
	MinecraftMetascriptParserT__32               = 33
	MinecraftMetascriptParserT__33               = 34
	MinecraftMetascriptParserT__34               = 35
	MinecraftMetascriptParserT__35               = 36
	MinecraftMetascriptParserT__36               = 37
	MinecraftMetascriptParserT__37               = 38
	MinecraftMetascriptParserT__38               = 39
	MinecraftMetascriptParserT__39               = 40
	MinecraftMetascriptParserT__40               = 41
	MinecraftMetascriptParserT__41               = 42
	MinecraftMetascriptParserT__42               = 43
	MinecraftMetascriptParserT__43               = 44
	MinecraftMetascriptParserT__44               = 45
	MinecraftMetascriptParserT__45               = 46
	MinecraftMetascriptParserT__46               = 47
	MinecraftMetascriptParserT__47               = 48
	MinecraftMetascriptParserT__48               = 49
	MinecraftMetascriptParserT__49               = 50
	MinecraftMetascriptParserT__50               = 51
	MinecraftMetascriptParserT__51               = 52
	MinecraftMetascriptParserT__52               = 53
	MinecraftMetascriptParserT__53               = 54
	MinecraftMetascriptParserT__54               = 55
	MinecraftMetascriptParserT__55               = 56
	MinecraftMetascriptParserT__56               = 57
	MinecraftMetascriptParserT__57               = 58
	MinecraftMetascriptParserT__58               = 59
	MinecraftMetascriptParserT__59               = 60
	MinecraftMetascriptParserT__60               = 61
	MinecraftMetascriptParserT__61               = 62
	MinecraftMetascriptParserT__62               = 63
	MinecraftMetascriptParserT__63               = 64
	MinecraftMetascriptParserT__64               = 65
	MinecraftMetascriptParserT__65               = 66
	MinecraftMetascriptParserT__66               = 67
	MinecraftMetascriptParserT__67               = 68
	MinecraftMetascriptParserT__68               = 69
	MinecraftMetascriptParserT__69               = 70
	MinecraftMetascriptParserT__70               = 71
	MinecraftMetascriptParserT__71               = 72
	MinecraftMetascriptParserT__72               = 73
	MinecraftMetascriptParserT__73               = 74
	MinecraftMetascriptParserT__74               = 75
	MinecraftMetascriptParserT__75               = 76
	MinecraftMetascriptParserT__76               = 77
	MinecraftMetascriptParserT__77               = 78
	MinecraftMetascriptParserStoneDepthMode      = 79
	MinecraftMetascriptParserAxis                = 80
	MinecraftMetascriptParserInt                 = 81
	MinecraftMetascriptParserFloat               = 82
	MinecraftMetascriptParserString_             = 83
	MinecraftMetascriptParserNL                  = 84
	MinecraftMetascriptParserWS                  = 85
	MinecraftMetascriptParserIdentifier          = 86
	MinecraftMetascriptParserBlockComment        = 87
	MinecraftMetascriptParserLineComment         = 88
	MinecraftMetascriptParserDensityFn_CacheKind = 89
)

// MinecraftMetascriptParser rules.
const (
	MinecraftMetascriptParserRULE_script                                                 = 0
	MinecraftMetascriptParserRULE_namespaceDeclaration                                   = 1
	MinecraftMetascriptParserRULE_namespace                                              = 2
	MinecraftMetascriptParserRULE_contentBlocks                                          = 3
	MinecraftMetascriptParserRULE_surfaceBlock                                           = 4
	MinecraftMetascriptParserRULE_surfaceStatement                                       = 5
	MinecraftMetascriptParserRULE_verticalAnchor                                         = 6
	MinecraftMetascriptParserRULE_verticalAnchorDeclaration                              = 7
	MinecraftMetascriptParserRULE_surfaceCondition                                       = 8
	MinecraftMetascriptParserRULE_surfaceConditionDeclaration                            = 9
	MinecraftMetascriptParserRULE_surfaceCondition_Not                                   = 10
	MinecraftMetascriptParserRULE_surfaceCondition_And                                   = 11
	MinecraftMetascriptParserRULE_surfaceCondition_Or                                    = 12
	MinecraftMetascriptParserRULE_surfaceCondition_Reference                             = 13
	MinecraftMetascriptParserRULE_surfaceCondition_AboveSurface                          = 14
	MinecraftMetascriptParserRULE_surfaceCondition_Biome                                 = 15
	MinecraftMetascriptParserRULE_surfaceCondition_Hole                                  = 16
	MinecraftMetascriptParserRULE_surfaceCondition_Steep                                 = 17
	MinecraftMetascriptParserRULE_surfaceCondition_Freezing                              = 18
	MinecraftMetascriptParserRULE_surfaceCondition_NoiseThresholdBuilder                 = 19
	MinecraftMetascriptParserRULE_surfaceCondition_NoiseThreshold                        = 20
	MinecraftMetascriptParserRULE_surfaceCondition_StoneDepth                            = 21
	MinecraftMetascriptParserRULE_surfaceCondition_StoneDepthBuilder                     = 22
	MinecraftMetascriptParserRULE_surfaceCondition_StoneDepthBuilder_SecondaryDepthRange = 23
	MinecraftMetascriptParserRULE_surfaceCondition_VerticalGradient                      = 24
	MinecraftMetascriptParserRULE_surfaceCondition_VerticalGradientBuilder               = 25
	MinecraftMetascriptParserRULE_surfaceCondition_AboveWater                            = 26
	MinecraftMetascriptParserRULE_surfaceCondition_AboveWaterBuilder                     = 27
	MinecraftMetascriptParserRULE_surfaceCondition_YAbove                                = 28
	MinecraftMetascriptParserRULE_surfaceCondition_YAboveBuilder                         = 29
	MinecraftMetascriptParserRULE_surfaceRuleDeclaration                                 = 30
	MinecraftMetascriptParserRULE_surfaceRule                                            = 31
	MinecraftMetascriptParserRULE_surfaceRule_Reference                                  = 32
	MinecraftMetascriptParserRULE_surfaceRule_Block                                      = 33
	MinecraftMetascriptParserRULE_surfaceRule_Sequence                                   = 34
	MinecraftMetascriptParserRULE_surfaceRule_Bandlands                                  = 35
	MinecraftMetascriptParserRULE_surfaceRule_If                                         = 36
	MinecraftMetascriptParserRULE_builder_XZScale                                        = 37
	MinecraftMetascriptParserRULE_builder_YScale                                         = 38
	MinecraftMetascriptParserRULE_builder_XZFactor                                       = 39
	MinecraftMetascriptParserRULE_builder_YFactor                                        = 40
	MinecraftMetascriptParserRULE_builder_Noise                                          = 41
	MinecraftMetascriptParserRULE_builder_Smear                                          = 42
	MinecraftMetascriptParserRULE_builder_Type1                                          = 43
	MinecraftMetascriptParserRULE_builder_Type2                                          = 44
	MinecraftMetascriptParserRULE_builder_Shift                                          = 45
	MinecraftMetascriptParserRULE_builder_Amplitudes                                     = 46
	MinecraftMetascriptParserRULE_builder_Offset                                         = 47
	MinecraftMetascriptParserRULE_builder_Add                                            = 48
	MinecraftMetascriptParserRULE_builder_Mul                                            = 49
	MinecraftMetascriptParserRULE_builder_MulInt                                         = 50
	MinecraftMetascriptParserRULE_builder_Min                                            = 51
	MinecraftMetascriptParserRULE_builder_Max                                            = 52
	MinecraftMetascriptParserRULE_builder_Top                                            = 53
	MinecraftMetascriptParserRULE_builder_TopLiteral                                     = 54
	MinecraftMetascriptParserRULE_builder_Bottom                                         = 55
	MinecraftMetascriptParserRULE_builder_BottomLiteral                                  = 56
	MinecraftMetascriptParserRULE_builder_InRange                                        = 57
	MinecraftMetascriptParserRULE_builder_OutRange                                       = 58
	MinecraftMetascriptParserRULE_resourceReference                                      = 59
	MinecraftMetascriptParserRULE_number                                                 = 60
	MinecraftMetascriptParserRULE_noiseBlock                                             = 61
	MinecraftMetascriptParserRULE_noiseDeclaration                                       = 62
	MinecraftMetascriptParserRULE_noise                                                  = 63
	MinecraftMetascriptParserRULE_noiseDefinition                                        = 64
	MinecraftMetascriptParserRULE_noise_Builder                                          = 65
	MinecraftMetascriptParserRULE_densityFnBlock                                         = 66
	MinecraftMetascriptParserRULE_densityFnDeclaration                                   = 67
	MinecraftMetascriptParserRULE_densityFn                                              = 68
	MinecraftMetascriptParserRULE_densityFn_NoInput                                      = 69
	MinecraftMetascriptParserRULE_densityFn_SingleInput                                  = 70
	MinecraftMetascriptParserRULE_densityFn_InlineNoise                                  = 71
	MinecraftMetascriptParserRULE_densityFn_Noise                                        = 72
	MinecraftMetascriptParserRULE_densityFn_NoiseBuilder                                 = 73
	MinecraftMetascriptParserRULE_densityFn_Cache                                        = 74
	MinecraftMetascriptParserRULE_densityFn_DualInput                                    = 75
	MinecraftMetascriptParserRULE_densityFn_OldBlendedNoise                              = 76
	MinecraftMetascriptParserRULE_densityFn_OldBlendedNoiseBuilder                       = 77
	MinecraftMetascriptParserRULE_densityFn_WierdScaledSampler                           = 78
	MinecraftMetascriptParserRULE_densityFn_WierdScaledSamplerBuilder                    = 79
	MinecraftMetascriptParserRULE_densityFn_ShiftedNoise                                 = 80
	MinecraftMetascriptParserRULE_densityFn_ShiftedNoiseBuilder                          = 81
	MinecraftMetascriptParserRULE_densityFn_RangeChoice                                  = 82
	MinecraftMetascriptParserRULE_densityFn_RangeChoiceBuilder                           = 83
	MinecraftMetascriptParserRULE_densityFn_Clamp                                        = 84
	MinecraftMetascriptParserRULE_densityFn_ClampBuilder                                 = 85
	MinecraftMetascriptParserRULE_densityFn_YClampedGradient                             = 86
	MinecraftMetascriptParserRULE_densityFn_YClampedGradientBuilder                      = 87
	MinecraftMetascriptParserRULE_densityFn_SplineFn                                     = 88
	MinecraftMetascriptParserRULE_densityFn_Spline                                       = 89
	MinecraftMetascriptParserRULE_densityFn_SplinePoint                                  = 90
	MinecraftMetascriptParserRULE_densityFn_Constant                                     = 91
	MinecraftMetascriptParserRULE_densityFn_Reference                                    = 92
	MinecraftMetascriptParserRULE_densityFn_Math                                         = 93
)

// IScriptContext is an interface to support dynamic dispatch.
type IScriptContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode
	AllNamespace() []INamespaceContext
	Namespace(i int) INamespaceContext

	// IsScriptContext differentiates from other interfaces.
	IsScriptContext()
}

type ScriptContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyScriptContext() *ScriptContext {
	var p = new(ScriptContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_script
	return p
}

func InitEmptyScriptContext(p *ScriptContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_script
}

func (*ScriptContext) IsScriptContext() {}

func NewScriptContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ScriptContext {
	var p = new(ScriptContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_script

	return p
}

func (s *ScriptContext) GetParser() antlr.Parser { return s.parser }

func (s *ScriptContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *ScriptContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *ScriptContext) AllNamespace() []INamespaceContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INamespaceContext); ok {
			len++
		}
	}

	tst := make([]INamespaceContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INamespaceContext); ok {
			tst[i] = t.(INamespaceContext)
			i++
		}
	}

	return tst
}

func (s *ScriptContext) Namespace(i int) INamespaceContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INamespaceContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INamespaceContext)
}

func (s *ScriptContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ScriptContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ScriptContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterScript(s)
	}
}

func (s *ScriptContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitScript(s)
	}
}

func (p *MinecraftMetascriptParser) Script() (localctx IScriptContext) {
	localctx = NewScriptContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, MinecraftMetascriptParserRULE_script)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(191)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(188)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(193)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(203)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserT__0 {
		{
			p.SetState(194)
			p.Namespace()
		}
		p.SetState(198)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == MinecraftMetascriptParserNL {
			{
				p.SetState(195)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(200)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}

		p.SetState(205)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INamespaceDeclarationContext is an interface to support dynamic dispatch.
type INamespaceDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() antlr.TerminalNode

	// IsNamespaceDeclarationContext differentiates from other interfaces.
	IsNamespaceDeclarationContext()
}

type NamespaceDeclarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNamespaceDeclarationContext() *NamespaceDeclarationContext {
	var p = new(NamespaceDeclarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_namespaceDeclaration
	return p
}

func InitEmptyNamespaceDeclarationContext(p *NamespaceDeclarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_namespaceDeclaration
}

func (*NamespaceDeclarationContext) IsNamespaceDeclarationContext() {}

func NewNamespaceDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NamespaceDeclarationContext {
	var p = new(NamespaceDeclarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_namespaceDeclaration

	return p
}

func (s *NamespaceDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *NamespaceDeclarationContext) Identifier() antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserIdentifier, 0)
}

func (s *NamespaceDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NamespaceDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NamespaceDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterNamespaceDeclaration(s)
	}
}

func (s *NamespaceDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitNamespaceDeclaration(s)
	}
}

func (p *MinecraftMetascriptParser) NamespaceDeclaration() (localctx INamespaceDeclarationContext) {
	localctx = NewNamespaceDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, MinecraftMetascriptParserRULE_namespaceDeclaration)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(206)
		p.Match(MinecraftMetascriptParserT__0)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(207)
		p.Match(MinecraftMetascriptParserIdentifier)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INamespaceContext is an interface to support dynamic dispatch.
type INamespaceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	NamespaceDeclaration() INamespaceDeclarationContext
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode
	AllContentBlocks() []IContentBlocksContext
	ContentBlocks(i int) IContentBlocksContext

	// IsNamespaceContext differentiates from other interfaces.
	IsNamespaceContext()
}

type NamespaceContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNamespaceContext() *NamespaceContext {
	var p = new(NamespaceContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_namespace
	return p
}

func InitEmptyNamespaceContext(p *NamespaceContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_namespace
}

func (*NamespaceContext) IsNamespaceContext() {}

func NewNamespaceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NamespaceContext {
	var p = new(NamespaceContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_namespace

	return p
}

func (s *NamespaceContext) GetParser() antlr.Parser { return s.parser }

func (s *NamespaceContext) NamespaceDeclaration() INamespaceDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INamespaceDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INamespaceDeclarationContext)
}

func (s *NamespaceContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *NamespaceContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *NamespaceContext) AllContentBlocks() []IContentBlocksContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IContentBlocksContext); ok {
			len++
		}
	}

	tst := make([]IContentBlocksContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IContentBlocksContext); ok {
			tst[i] = t.(IContentBlocksContext)
			i++
		}
	}

	return tst
}

func (s *NamespaceContext) ContentBlocks(i int) IContentBlocksContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IContentBlocksContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IContentBlocksContext)
}

func (s *NamespaceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NamespaceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NamespaceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterNamespace(s)
	}
}

func (s *NamespaceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitNamespace(s)
	}
}

func (p *MinecraftMetascriptParser) Namespace() (localctx INamespaceContext) {
	localctx = NewNamespaceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, MinecraftMetascriptParserRULE_namespace)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(209)
		p.NamespaceDeclaration()
	}
	p.SetState(213)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(210)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(215)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(216)
		p.Match(MinecraftMetascriptParserT__1)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(220)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 4, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(217)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(222)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 4, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(232)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&1688849860263952) != 0 {
		{
			p.SetState(223)
			p.ContentBlocks()
		}
		p.SetState(227)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 5, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(224)
					p.Match(MinecraftMetascriptParserNL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(229)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 5, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}

		p.SetState(234)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(238)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(235)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(240)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(241)
		p.Match(MinecraftMetascriptParserT__2)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IContentBlocksContext is an interface to support dynamic dispatch.
type IContentBlocksContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SurfaceBlock() ISurfaceBlockContext
	NoiseBlock() INoiseBlockContext
	DensityFnBlock() IDensityFnBlockContext

	// IsContentBlocksContext differentiates from other interfaces.
	IsContentBlocksContext()
}

type ContentBlocksContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyContentBlocksContext() *ContentBlocksContext {
	var p = new(ContentBlocksContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_contentBlocks
	return p
}

func InitEmptyContentBlocksContext(p *ContentBlocksContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_contentBlocks
}

func (*ContentBlocksContext) IsContentBlocksContext() {}

func NewContentBlocksContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ContentBlocksContext {
	var p = new(ContentBlocksContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_contentBlocks

	return p
}

func (s *ContentBlocksContext) GetParser() antlr.Parser { return s.parser }

func (s *ContentBlocksContext) SurfaceBlock() ISurfaceBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceBlockContext)
}

func (s *ContentBlocksContext) NoiseBlock() INoiseBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INoiseBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INoiseBlockContext)
}

func (s *ContentBlocksContext) DensityFnBlock() IDensityFnBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFnBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFnBlockContext)
}

func (s *ContentBlocksContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ContentBlocksContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ContentBlocksContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterContentBlocks(s)
	}
}

func (s *ContentBlocksContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitContentBlocks(s)
	}
}

func (p *MinecraftMetascriptParser) ContentBlocks() (localctx IContentBlocksContext) {
	localctx = NewContentBlocksContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, MinecraftMetascriptParserRULE_contentBlocks)
	p.SetState(246)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case MinecraftMetascriptParserT__3:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(243)
			p.SurfaceBlock()
		}

	case MinecraftMetascriptParserT__48:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(244)
			p.NoiseBlock()
		}

	case MinecraftMetascriptParserT__49:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(245)
			p.DensityFnBlock()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISurfaceBlockContext is an interface to support dynamic dispatch.
type ISurfaceBlockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode
	AllSurfaceStatement() []ISurfaceStatementContext
	SurfaceStatement(i int) ISurfaceStatementContext

	// IsSurfaceBlockContext differentiates from other interfaces.
	IsSurfaceBlockContext()
}

type SurfaceBlockContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySurfaceBlockContext() *SurfaceBlockContext {
	var p = new(SurfaceBlockContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceBlock
	return p
}

func InitEmptySurfaceBlockContext(p *SurfaceBlockContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceBlock
}

func (*SurfaceBlockContext) IsSurfaceBlockContext() {}

func NewSurfaceBlockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SurfaceBlockContext {
	var p = new(SurfaceBlockContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceBlock

	return p
}

func (s *SurfaceBlockContext) GetParser() antlr.Parser { return s.parser }

func (s *SurfaceBlockContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *SurfaceBlockContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *SurfaceBlockContext) AllSurfaceStatement() []ISurfaceStatementContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISurfaceStatementContext); ok {
			len++
		}
	}

	tst := make([]ISurfaceStatementContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISurfaceStatementContext); ok {
			tst[i] = t.(ISurfaceStatementContext)
			i++
		}
	}

	return tst
}

func (s *SurfaceBlockContext) SurfaceStatement(i int) ISurfaceStatementContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceStatementContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceStatementContext)
}

func (s *SurfaceBlockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SurfaceBlockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SurfaceBlockContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterSurfaceBlock(s)
	}
}

func (s *SurfaceBlockContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitSurfaceBlock(s)
	}
}

func (p *MinecraftMetascriptParser) SurfaceBlock() (localctx ISurfaceBlockContext) {
	localctx = NewSurfaceBlockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, MinecraftMetascriptParserRULE_surfaceBlock)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(248)
		p.Match(MinecraftMetascriptParserT__3)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(252)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(249)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(254)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(255)
		p.Match(MinecraftMetascriptParserT__1)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(259)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 10, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(256)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(261)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 10, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(271)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserIdentifier {
		{
			p.SetState(262)
			p.SurfaceStatement()
		}
		p.SetState(266)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 11, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(263)
					p.Match(MinecraftMetascriptParserNL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(268)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 11, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}

		p.SetState(273)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(277)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(274)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(279)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(280)
		p.Match(MinecraftMetascriptParserT__2)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISurfaceStatementContext is an interface to support dynamic dispatch.
type ISurfaceStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	VerticalAnchorDeclaration() IVerticalAnchorDeclarationContext
	SurfaceConditionDeclaration() ISurfaceConditionDeclarationContext
	SurfaceRuleDeclaration() ISurfaceRuleDeclarationContext

	// IsSurfaceStatementContext differentiates from other interfaces.
	IsSurfaceStatementContext()
}

type SurfaceStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySurfaceStatementContext() *SurfaceStatementContext {
	var p = new(SurfaceStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceStatement
	return p
}

func InitEmptySurfaceStatementContext(p *SurfaceStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceStatement
}

func (*SurfaceStatementContext) IsSurfaceStatementContext() {}

func NewSurfaceStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SurfaceStatementContext {
	var p = new(SurfaceStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceStatement

	return p
}

func (s *SurfaceStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *SurfaceStatementContext) VerticalAnchorDeclaration() IVerticalAnchorDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVerticalAnchorDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVerticalAnchorDeclarationContext)
}

func (s *SurfaceStatementContext) SurfaceConditionDeclaration() ISurfaceConditionDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceConditionDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceConditionDeclarationContext)
}

func (s *SurfaceStatementContext) SurfaceRuleDeclaration() ISurfaceRuleDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceRuleDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceRuleDeclarationContext)
}

func (s *SurfaceStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SurfaceStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SurfaceStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterSurfaceStatement(s)
	}
}

func (s *SurfaceStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitSurfaceStatement(s)
	}
}

func (p *MinecraftMetascriptParser) SurfaceStatement() (localctx ISurfaceStatementContext) {
	localctx = NewSurfaceStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, MinecraftMetascriptParserRULE_surfaceStatement)
	p.SetState(285)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 14, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(282)
			p.VerticalAnchorDeclaration()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(283)
			p.SurfaceConditionDeclaration()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(284)
			p.SurfaceRuleDeclaration()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IVerticalAnchorContext is an interface to support dynamic dispatch.
type IVerticalAnchorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Int() antlr.TerminalNode
	Identifier() antlr.TerminalNode

	// IsVerticalAnchorContext differentiates from other interfaces.
	IsVerticalAnchorContext()
}

type VerticalAnchorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVerticalAnchorContext() *VerticalAnchorContext {
	var p = new(VerticalAnchorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_verticalAnchor
	return p
}

func InitEmptyVerticalAnchorContext(p *VerticalAnchorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_verticalAnchor
}

func (*VerticalAnchorContext) IsVerticalAnchorContext() {}

func NewVerticalAnchorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VerticalAnchorContext {
	var p = new(VerticalAnchorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_verticalAnchor

	return p
}

func (s *VerticalAnchorContext) GetParser() antlr.Parser { return s.parser }

func (s *VerticalAnchorContext) Int() antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserInt, 0)
}

func (s *VerticalAnchorContext) Identifier() antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserIdentifier, 0)
}

func (s *VerticalAnchorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VerticalAnchorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VerticalAnchorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterVerticalAnchor(s)
	}
}

func (s *VerticalAnchorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitVerticalAnchor(s)
	}
}

func (p *MinecraftMetascriptParser) VerticalAnchor() (localctx IVerticalAnchorContext) {
	localctx = NewVerticalAnchorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, MinecraftMetascriptParserRULE_verticalAnchor)
	var _la int

	p.SetState(292)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case MinecraftMetascriptParserT__4, MinecraftMetascriptParserInt:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(288)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == MinecraftMetascriptParserT__4 {
			{
				p.SetState(287)
				p.Match(MinecraftMetascriptParserT__4)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(290)
			p.Match(MinecraftMetascriptParserInt)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case MinecraftMetascriptParserIdentifier:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(291)
			p.Match(MinecraftMetascriptParserIdentifier)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IVerticalAnchorDeclarationContext is an interface to support dynamic dispatch.
type IVerticalAnchorDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() antlr.TerminalNode
	VerticalAnchor() IVerticalAnchorContext
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode

	// IsVerticalAnchorDeclarationContext differentiates from other interfaces.
	IsVerticalAnchorDeclarationContext()
}

type VerticalAnchorDeclarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVerticalAnchorDeclarationContext() *VerticalAnchorDeclarationContext {
	var p = new(VerticalAnchorDeclarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_verticalAnchorDeclaration
	return p
}

func InitEmptyVerticalAnchorDeclarationContext(p *VerticalAnchorDeclarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_verticalAnchorDeclaration
}

func (*VerticalAnchorDeclarationContext) IsVerticalAnchorDeclarationContext() {}

func NewVerticalAnchorDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VerticalAnchorDeclarationContext {
	var p = new(VerticalAnchorDeclarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_verticalAnchorDeclaration

	return p
}

func (s *VerticalAnchorDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *VerticalAnchorDeclarationContext) Identifier() antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserIdentifier, 0)
}

func (s *VerticalAnchorDeclarationContext) VerticalAnchor() IVerticalAnchorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVerticalAnchorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVerticalAnchorContext)
}

func (s *VerticalAnchorDeclarationContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *VerticalAnchorDeclarationContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *VerticalAnchorDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VerticalAnchorDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VerticalAnchorDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterVerticalAnchorDeclaration(s)
	}
}

func (s *VerticalAnchorDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitVerticalAnchorDeclaration(s)
	}
}

func (p *MinecraftMetascriptParser) VerticalAnchorDeclaration() (localctx IVerticalAnchorDeclarationContext) {
	localctx = NewVerticalAnchorDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, MinecraftMetascriptParserRULE_verticalAnchorDeclaration)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(294)
		p.Match(MinecraftMetascriptParserIdentifier)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(295)
		p.Match(MinecraftMetascriptParserT__5)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(299)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(296)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(301)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(302)
		p.VerticalAnchor()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISurfaceConditionContext is an interface to support dynamic dispatch.
type ISurfaceConditionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SurfaceCondition_Not() ISurfaceCondition_NotContext
	SurfaceCondition_AboveSurface() ISurfaceCondition_AboveSurfaceContext
	SurfaceCondition_Biome() ISurfaceCondition_BiomeContext
	SurfaceCondition_Hole() ISurfaceCondition_HoleContext
	SurfaceCondition_Steep() ISurfaceCondition_SteepContext
	SurfaceCondition_Freezing() ISurfaceCondition_FreezingContext
	SurfaceCondition_NoiseThreshold() ISurfaceCondition_NoiseThresholdContext
	SurfaceCondition_StoneDepth() ISurfaceCondition_StoneDepthContext
	SurfaceCondition_AboveWater() ISurfaceCondition_AboveWaterContext
	SurfaceCondition_YAbove() ISurfaceCondition_YAboveContext
	SurfaceCondition_Reference() ISurfaceCondition_ReferenceContext
	SurfaceCondition_And() ISurfaceCondition_AndContext
	SurfaceCondition_Or() ISurfaceCondition_OrContext
	SurfaceCondition_VerticalGradient() ISurfaceCondition_VerticalGradientContext

	// IsSurfaceConditionContext differentiates from other interfaces.
	IsSurfaceConditionContext()
}

type SurfaceConditionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySurfaceConditionContext() *SurfaceConditionContext {
	var p = new(SurfaceConditionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition
	return p
}

func InitEmptySurfaceConditionContext(p *SurfaceConditionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition
}

func (*SurfaceConditionContext) IsSurfaceConditionContext() {}

func NewSurfaceConditionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SurfaceConditionContext {
	var p = new(SurfaceConditionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition

	return p
}

func (s *SurfaceConditionContext) GetParser() antlr.Parser { return s.parser }

func (s *SurfaceConditionContext) SurfaceCondition_Not() ISurfaceCondition_NotContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceCondition_NotContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceCondition_NotContext)
}

func (s *SurfaceConditionContext) SurfaceCondition_AboveSurface() ISurfaceCondition_AboveSurfaceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceCondition_AboveSurfaceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceCondition_AboveSurfaceContext)
}

func (s *SurfaceConditionContext) SurfaceCondition_Biome() ISurfaceCondition_BiomeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceCondition_BiomeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceCondition_BiomeContext)
}

func (s *SurfaceConditionContext) SurfaceCondition_Hole() ISurfaceCondition_HoleContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceCondition_HoleContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceCondition_HoleContext)
}

func (s *SurfaceConditionContext) SurfaceCondition_Steep() ISurfaceCondition_SteepContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceCondition_SteepContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceCondition_SteepContext)
}

func (s *SurfaceConditionContext) SurfaceCondition_Freezing() ISurfaceCondition_FreezingContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceCondition_FreezingContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceCondition_FreezingContext)
}

func (s *SurfaceConditionContext) SurfaceCondition_NoiseThreshold() ISurfaceCondition_NoiseThresholdContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceCondition_NoiseThresholdContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceCondition_NoiseThresholdContext)
}

func (s *SurfaceConditionContext) SurfaceCondition_StoneDepth() ISurfaceCondition_StoneDepthContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceCondition_StoneDepthContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceCondition_StoneDepthContext)
}

func (s *SurfaceConditionContext) SurfaceCondition_AboveWater() ISurfaceCondition_AboveWaterContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceCondition_AboveWaterContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceCondition_AboveWaterContext)
}

func (s *SurfaceConditionContext) SurfaceCondition_YAbove() ISurfaceCondition_YAboveContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceCondition_YAboveContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceCondition_YAboveContext)
}

func (s *SurfaceConditionContext) SurfaceCondition_Reference() ISurfaceCondition_ReferenceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceCondition_ReferenceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceCondition_ReferenceContext)
}

func (s *SurfaceConditionContext) SurfaceCondition_And() ISurfaceCondition_AndContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceCondition_AndContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceCondition_AndContext)
}

func (s *SurfaceConditionContext) SurfaceCondition_Or() ISurfaceCondition_OrContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceCondition_OrContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceCondition_OrContext)
}

func (s *SurfaceConditionContext) SurfaceCondition_VerticalGradient() ISurfaceCondition_VerticalGradientContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceCondition_VerticalGradientContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceCondition_VerticalGradientContext)
}

func (s *SurfaceConditionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SurfaceConditionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SurfaceConditionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterSurfaceCondition(s)
	}
}

func (s *SurfaceConditionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitSurfaceCondition(s)
	}
}

func (p *MinecraftMetascriptParser) SurfaceCondition() (localctx ISurfaceConditionContext) {
	localctx = NewSurfaceConditionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, MinecraftMetascriptParserRULE_surfaceCondition)
	p.EnterOuterAlt(localctx, 1)
	p.SetState(318)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case MinecraftMetascriptParserT__6:
		{
			p.SetState(304)
			p.SurfaceCondition_Not()
		}

	case MinecraftMetascriptParserT__11:
		{
			p.SetState(305)
			p.SurfaceCondition_AboveSurface()
		}

	case MinecraftMetascriptParserT__12:
		{
			p.SetState(306)
			p.SurfaceCondition_Biome()
		}

	case MinecraftMetascriptParserT__14:
		{
			p.SetState(307)
			p.SurfaceCondition_Hole()
		}

	case MinecraftMetascriptParserT__15:
		{
			p.SetState(308)
			p.SurfaceCondition_Steep()
		}

	case MinecraftMetascriptParserT__16:
		{
			p.SetState(309)
			p.SurfaceCondition_Freezing()
		}

	case MinecraftMetascriptParserT__17:
		{
			p.SetState(310)
			p.SurfaceCondition_NoiseThreshold()
		}

	case MinecraftMetascriptParserT__18:
		{
			p.SetState(311)
			p.SurfaceCondition_StoneDepth()
		}

	case MinecraftMetascriptParserT__21:
		{
			p.SetState(312)
			p.SurfaceCondition_AboveWater()
		}

	case MinecraftMetascriptParserT__22:
		{
			p.SetState(313)
			p.SurfaceCondition_YAbove()
		}

	case MinecraftMetascriptParserIdentifier:
		{
			p.SetState(314)
			p.SurfaceCondition_Reference()
		}

	case MinecraftMetascriptParserT__7:
		{
			p.SetState(315)
			p.SurfaceCondition_And()
		}

	case MinecraftMetascriptParserT__10:
		{
			p.SetState(316)
			p.SurfaceCondition_Or()
		}

	case MinecraftMetascriptParserT__20:
		{
			p.SetState(317)
			p.SurfaceCondition_VerticalGradient()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISurfaceConditionDeclarationContext is an interface to support dynamic dispatch.
type ISurfaceConditionDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() antlr.TerminalNode
	SurfaceCondition() ISurfaceConditionContext
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode

	// IsSurfaceConditionDeclarationContext differentiates from other interfaces.
	IsSurfaceConditionDeclarationContext()
}

type SurfaceConditionDeclarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySurfaceConditionDeclarationContext() *SurfaceConditionDeclarationContext {
	var p = new(SurfaceConditionDeclarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceConditionDeclaration
	return p
}

func InitEmptySurfaceConditionDeclarationContext(p *SurfaceConditionDeclarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceConditionDeclaration
}

func (*SurfaceConditionDeclarationContext) IsSurfaceConditionDeclarationContext() {}

func NewSurfaceConditionDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SurfaceConditionDeclarationContext {
	var p = new(SurfaceConditionDeclarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceConditionDeclaration

	return p
}

func (s *SurfaceConditionDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *SurfaceConditionDeclarationContext) Identifier() antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserIdentifier, 0)
}

func (s *SurfaceConditionDeclarationContext) SurfaceCondition() ISurfaceConditionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceConditionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceConditionContext)
}

func (s *SurfaceConditionDeclarationContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *SurfaceConditionDeclarationContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *SurfaceConditionDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SurfaceConditionDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SurfaceConditionDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterSurfaceConditionDeclaration(s)
	}
}

func (s *SurfaceConditionDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitSurfaceConditionDeclaration(s)
	}
}

func (p *MinecraftMetascriptParser) SurfaceConditionDeclaration() (localctx ISurfaceConditionDeclarationContext) {
	localctx = NewSurfaceConditionDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, MinecraftMetascriptParserRULE_surfaceConditionDeclaration)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(320)
		p.Match(MinecraftMetascriptParserIdentifier)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(321)
		p.Match(MinecraftMetascriptParserT__5)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(325)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(322)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(327)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(328)
		p.SurfaceCondition()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISurfaceCondition_NotContext is an interface to support dynamic dispatch.
type ISurfaceCondition_NotContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SurfaceCondition() ISurfaceConditionContext

	// IsSurfaceCondition_NotContext differentiates from other interfaces.
	IsSurfaceCondition_NotContext()
}

type SurfaceCondition_NotContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySurfaceCondition_NotContext() *SurfaceCondition_NotContext {
	var p = new(SurfaceCondition_NotContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_Not
	return p
}

func InitEmptySurfaceCondition_NotContext(p *SurfaceCondition_NotContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_Not
}

func (*SurfaceCondition_NotContext) IsSurfaceCondition_NotContext() {}

func NewSurfaceCondition_NotContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SurfaceCondition_NotContext {
	var p = new(SurfaceCondition_NotContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_Not

	return p
}

func (s *SurfaceCondition_NotContext) GetParser() antlr.Parser { return s.parser }

func (s *SurfaceCondition_NotContext) SurfaceCondition() ISurfaceConditionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceConditionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceConditionContext)
}

func (s *SurfaceCondition_NotContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SurfaceCondition_NotContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SurfaceCondition_NotContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterSurfaceCondition_Not(s)
	}
}

func (s *SurfaceCondition_NotContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitSurfaceCondition_Not(s)
	}
}

func (p *MinecraftMetascriptParser) SurfaceCondition_Not() (localctx ISurfaceCondition_NotContext) {
	localctx = NewSurfaceCondition_NotContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, MinecraftMetascriptParserRULE_surfaceCondition_Not)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(330)
		p.Match(MinecraftMetascriptParserT__6)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(331)
		p.SurfaceCondition()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISurfaceCondition_AndContext is an interface to support dynamic dispatch.
type ISurfaceCondition_AndContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllSurfaceCondition() []ISurfaceConditionContext
	SurfaceCondition(i int) ISurfaceConditionContext
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode

	// IsSurfaceCondition_AndContext differentiates from other interfaces.
	IsSurfaceCondition_AndContext()
}

type SurfaceCondition_AndContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySurfaceCondition_AndContext() *SurfaceCondition_AndContext {
	var p = new(SurfaceCondition_AndContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_And
	return p
}

func InitEmptySurfaceCondition_AndContext(p *SurfaceCondition_AndContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_And
}

func (*SurfaceCondition_AndContext) IsSurfaceCondition_AndContext() {}

func NewSurfaceCondition_AndContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SurfaceCondition_AndContext {
	var p = new(SurfaceCondition_AndContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_And

	return p
}

func (s *SurfaceCondition_AndContext) GetParser() antlr.Parser { return s.parser }

func (s *SurfaceCondition_AndContext) AllSurfaceCondition() []ISurfaceConditionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISurfaceConditionContext); ok {
			len++
		}
	}

	tst := make([]ISurfaceConditionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISurfaceConditionContext); ok {
			tst[i] = t.(ISurfaceConditionContext)
			i++
		}
	}

	return tst
}

func (s *SurfaceCondition_AndContext) SurfaceCondition(i int) ISurfaceConditionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceConditionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceConditionContext)
}

func (s *SurfaceCondition_AndContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *SurfaceCondition_AndContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *SurfaceCondition_AndContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SurfaceCondition_AndContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SurfaceCondition_AndContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterSurfaceCondition_And(s)
	}
}

func (s *SurfaceCondition_AndContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitSurfaceCondition_And(s)
	}
}

func (p *MinecraftMetascriptParser) SurfaceCondition_And() (localctx ISurfaceCondition_AndContext) {
	localctx = NewSurfaceCondition_AndContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, MinecraftMetascriptParserRULE_surfaceCondition_And)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(333)
		p.Match(MinecraftMetascriptParserT__7)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(337)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(334)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(339)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(340)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(344)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(341)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(346)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(356)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 23, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(347)
				p.SurfaceCondition()
			}
			p.SetState(351)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			for _la == MinecraftMetascriptParserNL {
				{
					p.SetState(348)
					p.Match(MinecraftMetascriptParserNL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

				p.SetState(353)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)
			}

		}
		p.SetState(358)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 23, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	{
		p.SetState(359)
		p.SurfaceCondition()
	}
	p.SetState(363)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(360)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(365)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(366)
		p.Match(MinecraftMetascriptParserT__9)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISurfaceCondition_OrContext is an interface to support dynamic dispatch.
type ISurfaceCondition_OrContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllSurfaceCondition() []ISurfaceConditionContext
	SurfaceCondition(i int) ISurfaceConditionContext
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode

	// IsSurfaceCondition_OrContext differentiates from other interfaces.
	IsSurfaceCondition_OrContext()
}

type SurfaceCondition_OrContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySurfaceCondition_OrContext() *SurfaceCondition_OrContext {
	var p = new(SurfaceCondition_OrContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_Or
	return p
}

func InitEmptySurfaceCondition_OrContext(p *SurfaceCondition_OrContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_Or
}

func (*SurfaceCondition_OrContext) IsSurfaceCondition_OrContext() {}

func NewSurfaceCondition_OrContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SurfaceCondition_OrContext {
	var p = new(SurfaceCondition_OrContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_Or

	return p
}

func (s *SurfaceCondition_OrContext) GetParser() antlr.Parser { return s.parser }

func (s *SurfaceCondition_OrContext) AllSurfaceCondition() []ISurfaceConditionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISurfaceConditionContext); ok {
			len++
		}
	}

	tst := make([]ISurfaceConditionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISurfaceConditionContext); ok {
			tst[i] = t.(ISurfaceConditionContext)
			i++
		}
	}

	return tst
}

func (s *SurfaceCondition_OrContext) SurfaceCondition(i int) ISurfaceConditionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceConditionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceConditionContext)
}

func (s *SurfaceCondition_OrContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *SurfaceCondition_OrContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *SurfaceCondition_OrContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SurfaceCondition_OrContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SurfaceCondition_OrContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterSurfaceCondition_Or(s)
	}
}

func (s *SurfaceCondition_OrContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitSurfaceCondition_Or(s)
	}
}

func (p *MinecraftMetascriptParser) SurfaceCondition_Or() (localctx ISurfaceCondition_OrContext) {
	localctx = NewSurfaceCondition_OrContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, MinecraftMetascriptParserRULE_surfaceCondition_Or)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(368)
		p.Match(MinecraftMetascriptParserT__10)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(372)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(369)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(374)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(375)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(379)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(376)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(381)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(391)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 28, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(382)
				p.SurfaceCondition()
			}
			p.SetState(386)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			for _la == MinecraftMetascriptParserNL {
				{
					p.SetState(383)
					p.Match(MinecraftMetascriptParserNL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

				p.SetState(388)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)
			}

		}
		p.SetState(393)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 28, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	{
		p.SetState(394)
		p.SurfaceCondition()
	}
	p.SetState(398)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(395)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(400)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(401)
		p.Match(MinecraftMetascriptParserT__9)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISurfaceCondition_ReferenceContext is an interface to support dynamic dispatch.
type ISurfaceCondition_ReferenceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ResourceReference() IResourceReferenceContext

	// IsSurfaceCondition_ReferenceContext differentiates from other interfaces.
	IsSurfaceCondition_ReferenceContext()
}

type SurfaceCondition_ReferenceContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySurfaceCondition_ReferenceContext() *SurfaceCondition_ReferenceContext {
	var p = new(SurfaceCondition_ReferenceContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_Reference
	return p
}

func InitEmptySurfaceCondition_ReferenceContext(p *SurfaceCondition_ReferenceContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_Reference
}

func (*SurfaceCondition_ReferenceContext) IsSurfaceCondition_ReferenceContext() {}

func NewSurfaceCondition_ReferenceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SurfaceCondition_ReferenceContext {
	var p = new(SurfaceCondition_ReferenceContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_Reference

	return p
}

func (s *SurfaceCondition_ReferenceContext) GetParser() antlr.Parser { return s.parser }

func (s *SurfaceCondition_ReferenceContext) ResourceReference() IResourceReferenceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IResourceReferenceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IResourceReferenceContext)
}

func (s *SurfaceCondition_ReferenceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SurfaceCondition_ReferenceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SurfaceCondition_ReferenceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterSurfaceCondition_Reference(s)
	}
}

func (s *SurfaceCondition_ReferenceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitSurfaceCondition_Reference(s)
	}
}

func (p *MinecraftMetascriptParser) SurfaceCondition_Reference() (localctx ISurfaceCondition_ReferenceContext) {
	localctx = NewSurfaceCondition_ReferenceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, MinecraftMetascriptParserRULE_surfaceCondition_Reference)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(403)
		p.ResourceReference()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISurfaceCondition_AboveSurfaceContext is an interface to support dynamic dispatch.
type ISurfaceCondition_AboveSurfaceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsSurfaceCondition_AboveSurfaceContext differentiates from other interfaces.
	IsSurfaceCondition_AboveSurfaceContext()
}

type SurfaceCondition_AboveSurfaceContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySurfaceCondition_AboveSurfaceContext() *SurfaceCondition_AboveSurfaceContext {
	var p = new(SurfaceCondition_AboveSurfaceContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_AboveSurface
	return p
}

func InitEmptySurfaceCondition_AboveSurfaceContext(p *SurfaceCondition_AboveSurfaceContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_AboveSurface
}

func (*SurfaceCondition_AboveSurfaceContext) IsSurfaceCondition_AboveSurfaceContext() {}

func NewSurfaceCondition_AboveSurfaceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SurfaceCondition_AboveSurfaceContext {
	var p = new(SurfaceCondition_AboveSurfaceContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_AboveSurface

	return p
}

func (s *SurfaceCondition_AboveSurfaceContext) GetParser() antlr.Parser { return s.parser }
func (s *SurfaceCondition_AboveSurfaceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SurfaceCondition_AboveSurfaceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SurfaceCondition_AboveSurfaceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterSurfaceCondition_AboveSurface(s)
	}
}

func (s *SurfaceCondition_AboveSurfaceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitSurfaceCondition_AboveSurface(s)
	}
}

func (p *MinecraftMetascriptParser) SurfaceCondition_AboveSurface() (localctx ISurfaceCondition_AboveSurfaceContext) {
	localctx = NewSurfaceCondition_AboveSurfaceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, MinecraftMetascriptParserRULE_surfaceCondition_AboveSurface)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(405)
		p.Match(MinecraftMetascriptParserT__11)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISurfaceCondition_BiomeContext is an interface to support dynamic dispatch.
type ISurfaceCondition_BiomeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllResourceReference() []IResourceReferenceContext
	ResourceReference(i int) IResourceReferenceContext
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode

	// IsSurfaceCondition_BiomeContext differentiates from other interfaces.
	IsSurfaceCondition_BiomeContext()
}

type SurfaceCondition_BiomeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySurfaceCondition_BiomeContext() *SurfaceCondition_BiomeContext {
	var p = new(SurfaceCondition_BiomeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_Biome
	return p
}

func InitEmptySurfaceCondition_BiomeContext(p *SurfaceCondition_BiomeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_Biome
}

func (*SurfaceCondition_BiomeContext) IsSurfaceCondition_BiomeContext() {}

func NewSurfaceCondition_BiomeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SurfaceCondition_BiomeContext {
	var p = new(SurfaceCondition_BiomeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_Biome

	return p
}

func (s *SurfaceCondition_BiomeContext) GetParser() antlr.Parser { return s.parser }

func (s *SurfaceCondition_BiomeContext) AllResourceReference() []IResourceReferenceContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IResourceReferenceContext); ok {
			len++
		}
	}

	tst := make([]IResourceReferenceContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IResourceReferenceContext); ok {
			tst[i] = t.(IResourceReferenceContext)
			i++
		}
	}

	return tst
}

func (s *SurfaceCondition_BiomeContext) ResourceReference(i int) IResourceReferenceContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IResourceReferenceContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IResourceReferenceContext)
}

func (s *SurfaceCondition_BiomeContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *SurfaceCondition_BiomeContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *SurfaceCondition_BiomeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SurfaceCondition_BiomeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SurfaceCondition_BiomeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterSurfaceCondition_Biome(s)
	}
}

func (s *SurfaceCondition_BiomeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitSurfaceCondition_Biome(s)
	}
}

func (p *MinecraftMetascriptParser) SurfaceCondition_Biome() (localctx ISurfaceCondition_BiomeContext) {
	localctx = NewSurfaceCondition_BiomeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, MinecraftMetascriptParserRULE_surfaceCondition_Biome)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(407)
		p.Match(MinecraftMetascriptParserT__12)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(408)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(412)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 30, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(409)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(414)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 30, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(425)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 32, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(415)
				p.ResourceReference()
			}
			{
				p.SetState(416)
				p.Match(MinecraftMetascriptParserT__13)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			p.SetState(420)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 31, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(417)
						p.Match(MinecraftMetascriptParserNL)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				}
				p.SetState(422)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 31, p.GetParserRuleContext())
				if p.HasError() {
					goto errorExit
				}
			}

		}
		p.SetState(427)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 32, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(431)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(428)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(433)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(434)
		p.ResourceReference()
	}
	p.SetState(438)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(435)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(440)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(441)
		p.Match(MinecraftMetascriptParserT__9)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISurfaceCondition_HoleContext is an interface to support dynamic dispatch.
type ISurfaceCondition_HoleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsSurfaceCondition_HoleContext differentiates from other interfaces.
	IsSurfaceCondition_HoleContext()
}

type SurfaceCondition_HoleContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySurfaceCondition_HoleContext() *SurfaceCondition_HoleContext {
	var p = new(SurfaceCondition_HoleContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_Hole
	return p
}

func InitEmptySurfaceCondition_HoleContext(p *SurfaceCondition_HoleContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_Hole
}

func (*SurfaceCondition_HoleContext) IsSurfaceCondition_HoleContext() {}

func NewSurfaceCondition_HoleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SurfaceCondition_HoleContext {
	var p = new(SurfaceCondition_HoleContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_Hole

	return p
}

func (s *SurfaceCondition_HoleContext) GetParser() antlr.Parser { return s.parser }
func (s *SurfaceCondition_HoleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SurfaceCondition_HoleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SurfaceCondition_HoleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterSurfaceCondition_Hole(s)
	}
}

func (s *SurfaceCondition_HoleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitSurfaceCondition_Hole(s)
	}
}

func (p *MinecraftMetascriptParser) SurfaceCondition_Hole() (localctx ISurfaceCondition_HoleContext) {
	localctx = NewSurfaceCondition_HoleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, MinecraftMetascriptParserRULE_surfaceCondition_Hole)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(443)
		p.Match(MinecraftMetascriptParserT__14)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(444)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(445)
		p.Match(MinecraftMetascriptParserT__9)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISurfaceCondition_SteepContext is an interface to support dynamic dispatch.
type ISurfaceCondition_SteepContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsSurfaceCondition_SteepContext differentiates from other interfaces.
	IsSurfaceCondition_SteepContext()
}

type SurfaceCondition_SteepContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySurfaceCondition_SteepContext() *SurfaceCondition_SteepContext {
	var p = new(SurfaceCondition_SteepContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_Steep
	return p
}

func InitEmptySurfaceCondition_SteepContext(p *SurfaceCondition_SteepContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_Steep
}

func (*SurfaceCondition_SteepContext) IsSurfaceCondition_SteepContext() {}

func NewSurfaceCondition_SteepContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SurfaceCondition_SteepContext {
	var p = new(SurfaceCondition_SteepContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_Steep

	return p
}

func (s *SurfaceCondition_SteepContext) GetParser() antlr.Parser { return s.parser }
func (s *SurfaceCondition_SteepContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SurfaceCondition_SteepContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SurfaceCondition_SteepContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterSurfaceCondition_Steep(s)
	}
}

func (s *SurfaceCondition_SteepContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitSurfaceCondition_Steep(s)
	}
}

func (p *MinecraftMetascriptParser) SurfaceCondition_Steep() (localctx ISurfaceCondition_SteepContext) {
	localctx = NewSurfaceCondition_SteepContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, MinecraftMetascriptParserRULE_surfaceCondition_Steep)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(447)
		p.Match(MinecraftMetascriptParserT__15)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(448)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(449)
		p.Match(MinecraftMetascriptParserT__9)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISurfaceCondition_FreezingContext is an interface to support dynamic dispatch.
type ISurfaceCondition_FreezingContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsSurfaceCondition_FreezingContext differentiates from other interfaces.
	IsSurfaceCondition_FreezingContext()
}

type SurfaceCondition_FreezingContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySurfaceCondition_FreezingContext() *SurfaceCondition_FreezingContext {
	var p = new(SurfaceCondition_FreezingContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_Freezing
	return p
}

func InitEmptySurfaceCondition_FreezingContext(p *SurfaceCondition_FreezingContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_Freezing
}

func (*SurfaceCondition_FreezingContext) IsSurfaceCondition_FreezingContext() {}

func NewSurfaceCondition_FreezingContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SurfaceCondition_FreezingContext {
	var p = new(SurfaceCondition_FreezingContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_Freezing

	return p
}

func (s *SurfaceCondition_FreezingContext) GetParser() antlr.Parser { return s.parser }
func (s *SurfaceCondition_FreezingContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SurfaceCondition_FreezingContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SurfaceCondition_FreezingContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterSurfaceCondition_Freezing(s)
	}
}

func (s *SurfaceCondition_FreezingContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitSurfaceCondition_Freezing(s)
	}
}

func (p *MinecraftMetascriptParser) SurfaceCondition_Freezing() (localctx ISurfaceCondition_FreezingContext) {
	localctx = NewSurfaceCondition_FreezingContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, MinecraftMetascriptParserRULE_surfaceCondition_Freezing)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(451)
		p.Match(MinecraftMetascriptParserT__16)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(452)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(453)
		p.Match(MinecraftMetascriptParserT__9)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISurfaceCondition_NoiseThresholdBuilderContext is an interface to support dynamic dispatch.
type ISurfaceCondition_NoiseThresholdBuilderContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Builder_Max() IBuilder_MaxContext
	Builder_Min() IBuilder_MinContext

	// IsSurfaceCondition_NoiseThresholdBuilderContext differentiates from other interfaces.
	IsSurfaceCondition_NoiseThresholdBuilderContext()
}

type SurfaceCondition_NoiseThresholdBuilderContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySurfaceCondition_NoiseThresholdBuilderContext() *SurfaceCondition_NoiseThresholdBuilderContext {
	var p = new(SurfaceCondition_NoiseThresholdBuilderContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_NoiseThresholdBuilder
	return p
}

func InitEmptySurfaceCondition_NoiseThresholdBuilderContext(p *SurfaceCondition_NoiseThresholdBuilderContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_NoiseThresholdBuilder
}

func (*SurfaceCondition_NoiseThresholdBuilderContext) IsSurfaceCondition_NoiseThresholdBuilderContext() {
}

func NewSurfaceCondition_NoiseThresholdBuilderContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SurfaceCondition_NoiseThresholdBuilderContext {
	var p = new(SurfaceCondition_NoiseThresholdBuilderContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_NoiseThresholdBuilder

	return p
}

func (s *SurfaceCondition_NoiseThresholdBuilderContext) GetParser() antlr.Parser { return s.parser }

func (s *SurfaceCondition_NoiseThresholdBuilderContext) Builder_Max() IBuilder_MaxContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_MaxContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_MaxContext)
}

func (s *SurfaceCondition_NoiseThresholdBuilderContext) Builder_Min() IBuilder_MinContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_MinContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_MinContext)
}

func (s *SurfaceCondition_NoiseThresholdBuilderContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SurfaceCondition_NoiseThresholdBuilderContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SurfaceCondition_NoiseThresholdBuilderContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterSurfaceCondition_NoiseThresholdBuilder(s)
	}
}

func (s *SurfaceCondition_NoiseThresholdBuilderContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitSurfaceCondition_NoiseThresholdBuilder(s)
	}
}

func (p *MinecraftMetascriptParser) SurfaceCondition_NoiseThresholdBuilder() (localctx ISurfaceCondition_NoiseThresholdBuilderContext) {
	localctx = NewSurfaceCondition_NoiseThresholdBuilderContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, MinecraftMetascriptParserRULE_surfaceCondition_NoiseThresholdBuilder)
	p.SetState(457)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case MinecraftMetascriptParserT__42:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(455)
			p.Builder_Max()
		}

	case MinecraftMetascriptParserT__41:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(456)
			p.Builder_Min()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISurfaceCondition_NoiseThresholdContext is an interface to support dynamic dispatch.
type ISurfaceCondition_NoiseThresholdContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ResourceReference() IResourceReferenceContext
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode
	AllSurfaceCondition_NoiseThresholdBuilder() []ISurfaceCondition_NoiseThresholdBuilderContext
	SurfaceCondition_NoiseThresholdBuilder(i int) ISurfaceCondition_NoiseThresholdBuilderContext

	// IsSurfaceCondition_NoiseThresholdContext differentiates from other interfaces.
	IsSurfaceCondition_NoiseThresholdContext()
}

type SurfaceCondition_NoiseThresholdContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySurfaceCondition_NoiseThresholdContext() *SurfaceCondition_NoiseThresholdContext {
	var p = new(SurfaceCondition_NoiseThresholdContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_NoiseThreshold
	return p
}

func InitEmptySurfaceCondition_NoiseThresholdContext(p *SurfaceCondition_NoiseThresholdContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_NoiseThreshold
}

func (*SurfaceCondition_NoiseThresholdContext) IsSurfaceCondition_NoiseThresholdContext() {}

func NewSurfaceCondition_NoiseThresholdContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SurfaceCondition_NoiseThresholdContext {
	var p = new(SurfaceCondition_NoiseThresholdContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_NoiseThreshold

	return p
}

func (s *SurfaceCondition_NoiseThresholdContext) GetParser() antlr.Parser { return s.parser }

func (s *SurfaceCondition_NoiseThresholdContext) ResourceReference() IResourceReferenceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IResourceReferenceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IResourceReferenceContext)
}

func (s *SurfaceCondition_NoiseThresholdContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *SurfaceCondition_NoiseThresholdContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *SurfaceCondition_NoiseThresholdContext) AllSurfaceCondition_NoiseThresholdBuilder() []ISurfaceCondition_NoiseThresholdBuilderContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISurfaceCondition_NoiseThresholdBuilderContext); ok {
			len++
		}
	}

	tst := make([]ISurfaceCondition_NoiseThresholdBuilderContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISurfaceCondition_NoiseThresholdBuilderContext); ok {
			tst[i] = t.(ISurfaceCondition_NoiseThresholdBuilderContext)
			i++
		}
	}

	return tst
}

func (s *SurfaceCondition_NoiseThresholdContext) SurfaceCondition_NoiseThresholdBuilder(i int) ISurfaceCondition_NoiseThresholdBuilderContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceCondition_NoiseThresholdBuilderContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceCondition_NoiseThresholdBuilderContext)
}

func (s *SurfaceCondition_NoiseThresholdContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SurfaceCondition_NoiseThresholdContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SurfaceCondition_NoiseThresholdContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterSurfaceCondition_NoiseThreshold(s)
	}
}

func (s *SurfaceCondition_NoiseThresholdContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitSurfaceCondition_NoiseThreshold(s)
	}
}

func (p *MinecraftMetascriptParser) SurfaceCondition_NoiseThreshold() (localctx ISurfaceCondition_NoiseThresholdContext) {
	localctx = NewSurfaceCondition_NoiseThresholdContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, MinecraftMetascriptParserRULE_surfaceCondition_NoiseThreshold)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(459)
		p.Match(MinecraftMetascriptParserT__17)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(460)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(461)
		p.ResourceReference()
	}
	{
		p.SetState(462)
		p.Match(MinecraftMetascriptParserT__9)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(466)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 36, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(463)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(468)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 36, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(478)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserT__41 || _la == MinecraftMetascriptParserT__42 {
		{
			p.SetState(469)
			p.SurfaceCondition_NoiseThresholdBuilder()
		}
		p.SetState(473)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 37, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(470)
					p.Match(MinecraftMetascriptParserNL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(475)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 37, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}

		p.SetState(480)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISurfaceCondition_StoneDepthContext is an interface to support dynamic dispatch.
type ISurfaceCondition_StoneDepthContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	StoneDepthMode() antlr.TerminalNode
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode
	AllSurfaceCondition_StoneDepthBuilder() []ISurfaceCondition_StoneDepthBuilderContext
	SurfaceCondition_StoneDepthBuilder(i int) ISurfaceCondition_StoneDepthBuilderContext

	// IsSurfaceCondition_StoneDepthContext differentiates from other interfaces.
	IsSurfaceCondition_StoneDepthContext()
}

type SurfaceCondition_StoneDepthContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySurfaceCondition_StoneDepthContext() *SurfaceCondition_StoneDepthContext {
	var p = new(SurfaceCondition_StoneDepthContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_StoneDepth
	return p
}

func InitEmptySurfaceCondition_StoneDepthContext(p *SurfaceCondition_StoneDepthContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_StoneDepth
}

func (*SurfaceCondition_StoneDepthContext) IsSurfaceCondition_StoneDepthContext() {}

func NewSurfaceCondition_StoneDepthContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SurfaceCondition_StoneDepthContext {
	var p = new(SurfaceCondition_StoneDepthContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_StoneDepth

	return p
}

func (s *SurfaceCondition_StoneDepthContext) GetParser() antlr.Parser { return s.parser }

func (s *SurfaceCondition_StoneDepthContext) StoneDepthMode() antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserStoneDepthMode, 0)
}

func (s *SurfaceCondition_StoneDepthContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *SurfaceCondition_StoneDepthContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *SurfaceCondition_StoneDepthContext) AllSurfaceCondition_StoneDepthBuilder() []ISurfaceCondition_StoneDepthBuilderContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISurfaceCondition_StoneDepthBuilderContext); ok {
			len++
		}
	}

	tst := make([]ISurfaceCondition_StoneDepthBuilderContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISurfaceCondition_StoneDepthBuilderContext); ok {
			tst[i] = t.(ISurfaceCondition_StoneDepthBuilderContext)
			i++
		}
	}

	return tst
}

func (s *SurfaceCondition_StoneDepthContext) SurfaceCondition_StoneDepthBuilder(i int) ISurfaceCondition_StoneDepthBuilderContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceCondition_StoneDepthBuilderContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceCondition_StoneDepthBuilderContext)
}

func (s *SurfaceCondition_StoneDepthContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SurfaceCondition_StoneDepthContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SurfaceCondition_StoneDepthContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterSurfaceCondition_StoneDepth(s)
	}
}

func (s *SurfaceCondition_StoneDepthContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitSurfaceCondition_StoneDepth(s)
	}
}

func (p *MinecraftMetascriptParser) SurfaceCondition_StoneDepth() (localctx ISurfaceCondition_StoneDepthContext) {
	localctx = NewSurfaceCondition_StoneDepthContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, MinecraftMetascriptParserRULE_surfaceCondition_StoneDepth)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(481)
		p.Match(MinecraftMetascriptParserT__18)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(482)
		p.Match(MinecraftMetascriptParserStoneDepthMode)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(483)
		p.Match(MinecraftMetascriptParserT__9)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(487)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 39, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(484)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(489)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 39, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(499)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&1649268490240) != 0 {
		{
			p.SetState(490)
			p.SurfaceCondition_StoneDepthBuilder()
		}
		p.SetState(494)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 40, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(491)
					p.Match(MinecraftMetascriptParserNL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(496)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 40, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}

		p.SetState(501)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISurfaceCondition_StoneDepthBuilderContext is an interface to support dynamic dispatch.
type ISurfaceCondition_StoneDepthBuilderContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Builder_Offset() IBuilder_OffsetContext
	Builder_Add() IBuilder_AddContext
	SurfaceCondition_StoneDepthBuilder_SecondaryDepthRange() ISurfaceCondition_StoneDepthBuilder_SecondaryDepthRangeContext

	// IsSurfaceCondition_StoneDepthBuilderContext differentiates from other interfaces.
	IsSurfaceCondition_StoneDepthBuilderContext()
}

type SurfaceCondition_StoneDepthBuilderContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySurfaceCondition_StoneDepthBuilderContext() *SurfaceCondition_StoneDepthBuilderContext {
	var p = new(SurfaceCondition_StoneDepthBuilderContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_StoneDepthBuilder
	return p
}

func InitEmptySurfaceCondition_StoneDepthBuilderContext(p *SurfaceCondition_StoneDepthBuilderContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_StoneDepthBuilder
}

func (*SurfaceCondition_StoneDepthBuilderContext) IsSurfaceCondition_StoneDepthBuilderContext() {}

func NewSurfaceCondition_StoneDepthBuilderContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SurfaceCondition_StoneDepthBuilderContext {
	var p = new(SurfaceCondition_StoneDepthBuilderContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_StoneDepthBuilder

	return p
}

func (s *SurfaceCondition_StoneDepthBuilderContext) GetParser() antlr.Parser { return s.parser }

func (s *SurfaceCondition_StoneDepthBuilderContext) Builder_Offset() IBuilder_OffsetContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_OffsetContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_OffsetContext)
}

func (s *SurfaceCondition_StoneDepthBuilderContext) Builder_Add() IBuilder_AddContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_AddContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_AddContext)
}

func (s *SurfaceCondition_StoneDepthBuilderContext) SurfaceCondition_StoneDepthBuilder_SecondaryDepthRange() ISurfaceCondition_StoneDepthBuilder_SecondaryDepthRangeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceCondition_StoneDepthBuilder_SecondaryDepthRangeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceCondition_StoneDepthBuilder_SecondaryDepthRangeContext)
}

func (s *SurfaceCondition_StoneDepthBuilderContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SurfaceCondition_StoneDepthBuilderContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SurfaceCondition_StoneDepthBuilderContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterSurfaceCondition_StoneDepthBuilder(s)
	}
}

func (s *SurfaceCondition_StoneDepthBuilderContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitSurfaceCondition_StoneDepthBuilder(s)
	}
}

func (p *MinecraftMetascriptParser) SurfaceCondition_StoneDepthBuilder() (localctx ISurfaceCondition_StoneDepthBuilderContext) {
	localctx = NewSurfaceCondition_StoneDepthBuilderContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, MinecraftMetascriptParserRULE_surfaceCondition_StoneDepthBuilder)
	p.SetState(505)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case MinecraftMetascriptParserT__38:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(502)
			p.Builder_Offset()
		}

	case MinecraftMetascriptParserT__39:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(503)
			p.Builder_Add()
		}

	case MinecraftMetascriptParserT__19:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(504)
			p.SurfaceCondition_StoneDepthBuilder_SecondaryDepthRange()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISurfaceCondition_StoneDepthBuilder_SecondaryDepthRangeContext is an interface to support dynamic dispatch.
type ISurfaceCondition_StoneDepthBuilder_SecondaryDepthRangeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Int() antlr.TerminalNode

	// IsSurfaceCondition_StoneDepthBuilder_SecondaryDepthRangeContext differentiates from other interfaces.
	IsSurfaceCondition_StoneDepthBuilder_SecondaryDepthRangeContext()
}

type SurfaceCondition_StoneDepthBuilder_SecondaryDepthRangeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySurfaceCondition_StoneDepthBuilder_SecondaryDepthRangeContext() *SurfaceCondition_StoneDepthBuilder_SecondaryDepthRangeContext {
	var p = new(SurfaceCondition_StoneDepthBuilder_SecondaryDepthRangeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_StoneDepthBuilder_SecondaryDepthRange
	return p
}

func InitEmptySurfaceCondition_StoneDepthBuilder_SecondaryDepthRangeContext(p *SurfaceCondition_StoneDepthBuilder_SecondaryDepthRangeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_StoneDepthBuilder_SecondaryDepthRange
}

func (*SurfaceCondition_StoneDepthBuilder_SecondaryDepthRangeContext) IsSurfaceCondition_StoneDepthBuilder_SecondaryDepthRangeContext() {
}

func NewSurfaceCondition_StoneDepthBuilder_SecondaryDepthRangeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SurfaceCondition_StoneDepthBuilder_SecondaryDepthRangeContext {
	var p = new(SurfaceCondition_StoneDepthBuilder_SecondaryDepthRangeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_StoneDepthBuilder_SecondaryDepthRange

	return p
}

func (s *SurfaceCondition_StoneDepthBuilder_SecondaryDepthRangeContext) GetParser() antlr.Parser {
	return s.parser
}

func (s *SurfaceCondition_StoneDepthBuilder_SecondaryDepthRangeContext) Int() antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserInt, 0)
}

func (s *SurfaceCondition_StoneDepthBuilder_SecondaryDepthRangeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SurfaceCondition_StoneDepthBuilder_SecondaryDepthRangeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SurfaceCondition_StoneDepthBuilder_SecondaryDepthRangeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterSurfaceCondition_StoneDepthBuilder_SecondaryDepthRange(s)
	}
}

func (s *SurfaceCondition_StoneDepthBuilder_SecondaryDepthRangeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitSurfaceCondition_StoneDepthBuilder_SecondaryDepthRange(s)
	}
}

func (p *MinecraftMetascriptParser) SurfaceCondition_StoneDepthBuilder_SecondaryDepthRange() (localctx ISurfaceCondition_StoneDepthBuilder_SecondaryDepthRangeContext) {
	localctx = NewSurfaceCondition_StoneDepthBuilder_SecondaryDepthRangeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, MinecraftMetascriptParserRULE_surfaceCondition_StoneDepthBuilder_SecondaryDepthRange)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(507)
		p.Match(MinecraftMetascriptParserT__19)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(508)
		p.Match(MinecraftMetascriptParserInt)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(509)
		p.Match(MinecraftMetascriptParserT__9)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISurfaceCondition_VerticalGradientContext is an interface to support dynamic dispatch.
type ISurfaceCondition_VerticalGradientContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	String_() antlr.TerminalNode
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode
	AllSurfaceCondition_VerticalGradientBuilder() []ISurfaceCondition_VerticalGradientBuilderContext
	SurfaceCondition_VerticalGradientBuilder(i int) ISurfaceCondition_VerticalGradientBuilderContext

	// IsSurfaceCondition_VerticalGradientContext differentiates from other interfaces.
	IsSurfaceCondition_VerticalGradientContext()
}

type SurfaceCondition_VerticalGradientContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySurfaceCondition_VerticalGradientContext() *SurfaceCondition_VerticalGradientContext {
	var p = new(SurfaceCondition_VerticalGradientContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_VerticalGradient
	return p
}

func InitEmptySurfaceCondition_VerticalGradientContext(p *SurfaceCondition_VerticalGradientContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_VerticalGradient
}

func (*SurfaceCondition_VerticalGradientContext) IsSurfaceCondition_VerticalGradientContext() {}

func NewSurfaceCondition_VerticalGradientContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SurfaceCondition_VerticalGradientContext {
	var p = new(SurfaceCondition_VerticalGradientContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_VerticalGradient

	return p
}

func (s *SurfaceCondition_VerticalGradientContext) GetParser() antlr.Parser { return s.parser }

func (s *SurfaceCondition_VerticalGradientContext) String_() antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserString_, 0)
}

func (s *SurfaceCondition_VerticalGradientContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *SurfaceCondition_VerticalGradientContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *SurfaceCondition_VerticalGradientContext) AllSurfaceCondition_VerticalGradientBuilder() []ISurfaceCondition_VerticalGradientBuilderContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISurfaceCondition_VerticalGradientBuilderContext); ok {
			len++
		}
	}

	tst := make([]ISurfaceCondition_VerticalGradientBuilderContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISurfaceCondition_VerticalGradientBuilderContext); ok {
			tst[i] = t.(ISurfaceCondition_VerticalGradientBuilderContext)
			i++
		}
	}

	return tst
}

func (s *SurfaceCondition_VerticalGradientContext) SurfaceCondition_VerticalGradientBuilder(i int) ISurfaceCondition_VerticalGradientBuilderContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceCondition_VerticalGradientBuilderContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceCondition_VerticalGradientBuilderContext)
}

func (s *SurfaceCondition_VerticalGradientContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SurfaceCondition_VerticalGradientContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SurfaceCondition_VerticalGradientContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterSurfaceCondition_VerticalGradient(s)
	}
}

func (s *SurfaceCondition_VerticalGradientContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitSurfaceCondition_VerticalGradient(s)
	}
}

func (p *MinecraftMetascriptParser) SurfaceCondition_VerticalGradient() (localctx ISurfaceCondition_VerticalGradientContext) {
	localctx = NewSurfaceCondition_VerticalGradientContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, MinecraftMetascriptParserRULE_surfaceCondition_VerticalGradient)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(511)
		p.Match(MinecraftMetascriptParserT__20)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(512)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(513)
		p.Match(MinecraftMetascriptParserString_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(514)
		p.Match(MinecraftMetascriptParserT__9)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(518)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 43, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(515)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(520)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 43, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(530)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserT__43 || _la == MinecraftMetascriptParserT__44 {
		{
			p.SetState(521)
			p.SurfaceCondition_VerticalGradientBuilder()
		}
		p.SetState(525)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 44, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(522)
					p.Match(MinecraftMetascriptParserNL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(527)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 44, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}

		p.SetState(532)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISurfaceCondition_VerticalGradientBuilderContext is an interface to support dynamic dispatch.
type ISurfaceCondition_VerticalGradientBuilderContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Builder_Top() IBuilder_TopContext
	Builder_Bottom() IBuilder_BottomContext

	// IsSurfaceCondition_VerticalGradientBuilderContext differentiates from other interfaces.
	IsSurfaceCondition_VerticalGradientBuilderContext()
}

type SurfaceCondition_VerticalGradientBuilderContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySurfaceCondition_VerticalGradientBuilderContext() *SurfaceCondition_VerticalGradientBuilderContext {
	var p = new(SurfaceCondition_VerticalGradientBuilderContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_VerticalGradientBuilder
	return p
}

func InitEmptySurfaceCondition_VerticalGradientBuilderContext(p *SurfaceCondition_VerticalGradientBuilderContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_VerticalGradientBuilder
}

func (*SurfaceCondition_VerticalGradientBuilderContext) IsSurfaceCondition_VerticalGradientBuilderContext() {
}

func NewSurfaceCondition_VerticalGradientBuilderContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SurfaceCondition_VerticalGradientBuilderContext {
	var p = new(SurfaceCondition_VerticalGradientBuilderContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_VerticalGradientBuilder

	return p
}

func (s *SurfaceCondition_VerticalGradientBuilderContext) GetParser() antlr.Parser { return s.parser }

func (s *SurfaceCondition_VerticalGradientBuilderContext) Builder_Top() IBuilder_TopContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_TopContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_TopContext)
}

func (s *SurfaceCondition_VerticalGradientBuilderContext) Builder_Bottom() IBuilder_BottomContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_BottomContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_BottomContext)
}

func (s *SurfaceCondition_VerticalGradientBuilderContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SurfaceCondition_VerticalGradientBuilderContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SurfaceCondition_VerticalGradientBuilderContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterSurfaceCondition_VerticalGradientBuilder(s)
	}
}

func (s *SurfaceCondition_VerticalGradientBuilderContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitSurfaceCondition_VerticalGradientBuilder(s)
	}
}

func (p *MinecraftMetascriptParser) SurfaceCondition_VerticalGradientBuilder() (localctx ISurfaceCondition_VerticalGradientBuilderContext) {
	localctx = NewSurfaceCondition_VerticalGradientBuilderContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, MinecraftMetascriptParserRULE_surfaceCondition_VerticalGradientBuilder)
	p.SetState(535)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case MinecraftMetascriptParserT__43:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(533)
			p.Builder_Top()
		}

	case MinecraftMetascriptParserT__44:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(534)
			p.Builder_Bottom()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISurfaceCondition_AboveWaterContext is an interface to support dynamic dispatch.
type ISurfaceCondition_AboveWaterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode
	AllSurfaceCondition_AboveWaterBuilder() []ISurfaceCondition_AboveWaterBuilderContext
	SurfaceCondition_AboveWaterBuilder(i int) ISurfaceCondition_AboveWaterBuilderContext

	// IsSurfaceCondition_AboveWaterContext differentiates from other interfaces.
	IsSurfaceCondition_AboveWaterContext()
}

type SurfaceCondition_AboveWaterContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySurfaceCondition_AboveWaterContext() *SurfaceCondition_AboveWaterContext {
	var p = new(SurfaceCondition_AboveWaterContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_AboveWater
	return p
}

func InitEmptySurfaceCondition_AboveWaterContext(p *SurfaceCondition_AboveWaterContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_AboveWater
}

func (*SurfaceCondition_AboveWaterContext) IsSurfaceCondition_AboveWaterContext() {}

func NewSurfaceCondition_AboveWaterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SurfaceCondition_AboveWaterContext {
	var p = new(SurfaceCondition_AboveWaterContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_AboveWater

	return p
}

func (s *SurfaceCondition_AboveWaterContext) GetParser() antlr.Parser { return s.parser }

func (s *SurfaceCondition_AboveWaterContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *SurfaceCondition_AboveWaterContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *SurfaceCondition_AboveWaterContext) AllSurfaceCondition_AboveWaterBuilder() []ISurfaceCondition_AboveWaterBuilderContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISurfaceCondition_AboveWaterBuilderContext); ok {
			len++
		}
	}

	tst := make([]ISurfaceCondition_AboveWaterBuilderContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISurfaceCondition_AboveWaterBuilderContext); ok {
			tst[i] = t.(ISurfaceCondition_AboveWaterBuilderContext)
			i++
		}
	}

	return tst
}

func (s *SurfaceCondition_AboveWaterContext) SurfaceCondition_AboveWaterBuilder(i int) ISurfaceCondition_AboveWaterBuilderContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceCondition_AboveWaterBuilderContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceCondition_AboveWaterBuilderContext)
}

func (s *SurfaceCondition_AboveWaterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SurfaceCondition_AboveWaterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SurfaceCondition_AboveWaterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterSurfaceCondition_AboveWater(s)
	}
}

func (s *SurfaceCondition_AboveWaterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitSurfaceCondition_AboveWater(s)
	}
}

func (p *MinecraftMetascriptParser) SurfaceCondition_AboveWater() (localctx ISurfaceCondition_AboveWaterContext) {
	localctx = NewSurfaceCondition_AboveWaterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, MinecraftMetascriptParserRULE_surfaceCondition_AboveWater)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(537)
		p.Match(MinecraftMetascriptParserT__21)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(538)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(539)
		p.Match(MinecraftMetascriptParserT__9)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(543)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 47, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(540)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(545)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 47, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(555)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&3848290697216) != 0 {
		{
			p.SetState(546)
			p.SurfaceCondition_AboveWaterBuilder()
		}
		p.SetState(550)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 48, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(547)
					p.Match(MinecraftMetascriptParserNL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(552)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 48, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}

		p.SetState(557)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISurfaceCondition_AboveWaterBuilderContext is an interface to support dynamic dispatch.
type ISurfaceCondition_AboveWaterBuilderContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Builder_Offset() IBuilder_OffsetContext
	Builder_Add() IBuilder_AddContext
	Builder_Mul() IBuilder_MulContext

	// IsSurfaceCondition_AboveWaterBuilderContext differentiates from other interfaces.
	IsSurfaceCondition_AboveWaterBuilderContext()
}

type SurfaceCondition_AboveWaterBuilderContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySurfaceCondition_AboveWaterBuilderContext() *SurfaceCondition_AboveWaterBuilderContext {
	var p = new(SurfaceCondition_AboveWaterBuilderContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_AboveWaterBuilder
	return p
}

func InitEmptySurfaceCondition_AboveWaterBuilderContext(p *SurfaceCondition_AboveWaterBuilderContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_AboveWaterBuilder
}

func (*SurfaceCondition_AboveWaterBuilderContext) IsSurfaceCondition_AboveWaterBuilderContext() {}

func NewSurfaceCondition_AboveWaterBuilderContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SurfaceCondition_AboveWaterBuilderContext {
	var p = new(SurfaceCondition_AboveWaterBuilderContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_AboveWaterBuilder

	return p
}

func (s *SurfaceCondition_AboveWaterBuilderContext) GetParser() antlr.Parser { return s.parser }

func (s *SurfaceCondition_AboveWaterBuilderContext) Builder_Offset() IBuilder_OffsetContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_OffsetContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_OffsetContext)
}

func (s *SurfaceCondition_AboveWaterBuilderContext) Builder_Add() IBuilder_AddContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_AddContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_AddContext)
}

func (s *SurfaceCondition_AboveWaterBuilderContext) Builder_Mul() IBuilder_MulContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_MulContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_MulContext)
}

func (s *SurfaceCondition_AboveWaterBuilderContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SurfaceCondition_AboveWaterBuilderContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SurfaceCondition_AboveWaterBuilderContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterSurfaceCondition_AboveWaterBuilder(s)
	}
}

func (s *SurfaceCondition_AboveWaterBuilderContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitSurfaceCondition_AboveWaterBuilder(s)
	}
}

func (p *MinecraftMetascriptParser) SurfaceCondition_AboveWaterBuilder() (localctx ISurfaceCondition_AboveWaterBuilderContext) {
	localctx = NewSurfaceCondition_AboveWaterBuilderContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, MinecraftMetascriptParserRULE_surfaceCondition_AboveWaterBuilder)
	p.SetState(561)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case MinecraftMetascriptParserT__38:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(558)
			p.Builder_Offset()
		}

	case MinecraftMetascriptParserT__39:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(559)
			p.Builder_Add()
		}

	case MinecraftMetascriptParserT__40:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(560)
			p.Builder_Mul()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISurfaceCondition_YAboveContext is an interface to support dynamic dispatch.
type ISurfaceCondition_YAboveContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	VerticalAnchor() IVerticalAnchorContext
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode
	AllSurfaceCondition_YAboveBuilder() []ISurfaceCondition_YAboveBuilderContext
	SurfaceCondition_YAboveBuilder(i int) ISurfaceCondition_YAboveBuilderContext

	// IsSurfaceCondition_YAboveContext differentiates from other interfaces.
	IsSurfaceCondition_YAboveContext()
}

type SurfaceCondition_YAboveContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySurfaceCondition_YAboveContext() *SurfaceCondition_YAboveContext {
	var p = new(SurfaceCondition_YAboveContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_YAbove
	return p
}

func InitEmptySurfaceCondition_YAboveContext(p *SurfaceCondition_YAboveContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_YAbove
}

func (*SurfaceCondition_YAboveContext) IsSurfaceCondition_YAboveContext() {}

func NewSurfaceCondition_YAboveContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SurfaceCondition_YAboveContext {
	var p = new(SurfaceCondition_YAboveContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_YAbove

	return p
}

func (s *SurfaceCondition_YAboveContext) GetParser() antlr.Parser { return s.parser }

func (s *SurfaceCondition_YAboveContext) VerticalAnchor() IVerticalAnchorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVerticalAnchorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVerticalAnchorContext)
}

func (s *SurfaceCondition_YAboveContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *SurfaceCondition_YAboveContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *SurfaceCondition_YAboveContext) AllSurfaceCondition_YAboveBuilder() []ISurfaceCondition_YAboveBuilderContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISurfaceCondition_YAboveBuilderContext); ok {
			len++
		}
	}

	tst := make([]ISurfaceCondition_YAboveBuilderContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISurfaceCondition_YAboveBuilderContext); ok {
			tst[i] = t.(ISurfaceCondition_YAboveBuilderContext)
			i++
		}
	}

	return tst
}

func (s *SurfaceCondition_YAboveContext) SurfaceCondition_YAboveBuilder(i int) ISurfaceCondition_YAboveBuilderContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceCondition_YAboveBuilderContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceCondition_YAboveBuilderContext)
}

func (s *SurfaceCondition_YAboveContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SurfaceCondition_YAboveContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SurfaceCondition_YAboveContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterSurfaceCondition_YAbove(s)
	}
}

func (s *SurfaceCondition_YAboveContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitSurfaceCondition_YAbove(s)
	}
}

func (p *MinecraftMetascriptParser) SurfaceCondition_YAbove() (localctx ISurfaceCondition_YAboveContext) {
	localctx = NewSurfaceCondition_YAboveContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, MinecraftMetascriptParserRULE_surfaceCondition_YAbove)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(563)
		p.Match(MinecraftMetascriptParserT__22)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(564)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(565)
		p.VerticalAnchor()
	}
	{
		p.SetState(566)
		p.Match(MinecraftMetascriptParserT__9)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(570)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 51, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(567)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(572)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 51, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(582)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserT__39 || _la == MinecraftMetascriptParserT__40 {
		{
			p.SetState(573)
			p.SurfaceCondition_YAboveBuilder()
		}
		p.SetState(577)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 52, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(574)
					p.Match(MinecraftMetascriptParserNL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(579)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 52, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}

		p.SetState(584)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISurfaceCondition_YAboveBuilderContext is an interface to support dynamic dispatch.
type ISurfaceCondition_YAboveBuilderContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Builder_MulInt() IBuilder_MulIntContext
	Builder_Add() IBuilder_AddContext

	// IsSurfaceCondition_YAboveBuilderContext differentiates from other interfaces.
	IsSurfaceCondition_YAboveBuilderContext()
}

type SurfaceCondition_YAboveBuilderContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySurfaceCondition_YAboveBuilderContext() *SurfaceCondition_YAboveBuilderContext {
	var p = new(SurfaceCondition_YAboveBuilderContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_YAboveBuilder
	return p
}

func InitEmptySurfaceCondition_YAboveBuilderContext(p *SurfaceCondition_YAboveBuilderContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_YAboveBuilder
}

func (*SurfaceCondition_YAboveBuilderContext) IsSurfaceCondition_YAboveBuilderContext() {}

func NewSurfaceCondition_YAboveBuilderContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SurfaceCondition_YAboveBuilderContext {
	var p = new(SurfaceCondition_YAboveBuilderContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_YAboveBuilder

	return p
}

func (s *SurfaceCondition_YAboveBuilderContext) GetParser() antlr.Parser { return s.parser }

func (s *SurfaceCondition_YAboveBuilderContext) Builder_MulInt() IBuilder_MulIntContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_MulIntContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_MulIntContext)
}

func (s *SurfaceCondition_YAboveBuilderContext) Builder_Add() IBuilder_AddContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_AddContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_AddContext)
}

func (s *SurfaceCondition_YAboveBuilderContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SurfaceCondition_YAboveBuilderContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SurfaceCondition_YAboveBuilderContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterSurfaceCondition_YAboveBuilder(s)
	}
}

func (s *SurfaceCondition_YAboveBuilderContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitSurfaceCondition_YAboveBuilder(s)
	}
}

func (p *MinecraftMetascriptParser) SurfaceCondition_YAboveBuilder() (localctx ISurfaceCondition_YAboveBuilderContext) {
	localctx = NewSurfaceCondition_YAboveBuilderContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, MinecraftMetascriptParserRULE_surfaceCondition_YAboveBuilder)
	p.SetState(587)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case MinecraftMetascriptParserT__40:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(585)
			p.Builder_MulInt()
		}

	case MinecraftMetascriptParserT__39:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(586)
			p.Builder_Add()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISurfaceRuleDeclarationContext is an interface to support dynamic dispatch.
type ISurfaceRuleDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() antlr.TerminalNode
	SurfaceRule() ISurfaceRuleContext
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode

	// IsSurfaceRuleDeclarationContext differentiates from other interfaces.
	IsSurfaceRuleDeclarationContext()
}

type SurfaceRuleDeclarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySurfaceRuleDeclarationContext() *SurfaceRuleDeclarationContext {
	var p = new(SurfaceRuleDeclarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceRuleDeclaration
	return p
}

func InitEmptySurfaceRuleDeclarationContext(p *SurfaceRuleDeclarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceRuleDeclaration
}

func (*SurfaceRuleDeclarationContext) IsSurfaceRuleDeclarationContext() {}

func NewSurfaceRuleDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SurfaceRuleDeclarationContext {
	var p = new(SurfaceRuleDeclarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceRuleDeclaration

	return p
}

func (s *SurfaceRuleDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *SurfaceRuleDeclarationContext) Identifier() antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserIdentifier, 0)
}

func (s *SurfaceRuleDeclarationContext) SurfaceRule() ISurfaceRuleContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceRuleContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceRuleContext)
}

func (s *SurfaceRuleDeclarationContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *SurfaceRuleDeclarationContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *SurfaceRuleDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SurfaceRuleDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SurfaceRuleDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterSurfaceRuleDeclaration(s)
	}
}

func (s *SurfaceRuleDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitSurfaceRuleDeclaration(s)
	}
}

func (p *MinecraftMetascriptParser) SurfaceRuleDeclaration() (localctx ISurfaceRuleDeclarationContext) {
	localctx = NewSurfaceRuleDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, MinecraftMetascriptParserRULE_surfaceRuleDeclaration)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(589)
		p.Match(MinecraftMetascriptParserIdentifier)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(590)
		p.Match(MinecraftMetascriptParserT__5)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(594)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(591)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(596)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(597)
		p.SurfaceRule()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISurfaceRuleContext is an interface to support dynamic dispatch.
type ISurfaceRuleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SurfaceRule_Block() ISurfaceRule_BlockContext
	SurfaceRule_Sequence() ISurfaceRule_SequenceContext
	SurfaceRule_Reference() ISurfaceRule_ReferenceContext
	SurfaceRule_If() ISurfaceRule_IfContext
	SurfaceRule_Bandlands() ISurfaceRule_BandlandsContext

	// IsSurfaceRuleContext differentiates from other interfaces.
	IsSurfaceRuleContext()
}

type SurfaceRuleContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySurfaceRuleContext() *SurfaceRuleContext {
	var p = new(SurfaceRuleContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceRule
	return p
}

func InitEmptySurfaceRuleContext(p *SurfaceRuleContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceRule
}

func (*SurfaceRuleContext) IsSurfaceRuleContext() {}

func NewSurfaceRuleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SurfaceRuleContext {
	var p = new(SurfaceRuleContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceRule

	return p
}

func (s *SurfaceRuleContext) GetParser() antlr.Parser { return s.parser }

func (s *SurfaceRuleContext) SurfaceRule_Block() ISurfaceRule_BlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceRule_BlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceRule_BlockContext)
}

func (s *SurfaceRuleContext) SurfaceRule_Sequence() ISurfaceRule_SequenceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceRule_SequenceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceRule_SequenceContext)
}

func (s *SurfaceRuleContext) SurfaceRule_Reference() ISurfaceRule_ReferenceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceRule_ReferenceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceRule_ReferenceContext)
}

func (s *SurfaceRuleContext) SurfaceRule_If() ISurfaceRule_IfContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceRule_IfContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceRule_IfContext)
}

func (s *SurfaceRuleContext) SurfaceRule_Bandlands() ISurfaceRule_BandlandsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceRule_BandlandsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceRule_BandlandsContext)
}

func (s *SurfaceRuleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SurfaceRuleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SurfaceRuleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterSurfaceRule(s)
	}
}

func (s *SurfaceRuleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitSurfaceRule(s)
	}
}

func (p *MinecraftMetascriptParser) SurfaceRule() (localctx ISurfaceRuleContext) {
	localctx = NewSurfaceRuleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, MinecraftMetascriptParserRULE_surfaceRule)
	p.SetState(604)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case MinecraftMetascriptParserT__23:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(599)
			p.SurfaceRule_Block()
		}

	case MinecraftMetascriptParserT__24:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(600)
			p.SurfaceRule_Sequence()
		}

	case MinecraftMetascriptParserIdentifier:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(601)
			p.SurfaceRule_Reference()
		}

	case MinecraftMetascriptParserT__27:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(602)
			p.SurfaceRule_If()
		}

	case MinecraftMetascriptParserT__26:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(603)
			p.SurfaceRule_Bandlands()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISurfaceRule_ReferenceContext is an interface to support dynamic dispatch.
type ISurfaceRule_ReferenceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ResourceReference() IResourceReferenceContext

	// IsSurfaceRule_ReferenceContext differentiates from other interfaces.
	IsSurfaceRule_ReferenceContext()
}

type SurfaceRule_ReferenceContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySurfaceRule_ReferenceContext() *SurfaceRule_ReferenceContext {
	var p = new(SurfaceRule_ReferenceContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceRule_Reference
	return p
}

func InitEmptySurfaceRule_ReferenceContext(p *SurfaceRule_ReferenceContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceRule_Reference
}

func (*SurfaceRule_ReferenceContext) IsSurfaceRule_ReferenceContext() {}

func NewSurfaceRule_ReferenceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SurfaceRule_ReferenceContext {
	var p = new(SurfaceRule_ReferenceContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceRule_Reference

	return p
}

func (s *SurfaceRule_ReferenceContext) GetParser() antlr.Parser { return s.parser }

func (s *SurfaceRule_ReferenceContext) ResourceReference() IResourceReferenceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IResourceReferenceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IResourceReferenceContext)
}

func (s *SurfaceRule_ReferenceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SurfaceRule_ReferenceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SurfaceRule_ReferenceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterSurfaceRule_Reference(s)
	}
}

func (s *SurfaceRule_ReferenceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitSurfaceRule_Reference(s)
	}
}

func (p *MinecraftMetascriptParser) SurfaceRule_Reference() (localctx ISurfaceRule_ReferenceContext) {
	localctx = NewSurfaceRule_ReferenceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, MinecraftMetascriptParserRULE_surfaceRule_Reference)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(606)
		p.ResourceReference()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISurfaceRule_BlockContext is an interface to support dynamic dispatch.
type ISurfaceRule_BlockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ResourceReference() IResourceReferenceContext

	// IsSurfaceRule_BlockContext differentiates from other interfaces.
	IsSurfaceRule_BlockContext()
}

type SurfaceRule_BlockContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySurfaceRule_BlockContext() *SurfaceRule_BlockContext {
	var p = new(SurfaceRule_BlockContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceRule_Block
	return p
}

func InitEmptySurfaceRule_BlockContext(p *SurfaceRule_BlockContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceRule_Block
}

func (*SurfaceRule_BlockContext) IsSurfaceRule_BlockContext() {}

func NewSurfaceRule_BlockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SurfaceRule_BlockContext {
	var p = new(SurfaceRule_BlockContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceRule_Block

	return p
}

func (s *SurfaceRule_BlockContext) GetParser() antlr.Parser { return s.parser }

func (s *SurfaceRule_BlockContext) ResourceReference() IResourceReferenceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IResourceReferenceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IResourceReferenceContext)
}

func (s *SurfaceRule_BlockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SurfaceRule_BlockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SurfaceRule_BlockContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterSurfaceRule_Block(s)
	}
}

func (s *SurfaceRule_BlockContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitSurfaceRule_Block(s)
	}
}

func (p *MinecraftMetascriptParser) SurfaceRule_Block() (localctx ISurfaceRule_BlockContext) {
	localctx = NewSurfaceRule_BlockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, MinecraftMetascriptParserRULE_surfaceRule_Block)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(608)
		p.Match(MinecraftMetascriptParserT__23)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(609)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(610)
		p.ResourceReference()
	}
	{
		p.SetState(611)
		p.Match(MinecraftMetascriptParserT__9)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISurfaceRule_SequenceContext is an interface to support dynamic dispatch.
type ISurfaceRule_SequenceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode
	AllSurfaceRule() []ISurfaceRuleContext
	SurfaceRule(i int) ISurfaceRuleContext

	// IsSurfaceRule_SequenceContext differentiates from other interfaces.
	IsSurfaceRule_SequenceContext()
}

type SurfaceRule_SequenceContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySurfaceRule_SequenceContext() *SurfaceRule_SequenceContext {
	var p = new(SurfaceRule_SequenceContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceRule_Sequence
	return p
}

func InitEmptySurfaceRule_SequenceContext(p *SurfaceRule_SequenceContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceRule_Sequence
}

func (*SurfaceRule_SequenceContext) IsSurfaceRule_SequenceContext() {}

func NewSurfaceRule_SequenceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SurfaceRule_SequenceContext {
	var p = new(SurfaceRule_SequenceContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceRule_Sequence

	return p
}

func (s *SurfaceRule_SequenceContext) GetParser() antlr.Parser { return s.parser }

func (s *SurfaceRule_SequenceContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *SurfaceRule_SequenceContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *SurfaceRule_SequenceContext) AllSurfaceRule() []ISurfaceRuleContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISurfaceRuleContext); ok {
			len++
		}
	}

	tst := make([]ISurfaceRuleContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISurfaceRuleContext); ok {
			tst[i] = t.(ISurfaceRuleContext)
			i++
		}
	}

	return tst
}

func (s *SurfaceRule_SequenceContext) SurfaceRule(i int) ISurfaceRuleContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceRuleContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceRuleContext)
}

func (s *SurfaceRule_SequenceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SurfaceRule_SequenceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SurfaceRule_SequenceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterSurfaceRule_Sequence(s)
	}
}

func (s *SurfaceRule_SequenceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitSurfaceRule_Sequence(s)
	}
}

func (p *MinecraftMetascriptParser) SurfaceRule_Sequence() (localctx ISurfaceRule_SequenceContext) {
	localctx = NewSurfaceRule_SequenceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, MinecraftMetascriptParserRULE_surfaceRule_Sequence)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(613)
		p.Match(MinecraftMetascriptParserT__24)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(617)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 57, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(614)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(619)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 57, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(629)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for (int64((_la-24)) & ^0x3f) == 0 && ((int64(1)<<(_la-24))&4611686018427387931) != 0 {
		{
			p.SetState(620)
			p.SurfaceRule()
		}
		p.SetState(624)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 58, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(621)
					p.Match(MinecraftMetascriptParserNL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(626)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 58, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}

		p.SetState(631)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(635)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(632)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(637)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(638)
		p.Match(MinecraftMetascriptParserT__25)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISurfaceRule_BandlandsContext is an interface to support dynamic dispatch.
type ISurfaceRule_BandlandsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsSurfaceRule_BandlandsContext differentiates from other interfaces.
	IsSurfaceRule_BandlandsContext()
}

type SurfaceRule_BandlandsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySurfaceRule_BandlandsContext() *SurfaceRule_BandlandsContext {
	var p = new(SurfaceRule_BandlandsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceRule_Bandlands
	return p
}

func InitEmptySurfaceRule_BandlandsContext(p *SurfaceRule_BandlandsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceRule_Bandlands
}

func (*SurfaceRule_BandlandsContext) IsSurfaceRule_BandlandsContext() {}

func NewSurfaceRule_BandlandsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SurfaceRule_BandlandsContext {
	var p = new(SurfaceRule_BandlandsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceRule_Bandlands

	return p
}

func (s *SurfaceRule_BandlandsContext) GetParser() antlr.Parser { return s.parser }
func (s *SurfaceRule_BandlandsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SurfaceRule_BandlandsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SurfaceRule_BandlandsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterSurfaceRule_Bandlands(s)
	}
}

func (s *SurfaceRule_BandlandsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitSurfaceRule_Bandlands(s)
	}
}

func (p *MinecraftMetascriptParser) SurfaceRule_Bandlands() (localctx ISurfaceRule_BandlandsContext) {
	localctx = NewSurfaceRule_BandlandsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, MinecraftMetascriptParserRULE_surfaceRule_Bandlands)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(640)
		p.Match(MinecraftMetascriptParserT__26)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(641)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(642)
		p.Match(MinecraftMetascriptParserT__9)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISurfaceRule_IfContext is an interface to support dynamic dispatch.
type ISurfaceRule_IfContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SurfaceCondition() ISurfaceConditionContext
	SurfaceRule() ISurfaceRuleContext
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode

	// IsSurfaceRule_IfContext differentiates from other interfaces.
	IsSurfaceRule_IfContext()
}

type SurfaceRule_IfContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySurfaceRule_IfContext() *SurfaceRule_IfContext {
	var p = new(SurfaceRule_IfContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceRule_If
	return p
}

func InitEmptySurfaceRule_IfContext(p *SurfaceRule_IfContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceRule_If
}

func (*SurfaceRule_IfContext) IsSurfaceRule_IfContext() {}

func NewSurfaceRule_IfContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SurfaceRule_IfContext {
	var p = new(SurfaceRule_IfContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceRule_If

	return p
}

func (s *SurfaceRule_IfContext) GetParser() antlr.Parser { return s.parser }

func (s *SurfaceRule_IfContext) SurfaceCondition() ISurfaceConditionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceConditionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceConditionContext)
}

func (s *SurfaceRule_IfContext) SurfaceRule() ISurfaceRuleContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceRuleContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceRuleContext)
}

func (s *SurfaceRule_IfContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *SurfaceRule_IfContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *SurfaceRule_IfContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SurfaceRule_IfContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SurfaceRule_IfContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterSurfaceRule_If(s)
	}
}

func (s *SurfaceRule_IfContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitSurfaceRule_If(s)
	}
}

func (p *MinecraftMetascriptParser) SurfaceRule_If() (localctx ISurfaceRule_IfContext) {
	localctx = NewSurfaceRule_IfContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, MinecraftMetascriptParserRULE_surfaceRule_If)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(644)
		p.Match(MinecraftMetascriptParserT__27)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(648)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(645)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(650)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(651)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(655)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(652)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(657)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(658)
		p.SurfaceCondition()
	}
	p.SetState(662)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(659)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(664)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(665)
		p.Match(MinecraftMetascriptParserT__9)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(669)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(666)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(671)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(672)
		p.SurfaceRule()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBuilder_XZScaleContext is an interface to support dynamic dispatch.
type IBuilder_XZScaleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Number() INumberContext

	// IsBuilder_XZScaleContext differentiates from other interfaces.
	IsBuilder_XZScaleContext()
}

type Builder_XZScaleContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBuilder_XZScaleContext() *Builder_XZScaleContext {
	var p = new(Builder_XZScaleContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_XZScale
	return p
}

func InitEmptyBuilder_XZScaleContext(p *Builder_XZScaleContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_XZScale
}

func (*Builder_XZScaleContext) IsBuilder_XZScaleContext() {}

func NewBuilder_XZScaleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Builder_XZScaleContext {
	var p = new(Builder_XZScaleContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_XZScale

	return p
}

func (s *Builder_XZScaleContext) GetParser() antlr.Parser { return s.parser }

func (s *Builder_XZScaleContext) Number() INumberContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumberContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumberContext)
}

func (s *Builder_XZScaleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Builder_XZScaleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Builder_XZScaleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterBuilder_XZScale(s)
	}
}

func (s *Builder_XZScaleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitBuilder_XZScale(s)
	}
}

func (p *MinecraftMetascriptParser) Builder_XZScale() (localctx IBuilder_XZScaleContext) {
	localctx = NewBuilder_XZScaleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, MinecraftMetascriptParserRULE_builder_XZScale)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(674)
		p.Match(MinecraftMetascriptParserT__28)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(675)
		p.Number()
	}
	{
		p.SetState(676)
		p.Match(MinecraftMetascriptParserT__9)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBuilder_YScaleContext is an interface to support dynamic dispatch.
type IBuilder_YScaleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Number() INumberContext

	// IsBuilder_YScaleContext differentiates from other interfaces.
	IsBuilder_YScaleContext()
}

type Builder_YScaleContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBuilder_YScaleContext() *Builder_YScaleContext {
	var p = new(Builder_YScaleContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_YScale
	return p
}

func InitEmptyBuilder_YScaleContext(p *Builder_YScaleContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_YScale
}

func (*Builder_YScaleContext) IsBuilder_YScaleContext() {}

func NewBuilder_YScaleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Builder_YScaleContext {
	var p = new(Builder_YScaleContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_YScale

	return p
}

func (s *Builder_YScaleContext) GetParser() antlr.Parser { return s.parser }

func (s *Builder_YScaleContext) Number() INumberContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumberContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumberContext)
}

func (s *Builder_YScaleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Builder_YScaleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Builder_YScaleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterBuilder_YScale(s)
	}
}

func (s *Builder_YScaleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitBuilder_YScale(s)
	}
}

func (p *MinecraftMetascriptParser) Builder_YScale() (localctx IBuilder_YScaleContext) {
	localctx = NewBuilder_YScaleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, MinecraftMetascriptParserRULE_builder_YScale)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(678)
		p.Match(MinecraftMetascriptParserT__29)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(679)
		p.Number()
	}
	{
		p.SetState(680)
		p.Match(MinecraftMetascriptParserT__9)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBuilder_XZFactorContext is an interface to support dynamic dispatch.
type IBuilder_XZFactorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Number() INumberContext

	// IsBuilder_XZFactorContext differentiates from other interfaces.
	IsBuilder_XZFactorContext()
}

type Builder_XZFactorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBuilder_XZFactorContext() *Builder_XZFactorContext {
	var p = new(Builder_XZFactorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_XZFactor
	return p
}

func InitEmptyBuilder_XZFactorContext(p *Builder_XZFactorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_XZFactor
}

func (*Builder_XZFactorContext) IsBuilder_XZFactorContext() {}

func NewBuilder_XZFactorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Builder_XZFactorContext {
	var p = new(Builder_XZFactorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_XZFactor

	return p
}

func (s *Builder_XZFactorContext) GetParser() antlr.Parser { return s.parser }

func (s *Builder_XZFactorContext) Number() INumberContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumberContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumberContext)
}

func (s *Builder_XZFactorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Builder_XZFactorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Builder_XZFactorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterBuilder_XZFactor(s)
	}
}

func (s *Builder_XZFactorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitBuilder_XZFactor(s)
	}
}

func (p *MinecraftMetascriptParser) Builder_XZFactor() (localctx IBuilder_XZFactorContext) {
	localctx = NewBuilder_XZFactorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, MinecraftMetascriptParserRULE_builder_XZFactor)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(682)
		p.Match(MinecraftMetascriptParserT__30)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(683)
		p.Number()
	}
	{
		p.SetState(684)
		p.Match(MinecraftMetascriptParserT__9)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBuilder_YFactorContext is an interface to support dynamic dispatch.
type IBuilder_YFactorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Number() INumberContext

	// IsBuilder_YFactorContext differentiates from other interfaces.
	IsBuilder_YFactorContext()
}

type Builder_YFactorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBuilder_YFactorContext() *Builder_YFactorContext {
	var p = new(Builder_YFactorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_YFactor
	return p
}

func InitEmptyBuilder_YFactorContext(p *Builder_YFactorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_YFactor
}

func (*Builder_YFactorContext) IsBuilder_YFactorContext() {}

func NewBuilder_YFactorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Builder_YFactorContext {
	var p = new(Builder_YFactorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_YFactor

	return p
}

func (s *Builder_YFactorContext) GetParser() antlr.Parser { return s.parser }

func (s *Builder_YFactorContext) Number() INumberContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumberContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumberContext)
}

func (s *Builder_YFactorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Builder_YFactorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Builder_YFactorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterBuilder_YFactor(s)
	}
}

func (s *Builder_YFactorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitBuilder_YFactor(s)
	}
}

func (p *MinecraftMetascriptParser) Builder_YFactor() (localctx IBuilder_YFactorContext) {
	localctx = NewBuilder_YFactorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, MinecraftMetascriptParserRULE_builder_YFactor)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(686)
		p.Match(MinecraftMetascriptParserT__31)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(687)
		p.Number()
	}
	{
		p.SetState(688)
		p.Match(MinecraftMetascriptParserT__9)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBuilder_NoiseContext is an interface to support dynamic dispatch.
type IBuilder_NoiseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	NoiseDefinition() INoiseDefinitionContext
	ResourceReference() IResourceReferenceContext

	// IsBuilder_NoiseContext differentiates from other interfaces.
	IsBuilder_NoiseContext()
}

type Builder_NoiseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBuilder_NoiseContext() *Builder_NoiseContext {
	var p = new(Builder_NoiseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Noise
	return p
}

func InitEmptyBuilder_NoiseContext(p *Builder_NoiseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Noise
}

func (*Builder_NoiseContext) IsBuilder_NoiseContext() {}

func NewBuilder_NoiseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Builder_NoiseContext {
	var p = new(Builder_NoiseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Noise

	return p
}

func (s *Builder_NoiseContext) GetParser() antlr.Parser { return s.parser }

func (s *Builder_NoiseContext) NoiseDefinition() INoiseDefinitionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INoiseDefinitionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INoiseDefinitionContext)
}

func (s *Builder_NoiseContext) ResourceReference() IResourceReferenceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IResourceReferenceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IResourceReferenceContext)
}

func (s *Builder_NoiseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Builder_NoiseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Builder_NoiseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterBuilder_Noise(s)
	}
}

func (s *Builder_NoiseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitBuilder_Noise(s)
	}
}

func (p *MinecraftMetascriptParser) Builder_Noise() (localctx IBuilder_NoiseContext) {
	localctx = NewBuilder_NoiseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, MinecraftMetascriptParserRULE_builder_Noise)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(690)
		p.Match(MinecraftMetascriptParserT__32)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(696)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 65, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(691)
			p.NoiseDefinition()
		}

	case 2:
		{
			p.SetState(692)
			p.Match(MinecraftMetascriptParserT__8)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(693)
			p.ResourceReference()
		}
		{
			p.SetState(694)
			p.Match(MinecraftMetascriptParserT__9)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBuilder_SmearContext is an interface to support dynamic dispatch.
type IBuilder_SmearContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Number() INumberContext

	// IsBuilder_SmearContext differentiates from other interfaces.
	IsBuilder_SmearContext()
}

type Builder_SmearContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBuilder_SmearContext() *Builder_SmearContext {
	var p = new(Builder_SmearContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Smear
	return p
}

func InitEmptyBuilder_SmearContext(p *Builder_SmearContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Smear
}

func (*Builder_SmearContext) IsBuilder_SmearContext() {}

func NewBuilder_SmearContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Builder_SmearContext {
	var p = new(Builder_SmearContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Smear

	return p
}

func (s *Builder_SmearContext) GetParser() antlr.Parser { return s.parser }

func (s *Builder_SmearContext) Number() INumberContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumberContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumberContext)
}

func (s *Builder_SmearContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Builder_SmearContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Builder_SmearContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterBuilder_Smear(s)
	}
}

func (s *Builder_SmearContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitBuilder_Smear(s)
	}
}

func (p *MinecraftMetascriptParser) Builder_Smear() (localctx IBuilder_SmearContext) {
	localctx = NewBuilder_SmearContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, MinecraftMetascriptParserRULE_builder_Smear)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(698)
		p.Match(MinecraftMetascriptParserT__33)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(699)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(700)
		p.Number()
	}
	{
		p.SetState(701)
		p.Match(MinecraftMetascriptParserT__9)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBuilder_Type1Context is an interface to support dynamic dispatch.
type IBuilder_Type1Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsBuilder_Type1Context differentiates from other interfaces.
	IsBuilder_Type1Context()
}

type Builder_Type1Context struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBuilder_Type1Context() *Builder_Type1Context {
	var p = new(Builder_Type1Context)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Type1
	return p
}

func InitEmptyBuilder_Type1Context(p *Builder_Type1Context) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Type1
}

func (*Builder_Type1Context) IsBuilder_Type1Context() {}

func NewBuilder_Type1Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Builder_Type1Context {
	var p = new(Builder_Type1Context)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Type1

	return p
}

func (s *Builder_Type1Context) GetParser() antlr.Parser { return s.parser }
func (s *Builder_Type1Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Builder_Type1Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Builder_Type1Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterBuilder_Type1(s)
	}
}

func (s *Builder_Type1Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitBuilder_Type1(s)
	}
}

func (p *MinecraftMetascriptParser) Builder_Type1() (localctx IBuilder_Type1Context) {
	localctx = NewBuilder_Type1Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, MinecraftMetascriptParserRULE_builder_Type1)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(703)
		p.Match(MinecraftMetascriptParserT__34)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(704)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(705)
		p.Match(MinecraftMetascriptParserT__9)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBuilder_Type2Context is an interface to support dynamic dispatch.
type IBuilder_Type2Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsBuilder_Type2Context differentiates from other interfaces.
	IsBuilder_Type2Context()
}

type Builder_Type2Context struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBuilder_Type2Context() *Builder_Type2Context {
	var p = new(Builder_Type2Context)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Type2
	return p
}

func InitEmptyBuilder_Type2Context(p *Builder_Type2Context) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Type2
}

func (*Builder_Type2Context) IsBuilder_Type2Context() {}

func NewBuilder_Type2Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Builder_Type2Context {
	var p = new(Builder_Type2Context)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Type2

	return p
}

func (s *Builder_Type2Context) GetParser() antlr.Parser { return s.parser }
func (s *Builder_Type2Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Builder_Type2Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Builder_Type2Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterBuilder_Type2(s)
	}
}

func (s *Builder_Type2Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitBuilder_Type2(s)
	}
}

func (p *MinecraftMetascriptParser) Builder_Type2() (localctx IBuilder_Type2Context) {
	localctx = NewBuilder_Type2Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, MinecraftMetascriptParserRULE_builder_Type2)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(707)
		p.Match(MinecraftMetascriptParserT__35)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(708)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(709)
		p.Match(MinecraftMetascriptParserT__9)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBuilder_ShiftContext is an interface to support dynamic dispatch.
type IBuilder_ShiftContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Axis() antlr.TerminalNode
	DensityFn() IDensityFnContext

	// IsBuilder_ShiftContext differentiates from other interfaces.
	IsBuilder_ShiftContext()
}

type Builder_ShiftContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBuilder_ShiftContext() *Builder_ShiftContext {
	var p = new(Builder_ShiftContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Shift
	return p
}

func InitEmptyBuilder_ShiftContext(p *Builder_ShiftContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Shift
}

func (*Builder_ShiftContext) IsBuilder_ShiftContext() {}

func NewBuilder_ShiftContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Builder_ShiftContext {
	var p = new(Builder_ShiftContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Shift

	return p
}

func (s *Builder_ShiftContext) GetParser() antlr.Parser { return s.parser }

func (s *Builder_ShiftContext) Axis() antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserAxis, 0)
}

func (s *Builder_ShiftContext) DensityFn() IDensityFnContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFnContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFnContext)
}

func (s *Builder_ShiftContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Builder_ShiftContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Builder_ShiftContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterBuilder_Shift(s)
	}
}

func (s *Builder_ShiftContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitBuilder_Shift(s)
	}
}

func (p *MinecraftMetascriptParser) Builder_Shift() (localctx IBuilder_ShiftContext) {
	localctx = NewBuilder_ShiftContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, MinecraftMetascriptParserRULE_builder_Shift)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(711)
		p.Match(MinecraftMetascriptParserT__36)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(712)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(713)
		p.Match(MinecraftMetascriptParserAxis)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(714)
		p.Match(MinecraftMetascriptParserT__13)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(715)
		p.DensityFn()
	}
	{
		p.SetState(716)
		p.Match(MinecraftMetascriptParserT__9)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBuilder_AmplitudesContext is an interface to support dynamic dispatch.
type IBuilder_AmplitudesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllNumber() []INumberContext
	Number(i int) INumberContext

	// IsBuilder_AmplitudesContext differentiates from other interfaces.
	IsBuilder_AmplitudesContext()
}

type Builder_AmplitudesContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBuilder_AmplitudesContext() *Builder_AmplitudesContext {
	var p = new(Builder_AmplitudesContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Amplitudes
	return p
}

func InitEmptyBuilder_AmplitudesContext(p *Builder_AmplitudesContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Amplitudes
}

func (*Builder_AmplitudesContext) IsBuilder_AmplitudesContext() {}

func NewBuilder_AmplitudesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Builder_AmplitudesContext {
	var p = new(Builder_AmplitudesContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Amplitudes

	return p
}

func (s *Builder_AmplitudesContext) GetParser() antlr.Parser { return s.parser }

func (s *Builder_AmplitudesContext) AllNumber() []INumberContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INumberContext); ok {
			len++
		}
	}

	tst := make([]INumberContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INumberContext); ok {
			tst[i] = t.(INumberContext)
			i++
		}
	}

	return tst
}

func (s *Builder_AmplitudesContext) Number(i int) INumberContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumberContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumberContext)
}

func (s *Builder_AmplitudesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Builder_AmplitudesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Builder_AmplitudesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterBuilder_Amplitudes(s)
	}
}

func (s *Builder_AmplitudesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitBuilder_Amplitudes(s)
	}
}

func (p *MinecraftMetascriptParser) Builder_Amplitudes() (localctx IBuilder_AmplitudesContext) {
	localctx = NewBuilder_AmplitudesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, MinecraftMetascriptParserRULE_builder_Amplitudes)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(718)
		p.Match(MinecraftMetascriptParserT__37)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(719)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(725)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 66, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(720)
				p.Number()
			}
			{
				p.SetState(721)
				p.Match(MinecraftMetascriptParserT__13)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(727)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 66, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	{
		p.SetState(728)
		p.Number()
	}
	{
		p.SetState(729)
		p.Match(MinecraftMetascriptParserT__9)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBuilder_OffsetContext is an interface to support dynamic dispatch.
type IBuilder_OffsetContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Int() antlr.TerminalNode

	// IsBuilder_OffsetContext differentiates from other interfaces.
	IsBuilder_OffsetContext()
}

type Builder_OffsetContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBuilder_OffsetContext() *Builder_OffsetContext {
	var p = new(Builder_OffsetContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Offset
	return p
}

func InitEmptyBuilder_OffsetContext(p *Builder_OffsetContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Offset
}

func (*Builder_OffsetContext) IsBuilder_OffsetContext() {}

func NewBuilder_OffsetContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Builder_OffsetContext {
	var p = new(Builder_OffsetContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Offset

	return p
}

func (s *Builder_OffsetContext) GetParser() antlr.Parser { return s.parser }

func (s *Builder_OffsetContext) Int() antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserInt, 0)
}

func (s *Builder_OffsetContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Builder_OffsetContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Builder_OffsetContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterBuilder_Offset(s)
	}
}

func (s *Builder_OffsetContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitBuilder_Offset(s)
	}
}

func (p *MinecraftMetascriptParser) Builder_Offset() (localctx IBuilder_OffsetContext) {
	localctx = NewBuilder_OffsetContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, MinecraftMetascriptParserRULE_builder_Offset)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(731)
		p.Match(MinecraftMetascriptParserT__38)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(732)
		p.Match(MinecraftMetascriptParserInt)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(733)
		p.Match(MinecraftMetascriptParserT__9)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBuilder_AddContext is an interface to support dynamic dispatch.
type IBuilder_AddContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsBuilder_AddContext differentiates from other interfaces.
	IsBuilder_AddContext()
}

type Builder_AddContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBuilder_AddContext() *Builder_AddContext {
	var p = new(Builder_AddContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Add
	return p
}

func InitEmptyBuilder_AddContext(p *Builder_AddContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Add
}

func (*Builder_AddContext) IsBuilder_AddContext() {}

func NewBuilder_AddContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Builder_AddContext {
	var p = new(Builder_AddContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Add

	return p
}

func (s *Builder_AddContext) GetParser() antlr.Parser { return s.parser }
func (s *Builder_AddContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Builder_AddContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Builder_AddContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterBuilder_Add(s)
	}
}

func (s *Builder_AddContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitBuilder_Add(s)
	}
}

func (p *MinecraftMetascriptParser) Builder_Add() (localctx IBuilder_AddContext) {
	localctx = NewBuilder_AddContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, MinecraftMetascriptParserRULE_builder_Add)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(735)
		p.Match(MinecraftMetascriptParserT__39)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBuilder_MulContext is an interface to support dynamic dispatch.
type IBuilder_MulContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Number() INumberContext

	// IsBuilder_MulContext differentiates from other interfaces.
	IsBuilder_MulContext()
}

type Builder_MulContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBuilder_MulContext() *Builder_MulContext {
	var p = new(Builder_MulContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Mul
	return p
}

func InitEmptyBuilder_MulContext(p *Builder_MulContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Mul
}

func (*Builder_MulContext) IsBuilder_MulContext() {}

func NewBuilder_MulContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Builder_MulContext {
	var p = new(Builder_MulContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Mul

	return p
}

func (s *Builder_MulContext) GetParser() antlr.Parser { return s.parser }

func (s *Builder_MulContext) Number() INumberContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumberContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumberContext)
}

func (s *Builder_MulContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Builder_MulContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Builder_MulContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterBuilder_Mul(s)
	}
}

func (s *Builder_MulContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitBuilder_Mul(s)
	}
}

func (p *MinecraftMetascriptParser) Builder_Mul() (localctx IBuilder_MulContext) {
	localctx = NewBuilder_MulContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, MinecraftMetascriptParserRULE_builder_Mul)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(737)
		p.Match(MinecraftMetascriptParserT__40)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(738)
		p.Number()
	}
	{
		p.SetState(739)
		p.Match(MinecraftMetascriptParserT__9)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBuilder_MulIntContext is an interface to support dynamic dispatch.
type IBuilder_MulIntContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Int() antlr.TerminalNode

	// IsBuilder_MulIntContext differentiates from other interfaces.
	IsBuilder_MulIntContext()
}

type Builder_MulIntContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBuilder_MulIntContext() *Builder_MulIntContext {
	var p = new(Builder_MulIntContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_MulInt
	return p
}

func InitEmptyBuilder_MulIntContext(p *Builder_MulIntContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_MulInt
}

func (*Builder_MulIntContext) IsBuilder_MulIntContext() {}

func NewBuilder_MulIntContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Builder_MulIntContext {
	var p = new(Builder_MulIntContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_MulInt

	return p
}

func (s *Builder_MulIntContext) GetParser() antlr.Parser { return s.parser }

func (s *Builder_MulIntContext) Int() antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserInt, 0)
}

func (s *Builder_MulIntContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Builder_MulIntContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Builder_MulIntContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterBuilder_MulInt(s)
	}
}

func (s *Builder_MulIntContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitBuilder_MulInt(s)
	}
}

func (p *MinecraftMetascriptParser) Builder_MulInt() (localctx IBuilder_MulIntContext) {
	localctx = NewBuilder_MulIntContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, MinecraftMetascriptParserRULE_builder_MulInt)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(741)
		p.Match(MinecraftMetascriptParserT__40)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(742)
		p.Match(MinecraftMetascriptParserInt)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(743)
		p.Match(MinecraftMetascriptParserT__9)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBuilder_MinContext is an interface to support dynamic dispatch.
type IBuilder_MinContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Number() INumberContext

	// IsBuilder_MinContext differentiates from other interfaces.
	IsBuilder_MinContext()
}

type Builder_MinContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBuilder_MinContext() *Builder_MinContext {
	var p = new(Builder_MinContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Min
	return p
}

func InitEmptyBuilder_MinContext(p *Builder_MinContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Min
}

func (*Builder_MinContext) IsBuilder_MinContext() {}

func NewBuilder_MinContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Builder_MinContext {
	var p = new(Builder_MinContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Min

	return p
}

func (s *Builder_MinContext) GetParser() antlr.Parser { return s.parser }

func (s *Builder_MinContext) Number() INumberContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumberContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumberContext)
}

func (s *Builder_MinContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Builder_MinContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Builder_MinContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterBuilder_Min(s)
	}
}

func (s *Builder_MinContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitBuilder_Min(s)
	}
}

func (p *MinecraftMetascriptParser) Builder_Min() (localctx IBuilder_MinContext) {
	localctx = NewBuilder_MinContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, MinecraftMetascriptParserRULE_builder_Min)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(745)
		p.Match(MinecraftMetascriptParserT__41)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(746)
		p.Number()
	}
	{
		p.SetState(747)
		p.Match(MinecraftMetascriptParserT__9)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBuilder_MaxContext is an interface to support dynamic dispatch.
type IBuilder_MaxContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Number() INumberContext

	// IsBuilder_MaxContext differentiates from other interfaces.
	IsBuilder_MaxContext()
}

type Builder_MaxContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBuilder_MaxContext() *Builder_MaxContext {
	var p = new(Builder_MaxContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Max
	return p
}

func InitEmptyBuilder_MaxContext(p *Builder_MaxContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Max
}

func (*Builder_MaxContext) IsBuilder_MaxContext() {}

func NewBuilder_MaxContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Builder_MaxContext {
	var p = new(Builder_MaxContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Max

	return p
}

func (s *Builder_MaxContext) GetParser() antlr.Parser { return s.parser }

func (s *Builder_MaxContext) Number() INumberContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumberContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumberContext)
}

func (s *Builder_MaxContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Builder_MaxContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Builder_MaxContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterBuilder_Max(s)
	}
}

func (s *Builder_MaxContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitBuilder_Max(s)
	}
}

func (p *MinecraftMetascriptParser) Builder_Max() (localctx IBuilder_MaxContext) {
	localctx = NewBuilder_MaxContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, MinecraftMetascriptParserRULE_builder_Max)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(749)
		p.Match(MinecraftMetascriptParserT__42)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(750)
		p.Number()
	}
	{
		p.SetState(751)
		p.Match(MinecraftMetascriptParserT__9)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBuilder_TopContext is an interface to support dynamic dispatch.
type IBuilder_TopContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	VerticalAnchor() IVerticalAnchorContext

	// IsBuilder_TopContext differentiates from other interfaces.
	IsBuilder_TopContext()
}

type Builder_TopContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBuilder_TopContext() *Builder_TopContext {
	var p = new(Builder_TopContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Top
	return p
}

func InitEmptyBuilder_TopContext(p *Builder_TopContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Top
}

func (*Builder_TopContext) IsBuilder_TopContext() {}

func NewBuilder_TopContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Builder_TopContext {
	var p = new(Builder_TopContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Top

	return p
}

func (s *Builder_TopContext) GetParser() antlr.Parser { return s.parser }

func (s *Builder_TopContext) VerticalAnchor() IVerticalAnchorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVerticalAnchorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVerticalAnchorContext)
}

func (s *Builder_TopContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Builder_TopContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Builder_TopContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterBuilder_Top(s)
	}
}

func (s *Builder_TopContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitBuilder_Top(s)
	}
}

func (p *MinecraftMetascriptParser) Builder_Top() (localctx IBuilder_TopContext) {
	localctx = NewBuilder_TopContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, MinecraftMetascriptParserRULE_builder_Top)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(753)
		p.Match(MinecraftMetascriptParserT__43)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(754)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(755)
		p.VerticalAnchor()
	}
	{
		p.SetState(756)
		p.Match(MinecraftMetascriptParserT__9)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBuilder_TopLiteralContext is an interface to support dynamic dispatch.
type IBuilder_TopLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Int() antlr.TerminalNode

	// IsBuilder_TopLiteralContext differentiates from other interfaces.
	IsBuilder_TopLiteralContext()
}

type Builder_TopLiteralContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBuilder_TopLiteralContext() *Builder_TopLiteralContext {
	var p = new(Builder_TopLiteralContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_TopLiteral
	return p
}

func InitEmptyBuilder_TopLiteralContext(p *Builder_TopLiteralContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_TopLiteral
}

func (*Builder_TopLiteralContext) IsBuilder_TopLiteralContext() {}

func NewBuilder_TopLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Builder_TopLiteralContext {
	var p = new(Builder_TopLiteralContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_TopLiteral

	return p
}

func (s *Builder_TopLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *Builder_TopLiteralContext) Int() antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserInt, 0)
}

func (s *Builder_TopLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Builder_TopLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Builder_TopLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterBuilder_TopLiteral(s)
	}
}

func (s *Builder_TopLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitBuilder_TopLiteral(s)
	}
}

func (p *MinecraftMetascriptParser) Builder_TopLiteral() (localctx IBuilder_TopLiteralContext) {
	localctx = NewBuilder_TopLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, MinecraftMetascriptParserRULE_builder_TopLiteral)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(758)
		p.Match(MinecraftMetascriptParserT__43)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(759)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(760)
		p.Match(MinecraftMetascriptParserInt)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(761)
		p.Match(MinecraftMetascriptParserT__9)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBuilder_BottomContext is an interface to support dynamic dispatch.
type IBuilder_BottomContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	VerticalAnchor() IVerticalAnchorContext

	// IsBuilder_BottomContext differentiates from other interfaces.
	IsBuilder_BottomContext()
}

type Builder_BottomContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBuilder_BottomContext() *Builder_BottomContext {
	var p = new(Builder_BottomContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Bottom
	return p
}

func InitEmptyBuilder_BottomContext(p *Builder_BottomContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Bottom
}

func (*Builder_BottomContext) IsBuilder_BottomContext() {}

func NewBuilder_BottomContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Builder_BottomContext {
	var p = new(Builder_BottomContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Bottom

	return p
}

func (s *Builder_BottomContext) GetParser() antlr.Parser { return s.parser }

func (s *Builder_BottomContext) VerticalAnchor() IVerticalAnchorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVerticalAnchorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVerticalAnchorContext)
}

func (s *Builder_BottomContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Builder_BottomContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Builder_BottomContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterBuilder_Bottom(s)
	}
}

func (s *Builder_BottomContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitBuilder_Bottom(s)
	}
}

func (p *MinecraftMetascriptParser) Builder_Bottom() (localctx IBuilder_BottomContext) {
	localctx = NewBuilder_BottomContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, MinecraftMetascriptParserRULE_builder_Bottom)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(763)
		p.Match(MinecraftMetascriptParserT__44)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(764)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(765)
		p.VerticalAnchor()
	}
	{
		p.SetState(766)
		p.Match(MinecraftMetascriptParserT__9)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBuilder_BottomLiteralContext is an interface to support dynamic dispatch.
type IBuilder_BottomLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Int() antlr.TerminalNode

	// IsBuilder_BottomLiteralContext differentiates from other interfaces.
	IsBuilder_BottomLiteralContext()
}

type Builder_BottomLiteralContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBuilder_BottomLiteralContext() *Builder_BottomLiteralContext {
	var p = new(Builder_BottomLiteralContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_BottomLiteral
	return p
}

func InitEmptyBuilder_BottomLiteralContext(p *Builder_BottomLiteralContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_BottomLiteral
}

func (*Builder_BottomLiteralContext) IsBuilder_BottomLiteralContext() {}

func NewBuilder_BottomLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Builder_BottomLiteralContext {
	var p = new(Builder_BottomLiteralContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_BottomLiteral

	return p
}

func (s *Builder_BottomLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *Builder_BottomLiteralContext) Int() antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserInt, 0)
}

func (s *Builder_BottomLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Builder_BottomLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Builder_BottomLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterBuilder_BottomLiteral(s)
	}
}

func (s *Builder_BottomLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitBuilder_BottomLiteral(s)
	}
}

func (p *MinecraftMetascriptParser) Builder_BottomLiteral() (localctx IBuilder_BottomLiteralContext) {
	localctx = NewBuilder_BottomLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, MinecraftMetascriptParserRULE_builder_BottomLiteral)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(768)
		p.Match(MinecraftMetascriptParserT__44)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(769)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(770)
		p.Match(MinecraftMetascriptParserInt)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(771)
		p.Match(MinecraftMetascriptParserT__9)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBuilder_InRangeContext is an interface to support dynamic dispatch.
type IBuilder_InRangeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DensityFn() IDensityFnContext

	// IsBuilder_InRangeContext differentiates from other interfaces.
	IsBuilder_InRangeContext()
}

type Builder_InRangeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBuilder_InRangeContext() *Builder_InRangeContext {
	var p = new(Builder_InRangeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_InRange
	return p
}

func InitEmptyBuilder_InRangeContext(p *Builder_InRangeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_InRange
}

func (*Builder_InRangeContext) IsBuilder_InRangeContext() {}

func NewBuilder_InRangeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Builder_InRangeContext {
	var p = new(Builder_InRangeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_InRange

	return p
}

func (s *Builder_InRangeContext) GetParser() antlr.Parser { return s.parser }

func (s *Builder_InRangeContext) DensityFn() IDensityFnContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFnContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFnContext)
}

func (s *Builder_InRangeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Builder_InRangeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Builder_InRangeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterBuilder_InRange(s)
	}
}

func (s *Builder_InRangeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitBuilder_InRange(s)
	}
}

func (p *MinecraftMetascriptParser) Builder_InRange() (localctx IBuilder_InRangeContext) {
	localctx = NewBuilder_InRangeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, MinecraftMetascriptParserRULE_builder_InRange)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(773)
		p.Match(MinecraftMetascriptParserT__45)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(774)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(775)
		p.DensityFn()
	}
	{
		p.SetState(776)
		p.Match(MinecraftMetascriptParserT__9)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBuilder_OutRangeContext is an interface to support dynamic dispatch.
type IBuilder_OutRangeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DensityFn() IDensityFnContext

	// IsBuilder_OutRangeContext differentiates from other interfaces.
	IsBuilder_OutRangeContext()
}

type Builder_OutRangeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBuilder_OutRangeContext() *Builder_OutRangeContext {
	var p = new(Builder_OutRangeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_OutRange
	return p
}

func InitEmptyBuilder_OutRangeContext(p *Builder_OutRangeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_OutRange
}

func (*Builder_OutRangeContext) IsBuilder_OutRangeContext() {}

func NewBuilder_OutRangeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Builder_OutRangeContext {
	var p = new(Builder_OutRangeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_OutRange

	return p
}

func (s *Builder_OutRangeContext) GetParser() antlr.Parser { return s.parser }

func (s *Builder_OutRangeContext) DensityFn() IDensityFnContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFnContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFnContext)
}

func (s *Builder_OutRangeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Builder_OutRangeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Builder_OutRangeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterBuilder_OutRange(s)
	}
}

func (s *Builder_OutRangeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitBuilder_OutRange(s)
	}
}

func (p *MinecraftMetascriptParser) Builder_OutRange() (localctx IBuilder_OutRangeContext) {
	localctx = NewBuilder_OutRangeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, MinecraftMetascriptParserRULE_builder_OutRange)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(778)
		p.Match(MinecraftMetascriptParserT__46)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(779)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(780)
		p.DensityFn()
	}
	{
		p.SetState(781)
		p.Match(MinecraftMetascriptParserT__9)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IResourceReferenceContext is an interface to support dynamic dispatch.
type IResourceReferenceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllIdentifier() []antlr.TerminalNode
	Identifier(i int) antlr.TerminalNode

	// IsResourceReferenceContext differentiates from other interfaces.
	IsResourceReferenceContext()
}

type ResourceReferenceContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyResourceReferenceContext() *ResourceReferenceContext {
	var p = new(ResourceReferenceContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_resourceReference
	return p
}

func InitEmptyResourceReferenceContext(p *ResourceReferenceContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_resourceReference
}

func (*ResourceReferenceContext) IsResourceReferenceContext() {}

func NewResourceReferenceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ResourceReferenceContext {
	var p = new(ResourceReferenceContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_resourceReference

	return p
}

func (s *ResourceReferenceContext) GetParser() antlr.Parser { return s.parser }

func (s *ResourceReferenceContext) AllIdentifier() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserIdentifier)
}

func (s *ResourceReferenceContext) Identifier(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserIdentifier, i)
}

func (s *ResourceReferenceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ResourceReferenceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ResourceReferenceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterResourceReference(s)
	}
}

func (s *ResourceReferenceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitResourceReference(s)
	}
}

func (p *MinecraftMetascriptParser) ResourceReference() (localctx IResourceReferenceContext) {
	localctx = NewResourceReferenceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 118, MinecraftMetascriptParserRULE_resourceReference)
	p.EnterOuterAlt(localctx, 1)
	p.SetState(785)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 67, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(783)
			p.Match(MinecraftMetascriptParserIdentifier)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(784)
			p.Match(MinecraftMetascriptParserT__47)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(787)
		p.Match(MinecraftMetascriptParserIdentifier)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INumberContext is an interface to support dynamic dispatch.
type INumberContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Int() antlr.TerminalNode
	Float() antlr.TerminalNode

	// IsNumberContext differentiates from other interfaces.
	IsNumberContext()
}

type NumberContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNumberContext() *NumberContext {
	var p = new(NumberContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_number
	return p
}

func InitEmptyNumberContext(p *NumberContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_number
}

func (*NumberContext) IsNumberContext() {}

func NewNumberContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NumberContext {
	var p = new(NumberContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_number

	return p
}

func (s *NumberContext) GetParser() antlr.Parser { return s.parser }

func (s *NumberContext) Int() antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserInt, 0)
}

func (s *NumberContext) Float() antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserFloat, 0)
}

func (s *NumberContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NumberContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NumberContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterNumber(s)
	}
}

func (s *NumberContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitNumber(s)
	}
}

func (p *MinecraftMetascriptParser) Number() (localctx INumberContext) {
	localctx = NewNumberContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 120, MinecraftMetascriptParserRULE_number)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(789)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MinecraftMetascriptParserInt || _la == MinecraftMetascriptParserFloat) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INoiseBlockContext is an interface to support dynamic dispatch.
type INoiseBlockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode
	AllNoiseDeclaration() []INoiseDeclarationContext
	NoiseDeclaration(i int) INoiseDeclarationContext

	// IsNoiseBlockContext differentiates from other interfaces.
	IsNoiseBlockContext()
}

type NoiseBlockContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNoiseBlockContext() *NoiseBlockContext {
	var p = new(NoiseBlockContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_noiseBlock
	return p
}

func InitEmptyNoiseBlockContext(p *NoiseBlockContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_noiseBlock
}

func (*NoiseBlockContext) IsNoiseBlockContext() {}

func NewNoiseBlockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NoiseBlockContext {
	var p = new(NoiseBlockContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_noiseBlock

	return p
}

func (s *NoiseBlockContext) GetParser() antlr.Parser { return s.parser }

func (s *NoiseBlockContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *NoiseBlockContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *NoiseBlockContext) AllNoiseDeclaration() []INoiseDeclarationContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INoiseDeclarationContext); ok {
			len++
		}
	}

	tst := make([]INoiseDeclarationContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INoiseDeclarationContext); ok {
			tst[i] = t.(INoiseDeclarationContext)
			i++
		}
	}

	return tst
}

func (s *NoiseBlockContext) NoiseDeclaration(i int) INoiseDeclarationContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INoiseDeclarationContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INoiseDeclarationContext)
}

func (s *NoiseBlockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NoiseBlockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NoiseBlockContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterNoiseBlock(s)
	}
}

func (s *NoiseBlockContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitNoiseBlock(s)
	}
}

func (p *MinecraftMetascriptParser) NoiseBlock() (localctx INoiseBlockContext) {
	localctx = NewNoiseBlockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 122, MinecraftMetascriptParserRULE_noiseBlock)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(791)
		p.Match(MinecraftMetascriptParserT__48)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(795)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(792)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(797)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(798)
		p.Match(MinecraftMetascriptParserT__1)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(802)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 69, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(799)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(804)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 69, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(814)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserIdentifier {
		{
			p.SetState(805)
			p.NoiseDeclaration()
		}
		p.SetState(809)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 70, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(806)
					p.Match(MinecraftMetascriptParserNL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(811)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 70, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}

		p.SetState(816)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(820)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(817)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(822)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(823)
		p.Match(MinecraftMetascriptParserT__2)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INoiseDeclarationContext is an interface to support dynamic dispatch.
type INoiseDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() antlr.TerminalNode
	Noise() INoiseContext

	// IsNoiseDeclarationContext differentiates from other interfaces.
	IsNoiseDeclarationContext()
}

type NoiseDeclarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNoiseDeclarationContext() *NoiseDeclarationContext {
	var p = new(NoiseDeclarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_noiseDeclaration
	return p
}

func InitEmptyNoiseDeclarationContext(p *NoiseDeclarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_noiseDeclaration
}

func (*NoiseDeclarationContext) IsNoiseDeclarationContext() {}

func NewNoiseDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NoiseDeclarationContext {
	var p = new(NoiseDeclarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_noiseDeclaration

	return p
}

func (s *NoiseDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *NoiseDeclarationContext) Identifier() antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserIdentifier, 0)
}

func (s *NoiseDeclarationContext) Noise() INoiseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INoiseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INoiseContext)
}

func (s *NoiseDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NoiseDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NoiseDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterNoiseDeclaration(s)
	}
}

func (s *NoiseDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitNoiseDeclaration(s)
	}
}

func (p *MinecraftMetascriptParser) NoiseDeclaration() (localctx INoiseDeclarationContext) {
	localctx = NewNoiseDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 124, MinecraftMetascriptParserRULE_noiseDeclaration)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(825)
		p.Match(MinecraftMetascriptParserIdentifier)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(826)
		p.Match(MinecraftMetascriptParserT__5)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(827)
		p.Noise()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INoiseContext is an interface to support dynamic dispatch.
type INoiseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	NoiseDefinition() INoiseDefinitionContext

	// IsNoiseContext differentiates from other interfaces.
	IsNoiseContext()
}

type NoiseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNoiseContext() *NoiseContext {
	var p = new(NoiseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_noise
	return p
}

func InitEmptyNoiseContext(p *NoiseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_noise
}

func (*NoiseContext) IsNoiseContext() {}

func NewNoiseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NoiseContext {
	var p = new(NoiseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_noise

	return p
}

func (s *NoiseContext) GetParser() antlr.Parser { return s.parser }

func (s *NoiseContext) NoiseDefinition() INoiseDefinitionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INoiseDefinitionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INoiseDefinitionContext)
}

func (s *NoiseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NoiseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NoiseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterNoise(s)
	}
}

func (s *NoiseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitNoise(s)
	}
}

func (p *MinecraftMetascriptParser) Noise() (localctx INoiseContext) {
	localctx = NewNoiseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 126, MinecraftMetascriptParserRULE_noise)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(829)
		p.Match(MinecraftMetascriptParserT__48)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(830)
		p.NoiseDefinition()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INoiseDefinitionContext is an interface to support dynamic dispatch.
type INoiseDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Int() antlr.TerminalNode
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode
	AllNoise_Builder() []INoise_BuilderContext
	Noise_Builder(i int) INoise_BuilderContext

	// IsNoiseDefinitionContext differentiates from other interfaces.
	IsNoiseDefinitionContext()
}

type NoiseDefinitionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNoiseDefinitionContext() *NoiseDefinitionContext {
	var p = new(NoiseDefinitionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_noiseDefinition
	return p
}

func InitEmptyNoiseDefinitionContext(p *NoiseDefinitionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_noiseDefinition
}

func (*NoiseDefinitionContext) IsNoiseDefinitionContext() {}

func NewNoiseDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NoiseDefinitionContext {
	var p = new(NoiseDefinitionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_noiseDefinition

	return p
}

func (s *NoiseDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *NoiseDefinitionContext) Int() antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserInt, 0)
}

func (s *NoiseDefinitionContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *NoiseDefinitionContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *NoiseDefinitionContext) AllNoise_Builder() []INoise_BuilderContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INoise_BuilderContext); ok {
			len++
		}
	}

	tst := make([]INoise_BuilderContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INoise_BuilderContext); ok {
			tst[i] = t.(INoise_BuilderContext)
			i++
		}
	}

	return tst
}

func (s *NoiseDefinitionContext) Noise_Builder(i int) INoise_BuilderContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INoise_BuilderContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INoise_BuilderContext)
}

func (s *NoiseDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NoiseDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NoiseDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterNoiseDefinition(s)
	}
}

func (s *NoiseDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitNoiseDefinition(s)
	}
}

func (p *MinecraftMetascriptParser) NoiseDefinition() (localctx INoiseDefinitionContext) {
	localctx = NewNoiseDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 128, MinecraftMetascriptParserRULE_noiseDefinition)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(832)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(836)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(833)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(838)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(839)
		p.Match(MinecraftMetascriptParserInt)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(843)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(840)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(845)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(846)
		p.Match(MinecraftMetascriptParserT__9)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(850)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 75, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(847)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(852)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 75, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(862)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserT__37 {
		{
			p.SetState(853)
			p.Noise_Builder()
		}
		p.SetState(857)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 76, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(854)
					p.Match(MinecraftMetascriptParserNL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(859)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 76, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}

		p.SetState(864)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INoise_BuilderContext is an interface to support dynamic dispatch.
type INoise_BuilderContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Builder_Amplitudes() IBuilder_AmplitudesContext

	// IsNoise_BuilderContext differentiates from other interfaces.
	IsNoise_BuilderContext()
}

type Noise_BuilderContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNoise_BuilderContext() *Noise_BuilderContext {
	var p = new(Noise_BuilderContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_noise_Builder
	return p
}

func InitEmptyNoise_BuilderContext(p *Noise_BuilderContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_noise_Builder
}

func (*Noise_BuilderContext) IsNoise_BuilderContext() {}

func NewNoise_BuilderContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Noise_BuilderContext {
	var p = new(Noise_BuilderContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_noise_Builder

	return p
}

func (s *Noise_BuilderContext) GetParser() antlr.Parser { return s.parser }

func (s *Noise_BuilderContext) Builder_Amplitudes() IBuilder_AmplitudesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_AmplitudesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_AmplitudesContext)
}

func (s *Noise_BuilderContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Noise_BuilderContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Noise_BuilderContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterNoise_Builder(s)
	}
}

func (s *Noise_BuilderContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitNoise_Builder(s)
	}
}

func (p *MinecraftMetascriptParser) Noise_Builder() (localctx INoise_BuilderContext) {
	localctx = NewNoise_BuilderContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 130, MinecraftMetascriptParserRULE_noise_Builder)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(865)
		p.Builder_Amplitudes()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDensityFnBlockContext is an interface to support dynamic dispatch.
type IDensityFnBlockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode
	AllDensityFnDeclaration() []IDensityFnDeclarationContext
	DensityFnDeclaration(i int) IDensityFnDeclarationContext

	// IsDensityFnBlockContext differentiates from other interfaces.
	IsDensityFnBlockContext()
}

type DensityFnBlockContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDensityFnBlockContext() *DensityFnBlockContext {
	var p = new(DensityFnBlockContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFnBlock
	return p
}

func InitEmptyDensityFnBlockContext(p *DensityFnBlockContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFnBlock
}

func (*DensityFnBlockContext) IsDensityFnBlockContext() {}

func NewDensityFnBlockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DensityFnBlockContext {
	var p = new(DensityFnBlockContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFnBlock

	return p
}

func (s *DensityFnBlockContext) GetParser() antlr.Parser { return s.parser }

func (s *DensityFnBlockContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *DensityFnBlockContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *DensityFnBlockContext) AllDensityFnDeclaration() []IDensityFnDeclarationContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDensityFnDeclarationContext); ok {
			len++
		}
	}

	tst := make([]IDensityFnDeclarationContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDensityFnDeclarationContext); ok {
			tst[i] = t.(IDensityFnDeclarationContext)
			i++
		}
	}

	return tst
}

func (s *DensityFnBlockContext) DensityFnDeclaration(i int) IDensityFnDeclarationContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFnDeclarationContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFnDeclarationContext)
}

func (s *DensityFnBlockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DensityFnBlockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DensityFnBlockContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterDensityFnBlock(s)
	}
}

func (s *DensityFnBlockContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitDensityFnBlock(s)
	}
}

func (p *MinecraftMetascriptParser) DensityFnBlock() (localctx IDensityFnBlockContext) {
	localctx = NewDensityFnBlockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 132, MinecraftMetascriptParserRULE_densityFnBlock)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(867)
		p.Match(MinecraftMetascriptParserT__49)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(871)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(868)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(873)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(874)
		p.Match(MinecraftMetascriptParserT__1)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(878)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 79, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(875)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(880)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 79, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(890)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserIdentifier {
		{
			p.SetState(881)
			p.DensityFnDeclaration()
		}
		p.SetState(885)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 80, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(882)
					p.Match(MinecraftMetascriptParserNL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(887)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 80, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}

		p.SetState(892)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(896)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(893)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(898)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(899)
		p.Match(MinecraftMetascriptParserT__2)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDensityFnDeclarationContext is an interface to support dynamic dispatch.
type IDensityFnDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() antlr.TerminalNode
	DensityFn() IDensityFnContext
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode

	// IsDensityFnDeclarationContext differentiates from other interfaces.
	IsDensityFnDeclarationContext()
}

type DensityFnDeclarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDensityFnDeclarationContext() *DensityFnDeclarationContext {
	var p = new(DensityFnDeclarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFnDeclaration
	return p
}

func InitEmptyDensityFnDeclarationContext(p *DensityFnDeclarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFnDeclaration
}

func (*DensityFnDeclarationContext) IsDensityFnDeclarationContext() {}

func NewDensityFnDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DensityFnDeclarationContext {
	var p = new(DensityFnDeclarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFnDeclaration

	return p
}

func (s *DensityFnDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *DensityFnDeclarationContext) Identifier() antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserIdentifier, 0)
}

func (s *DensityFnDeclarationContext) DensityFn() IDensityFnContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFnContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFnContext)
}

func (s *DensityFnDeclarationContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *DensityFnDeclarationContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *DensityFnDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DensityFnDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DensityFnDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterDensityFnDeclaration(s)
	}
}

func (s *DensityFnDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitDensityFnDeclaration(s)
	}
}

func (p *MinecraftMetascriptParser) DensityFnDeclaration() (localctx IDensityFnDeclarationContext) {
	localctx = NewDensityFnDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 134, MinecraftMetascriptParserRULE_densityFnDeclaration)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(901)
		p.Match(MinecraftMetascriptParserIdentifier)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(905)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(902)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(907)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(908)
		p.Match(MinecraftMetascriptParserT__5)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(912)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 84, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(909)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(914)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 84, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	{
		p.SetState(915)
		p.DensityFn()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDensityFnContext is an interface to support dynamic dispatch.
type IDensityFnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DensityFn_SingleInput() IDensityFn_SingleInputContext
	DensityFn_Cache() IDensityFn_CacheContext
	DensityFn_DualInput() IDensityFn_DualInputContext
	DensityFn_Constant() IDensityFn_ConstantContext
	DensityFn_Noise() IDensityFn_NoiseContext
	DensityFn_NoInput() IDensityFn_NoInputContext
	DensityFn_OldBlendedNoise() IDensityFn_OldBlendedNoiseContext
	DensityFn_WierdScaledSampler() IDensityFn_WierdScaledSamplerContext
	DensityFn_ShiftedNoise() IDensityFn_ShiftedNoiseContext
	DensityFn_RangeChoice() IDensityFn_RangeChoiceContext
	DensityFn_Clamp() IDensityFn_ClampContext
	DensityFn_YClampedGradient() IDensityFn_YClampedGradientContext
	DensityFn_SplineFn() IDensityFn_SplineFnContext
	DensityFn_Reference() IDensityFn_ReferenceContext
	DensityFn_Math() IDensityFn_MathContext

	// IsDensityFnContext differentiates from other interfaces.
	IsDensityFnContext()
}

type DensityFnContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDensityFnContext() *DensityFnContext {
	var p = new(DensityFnContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn
	return p
}

func InitEmptyDensityFnContext(p *DensityFnContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn
}

func (*DensityFnContext) IsDensityFnContext() {}

func NewDensityFnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DensityFnContext {
	var p = new(DensityFnContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn

	return p
}

func (s *DensityFnContext) GetParser() antlr.Parser { return s.parser }

func (s *DensityFnContext) DensityFn_SingleInput() IDensityFn_SingleInputContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFn_SingleInputContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFn_SingleInputContext)
}

func (s *DensityFnContext) DensityFn_Cache() IDensityFn_CacheContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFn_CacheContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFn_CacheContext)
}

func (s *DensityFnContext) DensityFn_DualInput() IDensityFn_DualInputContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFn_DualInputContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFn_DualInputContext)
}

func (s *DensityFnContext) DensityFn_Constant() IDensityFn_ConstantContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFn_ConstantContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFn_ConstantContext)
}

func (s *DensityFnContext) DensityFn_Noise() IDensityFn_NoiseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFn_NoiseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFn_NoiseContext)
}

func (s *DensityFnContext) DensityFn_NoInput() IDensityFn_NoInputContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFn_NoInputContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFn_NoInputContext)
}

func (s *DensityFnContext) DensityFn_OldBlendedNoise() IDensityFn_OldBlendedNoiseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFn_OldBlendedNoiseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFn_OldBlendedNoiseContext)
}

func (s *DensityFnContext) DensityFn_WierdScaledSampler() IDensityFn_WierdScaledSamplerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFn_WierdScaledSamplerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFn_WierdScaledSamplerContext)
}

func (s *DensityFnContext) DensityFn_ShiftedNoise() IDensityFn_ShiftedNoiseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFn_ShiftedNoiseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFn_ShiftedNoiseContext)
}

func (s *DensityFnContext) DensityFn_RangeChoice() IDensityFn_RangeChoiceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFn_RangeChoiceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFn_RangeChoiceContext)
}

func (s *DensityFnContext) DensityFn_Clamp() IDensityFn_ClampContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFn_ClampContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFn_ClampContext)
}

func (s *DensityFnContext) DensityFn_YClampedGradient() IDensityFn_YClampedGradientContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFn_YClampedGradientContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFn_YClampedGradientContext)
}

func (s *DensityFnContext) DensityFn_SplineFn() IDensityFn_SplineFnContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFn_SplineFnContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFn_SplineFnContext)
}

func (s *DensityFnContext) DensityFn_Reference() IDensityFn_ReferenceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFn_ReferenceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFn_ReferenceContext)
}

func (s *DensityFnContext) DensityFn_Math() IDensityFn_MathContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFn_MathContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFn_MathContext)
}

func (s *DensityFnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DensityFnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DensityFnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterDensityFn(s)
	}
}

func (s *DensityFnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitDensityFn(s)
	}
}

func (p *MinecraftMetascriptParser) DensityFn() (localctx IDensityFnContext) {
	localctx = NewDensityFnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 136, MinecraftMetascriptParserRULE_densityFn)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(931)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case MinecraftMetascriptParserT__53, MinecraftMetascriptParserT__54, MinecraftMetascriptParserT__55, MinecraftMetascriptParserT__56, MinecraftMetascriptParserT__57, MinecraftMetascriptParserT__58, MinecraftMetascriptParserT__59, MinecraftMetascriptParserT__60, MinecraftMetascriptParserT__61, MinecraftMetascriptParserT__62, MinecraftMetascriptParserT__63, MinecraftMetascriptParserT__64:
		{
			p.SetState(917)
			p.DensityFn_SingleInput()
		}

	case MinecraftMetascriptParserT__65:
		{
			p.SetState(918)
			p.DensityFn_Cache()
		}

	case MinecraftMetascriptParserT__8, MinecraftMetascriptParserT__66, MinecraftMetascriptParserT__67, MinecraftMetascriptParserNL:
		{
			p.SetState(919)
			p.DensityFn_DualInput()
		}

	case MinecraftMetascriptParserInt, MinecraftMetascriptParserFloat:
		{
			p.SetState(920)
			p.DensityFn_Constant()
		}

	case MinecraftMetascriptParserT__48:
		{
			p.SetState(921)
			p.DensityFn_Noise()
		}

	case MinecraftMetascriptParserT__50, MinecraftMetascriptParserT__51, MinecraftMetascriptParserT__52:
		{
			p.SetState(922)
			p.DensityFn_NoInput()
		}

	case MinecraftMetascriptParserT__68:
		{
			p.SetState(923)
			p.DensityFn_OldBlendedNoise()
		}

	case MinecraftMetascriptParserT__69:
		{
			p.SetState(924)
			p.DensityFn_WierdScaledSampler()
		}

	case MinecraftMetascriptParserT__70:
		{
			p.SetState(925)
			p.DensityFn_ShiftedNoise()
		}

	case MinecraftMetascriptParserT__71:
		{
			p.SetState(926)
			p.DensityFn_RangeChoice()
		}

	case MinecraftMetascriptParserT__72:
		{
			p.SetState(927)
			p.DensityFn_Clamp()
		}

	case MinecraftMetascriptParserT__73:
		{
			p.SetState(928)
			p.DensityFn_YClampedGradient()
		}

	case MinecraftMetascriptParserT__74:
		{
			p.SetState(929)
			p.DensityFn_SplineFn()
		}

	case MinecraftMetascriptParserIdentifier:
		{
			p.SetState(930)
			p.DensityFn_Reference()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}
	p.SetState(934)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == MinecraftMetascriptParserT__76 || _la == MinecraftMetascriptParserT__77 {
		{
			p.SetState(933)
			p.DensityFn_Math()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDensityFn_NoInputContext is an interface to support dynamic dispatch.
type IDensityFn_NoInputContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsDensityFn_NoInputContext differentiates from other interfaces.
	IsDensityFn_NoInputContext()
}

type DensityFn_NoInputContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDensityFn_NoInputContext() *DensityFn_NoInputContext {
	var p = new(DensityFn_NoInputContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_NoInput
	return p
}

func InitEmptyDensityFn_NoInputContext(p *DensityFn_NoInputContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_NoInput
}

func (*DensityFn_NoInputContext) IsDensityFn_NoInputContext() {}

func NewDensityFn_NoInputContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DensityFn_NoInputContext {
	var p = new(DensityFn_NoInputContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_NoInput

	return p
}

func (s *DensityFn_NoInputContext) GetParser() antlr.Parser { return s.parser }
func (s *DensityFn_NoInputContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DensityFn_NoInputContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DensityFn_NoInputContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterDensityFn_NoInput(s)
	}
}

func (s *DensityFn_NoInputContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitDensityFn_NoInput(s)
	}
}

func (p *MinecraftMetascriptParser) DensityFn_NoInput() (localctx IDensityFn_NoInputContext) {
	localctx = NewDensityFn_NoInputContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 138, MinecraftMetascriptParserRULE_densityFn_NoInput)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(936)
		_la = p.GetTokenStream().LA(1)

		if !((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&15762598695796736) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDensityFn_SingleInputContext is an interface to support dynamic dispatch.
type IDensityFn_SingleInputContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DensityFn() IDensityFnContext
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode

	// IsDensityFn_SingleInputContext differentiates from other interfaces.
	IsDensityFn_SingleInputContext()
}

type DensityFn_SingleInputContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDensityFn_SingleInputContext() *DensityFn_SingleInputContext {
	var p = new(DensityFn_SingleInputContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_SingleInput
	return p
}

func InitEmptyDensityFn_SingleInputContext(p *DensityFn_SingleInputContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_SingleInput
}

func (*DensityFn_SingleInputContext) IsDensityFn_SingleInputContext() {}

func NewDensityFn_SingleInputContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DensityFn_SingleInputContext {
	var p = new(DensityFn_SingleInputContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_SingleInput

	return p
}

func (s *DensityFn_SingleInputContext) GetParser() antlr.Parser { return s.parser }

func (s *DensityFn_SingleInputContext) DensityFn() IDensityFnContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFnContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFnContext)
}

func (s *DensityFn_SingleInputContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *DensityFn_SingleInputContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *DensityFn_SingleInputContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DensityFn_SingleInputContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DensityFn_SingleInputContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterDensityFn_SingleInput(s)
	}
}

func (s *DensityFn_SingleInputContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitDensityFn_SingleInput(s)
	}
}

func (p *MinecraftMetascriptParser) DensityFn_SingleInput() (localctx IDensityFn_SingleInputContext) {
	localctx = NewDensityFn_SingleInputContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 140, MinecraftMetascriptParserRULE_densityFn_SingleInput)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(938)
		_la = p.GetTokenStream().LA(1)

		if !((int64((_la-54)) & ^0x3f) == 0 && ((int64(1)<<(_la-54))&4095) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(942)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(939)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(944)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(945)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(949)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 88, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(946)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(951)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 88, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	{
		p.SetState(952)
		p.DensityFn()
	}
	p.SetState(956)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(953)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(958)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(959)
		p.Match(MinecraftMetascriptParserT__9)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDensityFn_InlineNoiseContext is an interface to support dynamic dispatch.
type IDensityFn_InlineNoiseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Noise() INoiseContext

	// IsDensityFn_InlineNoiseContext differentiates from other interfaces.
	IsDensityFn_InlineNoiseContext()
}

type DensityFn_InlineNoiseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDensityFn_InlineNoiseContext() *DensityFn_InlineNoiseContext {
	var p = new(DensityFn_InlineNoiseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_InlineNoise
	return p
}

func InitEmptyDensityFn_InlineNoiseContext(p *DensityFn_InlineNoiseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_InlineNoise
}

func (*DensityFn_InlineNoiseContext) IsDensityFn_InlineNoiseContext() {}

func NewDensityFn_InlineNoiseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DensityFn_InlineNoiseContext {
	var p = new(DensityFn_InlineNoiseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_InlineNoise

	return p
}

func (s *DensityFn_InlineNoiseContext) GetParser() antlr.Parser { return s.parser }

func (s *DensityFn_InlineNoiseContext) Noise() INoiseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INoiseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INoiseContext)
}

func (s *DensityFn_InlineNoiseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DensityFn_InlineNoiseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DensityFn_InlineNoiseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterDensityFn_InlineNoise(s)
	}
}

func (s *DensityFn_InlineNoiseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitDensityFn_InlineNoise(s)
	}
}

func (p *MinecraftMetascriptParser) DensityFn_InlineNoise() (localctx IDensityFn_InlineNoiseContext) {
	localctx = NewDensityFn_InlineNoiseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 142, MinecraftMetascriptParserRULE_densityFn_InlineNoise)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(961)
		p.Noise()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDensityFn_NoiseContext is an interface to support dynamic dispatch.
type IDensityFn_NoiseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DensityFn_InlineNoise() IDensityFn_InlineNoiseContext
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode
	AllDensityFn_NoiseBuilder() []IDensityFn_NoiseBuilderContext
	DensityFn_NoiseBuilder(i int) IDensityFn_NoiseBuilderContext
	ResourceReference() IResourceReferenceContext

	// IsDensityFn_NoiseContext differentiates from other interfaces.
	IsDensityFn_NoiseContext()
}

type DensityFn_NoiseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDensityFn_NoiseContext() *DensityFn_NoiseContext {
	var p = new(DensityFn_NoiseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_Noise
	return p
}

func InitEmptyDensityFn_NoiseContext(p *DensityFn_NoiseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_Noise
}

func (*DensityFn_NoiseContext) IsDensityFn_NoiseContext() {}

func NewDensityFn_NoiseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DensityFn_NoiseContext {
	var p = new(DensityFn_NoiseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_Noise

	return p
}

func (s *DensityFn_NoiseContext) GetParser() antlr.Parser { return s.parser }

func (s *DensityFn_NoiseContext) DensityFn_InlineNoise() IDensityFn_InlineNoiseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFn_InlineNoiseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFn_InlineNoiseContext)
}

func (s *DensityFn_NoiseContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *DensityFn_NoiseContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *DensityFn_NoiseContext) AllDensityFn_NoiseBuilder() []IDensityFn_NoiseBuilderContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDensityFn_NoiseBuilderContext); ok {
			len++
		}
	}

	tst := make([]IDensityFn_NoiseBuilderContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDensityFn_NoiseBuilderContext); ok {
			tst[i] = t.(IDensityFn_NoiseBuilderContext)
			i++
		}
	}

	return tst
}

func (s *DensityFn_NoiseContext) DensityFn_NoiseBuilder(i int) IDensityFn_NoiseBuilderContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFn_NoiseBuilderContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFn_NoiseBuilderContext)
}

func (s *DensityFn_NoiseContext) ResourceReference() IResourceReferenceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IResourceReferenceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IResourceReferenceContext)
}

func (s *DensityFn_NoiseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DensityFn_NoiseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DensityFn_NoiseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterDensityFn_Noise(s)
	}
}

func (s *DensityFn_NoiseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitDensityFn_Noise(s)
	}
}

func (p *MinecraftMetascriptParser) DensityFn_Noise() (localctx IDensityFn_NoiseContext) {
	localctx = NewDensityFn_NoiseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 144, MinecraftMetascriptParserRULE_densityFn_Noise)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(987)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 93, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(963)
			p.Match(MinecraftMetascriptParserT__48)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(967)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == MinecraftMetascriptParserNL {
			{
				p.SetState(964)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(969)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(970)
			p.Match(MinecraftMetascriptParserT__8)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(974)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == MinecraftMetascriptParserNL {
			{
				p.SetState(971)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(976)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}

		{
			p.SetState(977)
			p.ResourceReference()
		}

		p.SetState(981)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == MinecraftMetascriptParserNL {
			{
				p.SetState(978)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(983)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(984)
			p.Match(MinecraftMetascriptParserT__9)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		{
			p.SetState(986)
			p.DensityFn_InlineNoise()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	p.SetState(992)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 94, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(989)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(994)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 94, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1004)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserT__28 || _la == MinecraftMetascriptParserT__29 {
		{
			p.SetState(995)
			p.DensityFn_NoiseBuilder()
		}
		p.SetState(999)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 95, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(996)
					p.Match(MinecraftMetascriptParserNL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(1001)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 95, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}

		p.SetState(1006)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDensityFn_NoiseBuilderContext is an interface to support dynamic dispatch.
type IDensityFn_NoiseBuilderContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Builder_XZScale() IBuilder_XZScaleContext
	Builder_YScale() IBuilder_YScaleContext

	// IsDensityFn_NoiseBuilderContext differentiates from other interfaces.
	IsDensityFn_NoiseBuilderContext()
}

type DensityFn_NoiseBuilderContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDensityFn_NoiseBuilderContext() *DensityFn_NoiseBuilderContext {
	var p = new(DensityFn_NoiseBuilderContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_NoiseBuilder
	return p
}

func InitEmptyDensityFn_NoiseBuilderContext(p *DensityFn_NoiseBuilderContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_NoiseBuilder
}

func (*DensityFn_NoiseBuilderContext) IsDensityFn_NoiseBuilderContext() {}

func NewDensityFn_NoiseBuilderContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DensityFn_NoiseBuilderContext {
	var p = new(DensityFn_NoiseBuilderContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_NoiseBuilder

	return p
}

func (s *DensityFn_NoiseBuilderContext) GetParser() antlr.Parser { return s.parser }

func (s *DensityFn_NoiseBuilderContext) Builder_XZScale() IBuilder_XZScaleContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_XZScaleContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_XZScaleContext)
}

func (s *DensityFn_NoiseBuilderContext) Builder_YScale() IBuilder_YScaleContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_YScaleContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_YScaleContext)
}

func (s *DensityFn_NoiseBuilderContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DensityFn_NoiseBuilderContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DensityFn_NoiseBuilderContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterDensityFn_NoiseBuilder(s)
	}
}

func (s *DensityFn_NoiseBuilderContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitDensityFn_NoiseBuilder(s)
	}
}

func (p *MinecraftMetascriptParser) DensityFn_NoiseBuilder() (localctx IDensityFn_NoiseBuilderContext) {
	localctx = NewDensityFn_NoiseBuilderContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 146, MinecraftMetascriptParserRULE_densityFn_NoiseBuilder)
	p.SetState(1009)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case MinecraftMetascriptParserT__28:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1007)
			p.Builder_XZScale()
		}

	case MinecraftMetascriptParserT__29:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1008)
			p.Builder_YScale()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDensityFn_CacheContext is an interface to support dynamic dispatch.
type IDensityFn_CacheContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DensityFn_CacheKind() antlr.TerminalNode
	DensityFn() IDensityFnContext
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode

	// IsDensityFn_CacheContext differentiates from other interfaces.
	IsDensityFn_CacheContext()
}

type DensityFn_CacheContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDensityFn_CacheContext() *DensityFn_CacheContext {
	var p = new(DensityFn_CacheContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_Cache
	return p
}

func InitEmptyDensityFn_CacheContext(p *DensityFn_CacheContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_Cache
}

func (*DensityFn_CacheContext) IsDensityFn_CacheContext() {}

func NewDensityFn_CacheContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DensityFn_CacheContext {
	var p = new(DensityFn_CacheContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_Cache

	return p
}

func (s *DensityFn_CacheContext) GetParser() antlr.Parser { return s.parser }

func (s *DensityFn_CacheContext) DensityFn_CacheKind() antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserDensityFn_CacheKind, 0)
}

func (s *DensityFn_CacheContext) DensityFn() IDensityFnContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFnContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFnContext)
}

func (s *DensityFn_CacheContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *DensityFn_CacheContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *DensityFn_CacheContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DensityFn_CacheContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DensityFn_CacheContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterDensityFn_Cache(s)
	}
}

func (s *DensityFn_CacheContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitDensityFn_Cache(s)
	}
}

func (p *MinecraftMetascriptParser) DensityFn_Cache() (localctx IDensityFn_CacheContext) {
	localctx = NewDensityFn_CacheContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 148, MinecraftMetascriptParserRULE_densityFn_Cache)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1011)
		p.Match(MinecraftMetascriptParserT__65)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1015)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(1012)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1017)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1018)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1022)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(1019)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1024)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1025)
		p.Match(MinecraftMetascriptParserDensityFn_CacheKind)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1029)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(1026)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1031)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1032)
		p.Match(MinecraftMetascriptParserT__13)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1036)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 101, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1033)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1038)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 101, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	{
		p.SetState(1039)
		p.DensityFn()
	}
	p.SetState(1043)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(1040)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1045)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1046)
		p.Match(MinecraftMetascriptParserT__9)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDensityFn_DualInputContext is an interface to support dynamic dispatch.
type IDensityFn_DualInputContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllDensityFn() []IDensityFnContext
	DensityFn(i int) IDensityFnContext
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode

	// IsDensityFn_DualInputContext differentiates from other interfaces.
	IsDensityFn_DualInputContext()
}

type DensityFn_DualInputContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDensityFn_DualInputContext() *DensityFn_DualInputContext {
	var p = new(DensityFn_DualInputContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_DualInput
	return p
}

func InitEmptyDensityFn_DualInputContext(p *DensityFn_DualInputContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_DualInput
}

func (*DensityFn_DualInputContext) IsDensityFn_DualInputContext() {}

func NewDensityFn_DualInputContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DensityFn_DualInputContext {
	var p = new(DensityFn_DualInputContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_DualInput

	return p
}

func (s *DensityFn_DualInputContext) GetParser() antlr.Parser { return s.parser }

func (s *DensityFn_DualInputContext) AllDensityFn() []IDensityFnContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDensityFnContext); ok {
			len++
		}
	}

	tst := make([]IDensityFnContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDensityFnContext); ok {
			tst[i] = t.(IDensityFnContext)
			i++
		}
	}

	return tst
}

func (s *DensityFn_DualInputContext) DensityFn(i int) IDensityFnContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFnContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFnContext)
}

func (s *DensityFn_DualInputContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *DensityFn_DualInputContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *DensityFn_DualInputContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DensityFn_DualInputContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DensityFn_DualInputContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterDensityFn_DualInput(s)
	}
}

func (s *DensityFn_DualInputContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitDensityFn_DualInput(s)
	}
}

func (p *MinecraftMetascriptParser) DensityFn_DualInput() (localctx IDensityFn_DualInputContext) {
	localctx = NewDensityFn_DualInputContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 150, MinecraftMetascriptParserRULE_densityFn_DualInput)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1051)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case MinecraftMetascriptParserT__8, MinecraftMetascriptParserNL:

	case MinecraftMetascriptParserT__66:
		{
			p.SetState(1049)
			p.Match(MinecraftMetascriptParserT__66)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case MinecraftMetascriptParserT__67:
		{
			p.SetState(1050)
			p.Match(MinecraftMetascriptParserT__67)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}
	p.SetState(1056)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(1053)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1058)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1059)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1063)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 105, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1060)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1065)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 105, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	{
		p.SetState(1066)
		p.DensityFn()
	}
	{
		p.SetState(1067)
		p.Match(MinecraftMetascriptParserT__13)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1071)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 106, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1068)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1073)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 106, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	{
		p.SetState(1074)
		p.DensityFn()
	}
	p.SetState(1078)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(1075)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1080)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1081)
		p.Match(MinecraftMetascriptParserT__9)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDensityFn_OldBlendedNoiseContext is an interface to support dynamic dispatch.
type IDensityFn_OldBlendedNoiseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode
	AllDensityFn_OldBlendedNoiseBuilder() []IDensityFn_OldBlendedNoiseBuilderContext
	DensityFn_OldBlendedNoiseBuilder(i int) IDensityFn_OldBlendedNoiseBuilderContext

	// IsDensityFn_OldBlendedNoiseContext differentiates from other interfaces.
	IsDensityFn_OldBlendedNoiseContext()
}

type DensityFn_OldBlendedNoiseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDensityFn_OldBlendedNoiseContext() *DensityFn_OldBlendedNoiseContext {
	var p = new(DensityFn_OldBlendedNoiseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_OldBlendedNoise
	return p
}

func InitEmptyDensityFn_OldBlendedNoiseContext(p *DensityFn_OldBlendedNoiseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_OldBlendedNoise
}

func (*DensityFn_OldBlendedNoiseContext) IsDensityFn_OldBlendedNoiseContext() {}

func NewDensityFn_OldBlendedNoiseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DensityFn_OldBlendedNoiseContext {
	var p = new(DensityFn_OldBlendedNoiseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_OldBlendedNoise

	return p
}

func (s *DensityFn_OldBlendedNoiseContext) GetParser() antlr.Parser { return s.parser }

func (s *DensityFn_OldBlendedNoiseContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *DensityFn_OldBlendedNoiseContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *DensityFn_OldBlendedNoiseContext) AllDensityFn_OldBlendedNoiseBuilder() []IDensityFn_OldBlendedNoiseBuilderContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDensityFn_OldBlendedNoiseBuilderContext); ok {
			len++
		}
	}

	tst := make([]IDensityFn_OldBlendedNoiseBuilderContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDensityFn_OldBlendedNoiseBuilderContext); ok {
			tst[i] = t.(IDensityFn_OldBlendedNoiseBuilderContext)
			i++
		}
	}

	return tst
}

func (s *DensityFn_OldBlendedNoiseContext) DensityFn_OldBlendedNoiseBuilder(i int) IDensityFn_OldBlendedNoiseBuilderContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFn_OldBlendedNoiseBuilderContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFn_OldBlendedNoiseBuilderContext)
}

func (s *DensityFn_OldBlendedNoiseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DensityFn_OldBlendedNoiseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DensityFn_OldBlendedNoiseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterDensityFn_OldBlendedNoise(s)
	}
}

func (s *DensityFn_OldBlendedNoiseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitDensityFn_OldBlendedNoise(s)
	}
}

func (p *MinecraftMetascriptParser) DensityFn_OldBlendedNoise() (localctx IDensityFn_OldBlendedNoiseContext) {
	localctx = NewDensityFn_OldBlendedNoiseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 152, MinecraftMetascriptParserRULE_densityFn_OldBlendedNoise)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1083)
		p.Match(MinecraftMetascriptParserT__68)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1087)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(1084)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1089)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1090)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1094)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(1091)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1096)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1097)
		p.Match(MinecraftMetascriptParserT__9)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1101)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 110, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1098)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1103)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 110, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1113)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&25232932864) != 0 {
		{
			p.SetState(1104)
			p.DensityFn_OldBlendedNoiseBuilder()
		}
		p.SetState(1108)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 111, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1105)
					p.Match(MinecraftMetascriptParserNL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(1110)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 111, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}

		p.SetState(1115)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDensityFn_OldBlendedNoiseBuilderContext is an interface to support dynamic dispatch.
type IDensityFn_OldBlendedNoiseBuilderContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Builder_XZScale() IBuilder_XZScaleContext
	Builder_YScale() IBuilder_YScaleContext
	Builder_XZFactor() IBuilder_XZFactorContext
	Builder_YFactor() IBuilder_YFactorContext
	Builder_Smear() IBuilder_SmearContext

	// IsDensityFn_OldBlendedNoiseBuilderContext differentiates from other interfaces.
	IsDensityFn_OldBlendedNoiseBuilderContext()
}

type DensityFn_OldBlendedNoiseBuilderContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDensityFn_OldBlendedNoiseBuilderContext() *DensityFn_OldBlendedNoiseBuilderContext {
	var p = new(DensityFn_OldBlendedNoiseBuilderContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_OldBlendedNoiseBuilder
	return p
}

func InitEmptyDensityFn_OldBlendedNoiseBuilderContext(p *DensityFn_OldBlendedNoiseBuilderContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_OldBlendedNoiseBuilder
}

func (*DensityFn_OldBlendedNoiseBuilderContext) IsDensityFn_OldBlendedNoiseBuilderContext() {}

func NewDensityFn_OldBlendedNoiseBuilderContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DensityFn_OldBlendedNoiseBuilderContext {
	var p = new(DensityFn_OldBlendedNoiseBuilderContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_OldBlendedNoiseBuilder

	return p
}

func (s *DensityFn_OldBlendedNoiseBuilderContext) GetParser() antlr.Parser { return s.parser }

func (s *DensityFn_OldBlendedNoiseBuilderContext) Builder_XZScale() IBuilder_XZScaleContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_XZScaleContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_XZScaleContext)
}

func (s *DensityFn_OldBlendedNoiseBuilderContext) Builder_YScale() IBuilder_YScaleContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_YScaleContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_YScaleContext)
}

func (s *DensityFn_OldBlendedNoiseBuilderContext) Builder_XZFactor() IBuilder_XZFactorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_XZFactorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_XZFactorContext)
}

func (s *DensityFn_OldBlendedNoiseBuilderContext) Builder_YFactor() IBuilder_YFactorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_YFactorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_YFactorContext)
}

func (s *DensityFn_OldBlendedNoiseBuilderContext) Builder_Smear() IBuilder_SmearContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_SmearContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_SmearContext)
}

func (s *DensityFn_OldBlendedNoiseBuilderContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DensityFn_OldBlendedNoiseBuilderContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DensityFn_OldBlendedNoiseBuilderContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterDensityFn_OldBlendedNoiseBuilder(s)
	}
}

func (s *DensityFn_OldBlendedNoiseBuilderContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitDensityFn_OldBlendedNoiseBuilder(s)
	}
}

func (p *MinecraftMetascriptParser) DensityFn_OldBlendedNoiseBuilder() (localctx IDensityFn_OldBlendedNoiseBuilderContext) {
	localctx = NewDensityFn_OldBlendedNoiseBuilderContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 154, MinecraftMetascriptParserRULE_densityFn_OldBlendedNoiseBuilder)
	p.SetState(1121)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case MinecraftMetascriptParserT__28:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1116)
			p.Builder_XZScale()
		}

	case MinecraftMetascriptParserT__29:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1117)
			p.Builder_YScale()
		}

	case MinecraftMetascriptParserT__30:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1118)
			p.Builder_XZFactor()
		}

	case MinecraftMetascriptParserT__31:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1119)
			p.Builder_YFactor()
		}

	case MinecraftMetascriptParserT__33:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1120)
			p.Builder_Smear()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDensityFn_WierdScaledSamplerContext is an interface to support dynamic dispatch.
type IDensityFn_WierdScaledSamplerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DensityFn() IDensityFnContext
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode
	AllDensityFn_WierdScaledSamplerBuilder() []IDensityFn_WierdScaledSamplerBuilderContext
	DensityFn_WierdScaledSamplerBuilder(i int) IDensityFn_WierdScaledSamplerBuilderContext

	// IsDensityFn_WierdScaledSamplerContext differentiates from other interfaces.
	IsDensityFn_WierdScaledSamplerContext()
}

type DensityFn_WierdScaledSamplerContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDensityFn_WierdScaledSamplerContext() *DensityFn_WierdScaledSamplerContext {
	var p = new(DensityFn_WierdScaledSamplerContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_WierdScaledSampler
	return p
}

func InitEmptyDensityFn_WierdScaledSamplerContext(p *DensityFn_WierdScaledSamplerContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_WierdScaledSampler
}

func (*DensityFn_WierdScaledSamplerContext) IsDensityFn_WierdScaledSamplerContext() {}

func NewDensityFn_WierdScaledSamplerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DensityFn_WierdScaledSamplerContext {
	var p = new(DensityFn_WierdScaledSamplerContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_WierdScaledSampler

	return p
}

func (s *DensityFn_WierdScaledSamplerContext) GetParser() antlr.Parser { return s.parser }

func (s *DensityFn_WierdScaledSamplerContext) DensityFn() IDensityFnContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFnContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFnContext)
}

func (s *DensityFn_WierdScaledSamplerContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *DensityFn_WierdScaledSamplerContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *DensityFn_WierdScaledSamplerContext) AllDensityFn_WierdScaledSamplerBuilder() []IDensityFn_WierdScaledSamplerBuilderContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDensityFn_WierdScaledSamplerBuilderContext); ok {
			len++
		}
	}

	tst := make([]IDensityFn_WierdScaledSamplerBuilderContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDensityFn_WierdScaledSamplerBuilderContext); ok {
			tst[i] = t.(IDensityFn_WierdScaledSamplerBuilderContext)
			i++
		}
	}

	return tst
}

func (s *DensityFn_WierdScaledSamplerContext) DensityFn_WierdScaledSamplerBuilder(i int) IDensityFn_WierdScaledSamplerBuilderContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFn_WierdScaledSamplerBuilderContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFn_WierdScaledSamplerBuilderContext)
}

func (s *DensityFn_WierdScaledSamplerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DensityFn_WierdScaledSamplerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DensityFn_WierdScaledSamplerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterDensityFn_WierdScaledSampler(s)
	}
}

func (s *DensityFn_WierdScaledSamplerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitDensityFn_WierdScaledSampler(s)
	}
}

func (p *MinecraftMetascriptParser) DensityFn_WierdScaledSampler() (localctx IDensityFn_WierdScaledSamplerContext) {
	localctx = NewDensityFn_WierdScaledSamplerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 156, MinecraftMetascriptParserRULE_densityFn_WierdScaledSampler)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1123)
		p.Match(MinecraftMetascriptParserT__69)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1127)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(1124)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1129)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1130)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1134)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 115, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1131)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1136)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 115, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	{
		p.SetState(1137)
		p.DensityFn()
	}
	p.SetState(1141)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(1138)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1143)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1144)
		p.Match(MinecraftMetascriptParserT__9)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1148)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 117, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1145)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1150)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 117, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1160)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&111669149696) != 0 {
		{
			p.SetState(1151)
			p.DensityFn_WierdScaledSamplerBuilder()
		}
		p.SetState(1155)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 118, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1152)
					p.Match(MinecraftMetascriptParserNL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(1157)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 118, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}

		p.SetState(1162)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDensityFn_WierdScaledSamplerBuilderContext is an interface to support dynamic dispatch.
type IDensityFn_WierdScaledSamplerBuilderContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Builder_Type1() IBuilder_Type1Context
	Builder_Type2() IBuilder_Type2Context
	Builder_Noise() IBuilder_NoiseContext

	// IsDensityFn_WierdScaledSamplerBuilderContext differentiates from other interfaces.
	IsDensityFn_WierdScaledSamplerBuilderContext()
}

type DensityFn_WierdScaledSamplerBuilderContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDensityFn_WierdScaledSamplerBuilderContext() *DensityFn_WierdScaledSamplerBuilderContext {
	var p = new(DensityFn_WierdScaledSamplerBuilderContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_WierdScaledSamplerBuilder
	return p
}

func InitEmptyDensityFn_WierdScaledSamplerBuilderContext(p *DensityFn_WierdScaledSamplerBuilderContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_WierdScaledSamplerBuilder
}

func (*DensityFn_WierdScaledSamplerBuilderContext) IsDensityFn_WierdScaledSamplerBuilderContext() {}

func NewDensityFn_WierdScaledSamplerBuilderContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DensityFn_WierdScaledSamplerBuilderContext {
	var p = new(DensityFn_WierdScaledSamplerBuilderContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_WierdScaledSamplerBuilder

	return p
}

func (s *DensityFn_WierdScaledSamplerBuilderContext) GetParser() antlr.Parser { return s.parser }

func (s *DensityFn_WierdScaledSamplerBuilderContext) Builder_Type1() IBuilder_Type1Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_Type1Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_Type1Context)
}

func (s *DensityFn_WierdScaledSamplerBuilderContext) Builder_Type2() IBuilder_Type2Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_Type2Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_Type2Context)
}

func (s *DensityFn_WierdScaledSamplerBuilderContext) Builder_Noise() IBuilder_NoiseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_NoiseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_NoiseContext)
}

func (s *DensityFn_WierdScaledSamplerBuilderContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DensityFn_WierdScaledSamplerBuilderContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DensityFn_WierdScaledSamplerBuilderContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterDensityFn_WierdScaledSamplerBuilder(s)
	}
}

func (s *DensityFn_WierdScaledSamplerBuilderContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitDensityFn_WierdScaledSamplerBuilder(s)
	}
}

func (p *MinecraftMetascriptParser) DensityFn_WierdScaledSamplerBuilder() (localctx IDensityFn_WierdScaledSamplerBuilderContext) {
	localctx = NewDensityFn_WierdScaledSamplerBuilderContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 158, MinecraftMetascriptParserRULE_densityFn_WierdScaledSamplerBuilder)
	p.SetState(1166)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case MinecraftMetascriptParserT__34:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1163)
			p.Builder_Type1()
		}

	case MinecraftMetascriptParserT__35:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1164)
			p.Builder_Type2()
		}

	case MinecraftMetascriptParserT__32:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1165)
			p.Builder_Noise()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDensityFn_ShiftedNoiseContext is an interface to support dynamic dispatch.
type IDensityFn_ShiftedNoiseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode
	AllDensityFn_ShiftedNoiseBuilder() []IDensityFn_ShiftedNoiseBuilderContext
	DensityFn_ShiftedNoiseBuilder(i int) IDensityFn_ShiftedNoiseBuilderContext

	// IsDensityFn_ShiftedNoiseContext differentiates from other interfaces.
	IsDensityFn_ShiftedNoiseContext()
}

type DensityFn_ShiftedNoiseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDensityFn_ShiftedNoiseContext() *DensityFn_ShiftedNoiseContext {
	var p = new(DensityFn_ShiftedNoiseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_ShiftedNoise
	return p
}

func InitEmptyDensityFn_ShiftedNoiseContext(p *DensityFn_ShiftedNoiseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_ShiftedNoise
}

func (*DensityFn_ShiftedNoiseContext) IsDensityFn_ShiftedNoiseContext() {}

func NewDensityFn_ShiftedNoiseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DensityFn_ShiftedNoiseContext {
	var p = new(DensityFn_ShiftedNoiseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_ShiftedNoise

	return p
}

func (s *DensityFn_ShiftedNoiseContext) GetParser() antlr.Parser { return s.parser }

func (s *DensityFn_ShiftedNoiseContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *DensityFn_ShiftedNoiseContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *DensityFn_ShiftedNoiseContext) AllDensityFn_ShiftedNoiseBuilder() []IDensityFn_ShiftedNoiseBuilderContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDensityFn_ShiftedNoiseBuilderContext); ok {
			len++
		}
	}

	tst := make([]IDensityFn_ShiftedNoiseBuilderContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDensityFn_ShiftedNoiseBuilderContext); ok {
			tst[i] = t.(IDensityFn_ShiftedNoiseBuilderContext)
			i++
		}
	}

	return tst
}

func (s *DensityFn_ShiftedNoiseContext) DensityFn_ShiftedNoiseBuilder(i int) IDensityFn_ShiftedNoiseBuilderContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFn_ShiftedNoiseBuilderContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFn_ShiftedNoiseBuilderContext)
}

func (s *DensityFn_ShiftedNoiseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DensityFn_ShiftedNoiseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DensityFn_ShiftedNoiseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterDensityFn_ShiftedNoise(s)
	}
}

func (s *DensityFn_ShiftedNoiseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitDensityFn_ShiftedNoise(s)
	}
}

func (p *MinecraftMetascriptParser) DensityFn_ShiftedNoise() (localctx IDensityFn_ShiftedNoiseContext) {
	localctx = NewDensityFn_ShiftedNoiseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 160, MinecraftMetascriptParserRULE_densityFn_ShiftedNoise)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1168)
		p.Match(MinecraftMetascriptParserT__70)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1172)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(1169)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1174)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1175)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1179)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(1176)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1181)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1182)
		p.Match(MinecraftMetascriptParserT__9)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1186)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 123, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1183)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1188)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 123, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1198)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&147639500800) != 0 {
		{
			p.SetState(1189)
			p.DensityFn_ShiftedNoiseBuilder()
		}
		p.SetState(1193)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 124, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1190)
					p.Match(MinecraftMetascriptParserNL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(1195)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 124, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}

		p.SetState(1200)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDensityFn_ShiftedNoiseBuilderContext is an interface to support dynamic dispatch.
type IDensityFn_ShiftedNoiseBuilderContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Builder_Noise() IBuilder_NoiseContext
	Builder_XZScale() IBuilder_XZScaleContext
	Builder_YScale() IBuilder_YScaleContext
	Builder_Shift() IBuilder_ShiftContext

	// IsDensityFn_ShiftedNoiseBuilderContext differentiates from other interfaces.
	IsDensityFn_ShiftedNoiseBuilderContext()
}

type DensityFn_ShiftedNoiseBuilderContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDensityFn_ShiftedNoiseBuilderContext() *DensityFn_ShiftedNoiseBuilderContext {
	var p = new(DensityFn_ShiftedNoiseBuilderContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_ShiftedNoiseBuilder
	return p
}

func InitEmptyDensityFn_ShiftedNoiseBuilderContext(p *DensityFn_ShiftedNoiseBuilderContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_ShiftedNoiseBuilder
}

func (*DensityFn_ShiftedNoiseBuilderContext) IsDensityFn_ShiftedNoiseBuilderContext() {}

func NewDensityFn_ShiftedNoiseBuilderContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DensityFn_ShiftedNoiseBuilderContext {
	var p = new(DensityFn_ShiftedNoiseBuilderContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_ShiftedNoiseBuilder

	return p
}

func (s *DensityFn_ShiftedNoiseBuilderContext) GetParser() antlr.Parser { return s.parser }

func (s *DensityFn_ShiftedNoiseBuilderContext) Builder_Noise() IBuilder_NoiseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_NoiseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_NoiseContext)
}

func (s *DensityFn_ShiftedNoiseBuilderContext) Builder_XZScale() IBuilder_XZScaleContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_XZScaleContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_XZScaleContext)
}

func (s *DensityFn_ShiftedNoiseBuilderContext) Builder_YScale() IBuilder_YScaleContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_YScaleContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_YScaleContext)
}

func (s *DensityFn_ShiftedNoiseBuilderContext) Builder_Shift() IBuilder_ShiftContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_ShiftContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_ShiftContext)
}

func (s *DensityFn_ShiftedNoiseBuilderContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DensityFn_ShiftedNoiseBuilderContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DensityFn_ShiftedNoiseBuilderContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterDensityFn_ShiftedNoiseBuilder(s)
	}
}

func (s *DensityFn_ShiftedNoiseBuilderContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitDensityFn_ShiftedNoiseBuilder(s)
	}
}

func (p *MinecraftMetascriptParser) DensityFn_ShiftedNoiseBuilder() (localctx IDensityFn_ShiftedNoiseBuilderContext) {
	localctx = NewDensityFn_ShiftedNoiseBuilderContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 162, MinecraftMetascriptParserRULE_densityFn_ShiftedNoiseBuilder)
	p.SetState(1205)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case MinecraftMetascriptParserT__32:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1201)
			p.Builder_Noise()
		}

	case MinecraftMetascriptParserT__28:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1202)
			p.Builder_XZScale()
		}

	case MinecraftMetascriptParserT__29:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1203)
			p.Builder_YScale()
		}

	case MinecraftMetascriptParserT__36:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1204)
			p.Builder_Shift()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDensityFn_RangeChoiceContext is an interface to support dynamic dispatch.
type IDensityFn_RangeChoiceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DensityFn() IDensityFnContext
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode
	AllDensityFn_RangeChoiceBuilder() []IDensityFn_RangeChoiceBuilderContext
	DensityFn_RangeChoiceBuilder(i int) IDensityFn_RangeChoiceBuilderContext

	// IsDensityFn_RangeChoiceContext differentiates from other interfaces.
	IsDensityFn_RangeChoiceContext()
}

type DensityFn_RangeChoiceContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDensityFn_RangeChoiceContext() *DensityFn_RangeChoiceContext {
	var p = new(DensityFn_RangeChoiceContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_RangeChoice
	return p
}

func InitEmptyDensityFn_RangeChoiceContext(p *DensityFn_RangeChoiceContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_RangeChoice
}

func (*DensityFn_RangeChoiceContext) IsDensityFn_RangeChoiceContext() {}

func NewDensityFn_RangeChoiceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DensityFn_RangeChoiceContext {
	var p = new(DensityFn_RangeChoiceContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_RangeChoice

	return p
}

func (s *DensityFn_RangeChoiceContext) GetParser() antlr.Parser { return s.parser }

func (s *DensityFn_RangeChoiceContext) DensityFn() IDensityFnContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFnContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFnContext)
}

func (s *DensityFn_RangeChoiceContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *DensityFn_RangeChoiceContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *DensityFn_RangeChoiceContext) AllDensityFn_RangeChoiceBuilder() []IDensityFn_RangeChoiceBuilderContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDensityFn_RangeChoiceBuilderContext); ok {
			len++
		}
	}

	tst := make([]IDensityFn_RangeChoiceBuilderContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDensityFn_RangeChoiceBuilderContext); ok {
			tst[i] = t.(IDensityFn_RangeChoiceBuilderContext)
			i++
		}
	}

	return tst
}

func (s *DensityFn_RangeChoiceContext) DensityFn_RangeChoiceBuilder(i int) IDensityFn_RangeChoiceBuilderContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFn_RangeChoiceBuilderContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFn_RangeChoiceBuilderContext)
}

func (s *DensityFn_RangeChoiceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DensityFn_RangeChoiceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DensityFn_RangeChoiceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterDensityFn_RangeChoice(s)
	}
}

func (s *DensityFn_RangeChoiceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitDensityFn_RangeChoice(s)
	}
}

func (p *MinecraftMetascriptParser) DensityFn_RangeChoice() (localctx IDensityFn_RangeChoiceContext) {
	localctx = NewDensityFn_RangeChoiceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 164, MinecraftMetascriptParserRULE_densityFn_RangeChoice)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1207)
		p.Match(MinecraftMetascriptParserT__71)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1211)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(1208)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1213)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1214)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1215)
		p.DensityFn()
	}
	{
		p.SetState(1216)
		p.Match(MinecraftMetascriptParserT__9)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1220)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 128, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1217)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1222)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 128, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1232)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&224300372066304) != 0 {
		{
			p.SetState(1223)
			p.DensityFn_RangeChoiceBuilder()
		}
		p.SetState(1227)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 129, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1224)
					p.Match(MinecraftMetascriptParserNL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(1229)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 129, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}

		p.SetState(1234)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDensityFn_RangeChoiceBuilderContext is an interface to support dynamic dispatch.
type IDensityFn_RangeChoiceBuilderContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Builder_Min() IBuilder_MinContext
	Builder_Max() IBuilder_MaxContext
	Builder_InRange() IBuilder_InRangeContext
	Builder_OutRange() IBuilder_OutRangeContext

	// IsDensityFn_RangeChoiceBuilderContext differentiates from other interfaces.
	IsDensityFn_RangeChoiceBuilderContext()
}

type DensityFn_RangeChoiceBuilderContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDensityFn_RangeChoiceBuilderContext() *DensityFn_RangeChoiceBuilderContext {
	var p = new(DensityFn_RangeChoiceBuilderContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_RangeChoiceBuilder
	return p
}

func InitEmptyDensityFn_RangeChoiceBuilderContext(p *DensityFn_RangeChoiceBuilderContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_RangeChoiceBuilder
}

func (*DensityFn_RangeChoiceBuilderContext) IsDensityFn_RangeChoiceBuilderContext() {}

func NewDensityFn_RangeChoiceBuilderContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DensityFn_RangeChoiceBuilderContext {
	var p = new(DensityFn_RangeChoiceBuilderContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_RangeChoiceBuilder

	return p
}

func (s *DensityFn_RangeChoiceBuilderContext) GetParser() antlr.Parser { return s.parser }

func (s *DensityFn_RangeChoiceBuilderContext) Builder_Min() IBuilder_MinContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_MinContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_MinContext)
}

func (s *DensityFn_RangeChoiceBuilderContext) Builder_Max() IBuilder_MaxContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_MaxContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_MaxContext)
}

func (s *DensityFn_RangeChoiceBuilderContext) Builder_InRange() IBuilder_InRangeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_InRangeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_InRangeContext)
}

func (s *DensityFn_RangeChoiceBuilderContext) Builder_OutRange() IBuilder_OutRangeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_OutRangeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_OutRangeContext)
}

func (s *DensityFn_RangeChoiceBuilderContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DensityFn_RangeChoiceBuilderContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DensityFn_RangeChoiceBuilderContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterDensityFn_RangeChoiceBuilder(s)
	}
}

func (s *DensityFn_RangeChoiceBuilderContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitDensityFn_RangeChoiceBuilder(s)
	}
}

func (p *MinecraftMetascriptParser) DensityFn_RangeChoiceBuilder() (localctx IDensityFn_RangeChoiceBuilderContext) {
	localctx = NewDensityFn_RangeChoiceBuilderContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 166, MinecraftMetascriptParserRULE_densityFn_RangeChoiceBuilder)
	p.SetState(1239)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case MinecraftMetascriptParserT__41:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1235)
			p.Builder_Min()
		}

	case MinecraftMetascriptParserT__42:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1236)
			p.Builder_Max()
		}

	case MinecraftMetascriptParserT__45:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1237)
			p.Builder_InRange()
		}

	case MinecraftMetascriptParserT__46:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1238)
			p.Builder_OutRange()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDensityFn_ClampContext is an interface to support dynamic dispatch.
type IDensityFn_ClampContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DensityFn() IDensityFnContext
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode
	AllDensityFn_ClampBuilder() []IDensityFn_ClampBuilderContext
	DensityFn_ClampBuilder(i int) IDensityFn_ClampBuilderContext

	// IsDensityFn_ClampContext differentiates from other interfaces.
	IsDensityFn_ClampContext()
}

type DensityFn_ClampContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDensityFn_ClampContext() *DensityFn_ClampContext {
	var p = new(DensityFn_ClampContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_Clamp
	return p
}

func InitEmptyDensityFn_ClampContext(p *DensityFn_ClampContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_Clamp
}

func (*DensityFn_ClampContext) IsDensityFn_ClampContext() {}

func NewDensityFn_ClampContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DensityFn_ClampContext {
	var p = new(DensityFn_ClampContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_Clamp

	return p
}

func (s *DensityFn_ClampContext) GetParser() antlr.Parser { return s.parser }

func (s *DensityFn_ClampContext) DensityFn() IDensityFnContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFnContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFnContext)
}

func (s *DensityFn_ClampContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *DensityFn_ClampContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *DensityFn_ClampContext) AllDensityFn_ClampBuilder() []IDensityFn_ClampBuilderContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDensityFn_ClampBuilderContext); ok {
			len++
		}
	}

	tst := make([]IDensityFn_ClampBuilderContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDensityFn_ClampBuilderContext); ok {
			tst[i] = t.(IDensityFn_ClampBuilderContext)
			i++
		}
	}

	return tst
}

func (s *DensityFn_ClampContext) DensityFn_ClampBuilder(i int) IDensityFn_ClampBuilderContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFn_ClampBuilderContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFn_ClampBuilderContext)
}

func (s *DensityFn_ClampContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DensityFn_ClampContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DensityFn_ClampContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterDensityFn_Clamp(s)
	}
}

func (s *DensityFn_ClampContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitDensityFn_Clamp(s)
	}
}

func (p *MinecraftMetascriptParser) DensityFn_Clamp() (localctx IDensityFn_ClampContext) {
	localctx = NewDensityFn_ClampContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 168, MinecraftMetascriptParserRULE_densityFn_Clamp)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1241)
		p.Match(MinecraftMetascriptParserT__72)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1245)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(1242)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1247)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1248)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1249)
		p.DensityFn()
	}
	{
		p.SetState(1250)
		p.Match(MinecraftMetascriptParserT__9)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1254)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 133, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1251)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1256)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 133, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1266)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserT__41 || _la == MinecraftMetascriptParserT__42 {
		{
			p.SetState(1257)
			p.DensityFn_ClampBuilder()
		}
		p.SetState(1261)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 134, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1258)
					p.Match(MinecraftMetascriptParserNL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(1263)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 134, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}

		p.SetState(1268)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDensityFn_ClampBuilderContext is an interface to support dynamic dispatch.
type IDensityFn_ClampBuilderContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Builder_Min() IBuilder_MinContext
	Builder_Max() IBuilder_MaxContext

	// IsDensityFn_ClampBuilderContext differentiates from other interfaces.
	IsDensityFn_ClampBuilderContext()
}

type DensityFn_ClampBuilderContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDensityFn_ClampBuilderContext() *DensityFn_ClampBuilderContext {
	var p = new(DensityFn_ClampBuilderContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_ClampBuilder
	return p
}

func InitEmptyDensityFn_ClampBuilderContext(p *DensityFn_ClampBuilderContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_ClampBuilder
}

func (*DensityFn_ClampBuilderContext) IsDensityFn_ClampBuilderContext() {}

func NewDensityFn_ClampBuilderContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DensityFn_ClampBuilderContext {
	var p = new(DensityFn_ClampBuilderContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_ClampBuilder

	return p
}

func (s *DensityFn_ClampBuilderContext) GetParser() antlr.Parser { return s.parser }

func (s *DensityFn_ClampBuilderContext) Builder_Min() IBuilder_MinContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_MinContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_MinContext)
}

func (s *DensityFn_ClampBuilderContext) Builder_Max() IBuilder_MaxContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_MaxContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_MaxContext)
}

func (s *DensityFn_ClampBuilderContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DensityFn_ClampBuilderContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DensityFn_ClampBuilderContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterDensityFn_ClampBuilder(s)
	}
}

func (s *DensityFn_ClampBuilderContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitDensityFn_ClampBuilder(s)
	}
}

func (p *MinecraftMetascriptParser) DensityFn_ClampBuilder() (localctx IDensityFn_ClampBuilderContext) {
	localctx = NewDensityFn_ClampBuilderContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 170, MinecraftMetascriptParserRULE_densityFn_ClampBuilder)
	p.SetState(1271)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case MinecraftMetascriptParserT__41:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1269)
			p.Builder_Min()
		}

	case MinecraftMetascriptParserT__42:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1270)
			p.Builder_Max()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDensityFn_YClampedGradientContext is an interface to support dynamic dispatch.
type IDensityFn_YClampedGradientContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode
	AllDensityFn_YClampedGradientBuilder() []IDensityFn_YClampedGradientBuilderContext
	DensityFn_YClampedGradientBuilder(i int) IDensityFn_YClampedGradientBuilderContext

	// IsDensityFn_YClampedGradientContext differentiates from other interfaces.
	IsDensityFn_YClampedGradientContext()
}

type DensityFn_YClampedGradientContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDensityFn_YClampedGradientContext() *DensityFn_YClampedGradientContext {
	var p = new(DensityFn_YClampedGradientContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_YClampedGradient
	return p
}

func InitEmptyDensityFn_YClampedGradientContext(p *DensityFn_YClampedGradientContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_YClampedGradient
}

func (*DensityFn_YClampedGradientContext) IsDensityFn_YClampedGradientContext() {}

func NewDensityFn_YClampedGradientContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DensityFn_YClampedGradientContext {
	var p = new(DensityFn_YClampedGradientContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_YClampedGradient

	return p
}

func (s *DensityFn_YClampedGradientContext) GetParser() antlr.Parser { return s.parser }

func (s *DensityFn_YClampedGradientContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *DensityFn_YClampedGradientContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *DensityFn_YClampedGradientContext) AllDensityFn_YClampedGradientBuilder() []IDensityFn_YClampedGradientBuilderContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDensityFn_YClampedGradientBuilderContext); ok {
			len++
		}
	}

	tst := make([]IDensityFn_YClampedGradientBuilderContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDensityFn_YClampedGradientBuilderContext); ok {
			tst[i] = t.(IDensityFn_YClampedGradientBuilderContext)
			i++
		}
	}

	return tst
}

func (s *DensityFn_YClampedGradientContext) DensityFn_YClampedGradientBuilder(i int) IDensityFn_YClampedGradientBuilderContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFn_YClampedGradientBuilderContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFn_YClampedGradientBuilderContext)
}

func (s *DensityFn_YClampedGradientContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DensityFn_YClampedGradientContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DensityFn_YClampedGradientContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterDensityFn_YClampedGradient(s)
	}
}

func (s *DensityFn_YClampedGradientContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitDensityFn_YClampedGradient(s)
	}
}

func (p *MinecraftMetascriptParser) DensityFn_YClampedGradient() (localctx IDensityFn_YClampedGradientContext) {
	localctx = NewDensityFn_YClampedGradientContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 172, MinecraftMetascriptParserRULE_densityFn_YClampedGradient)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1273)
		p.Match(MinecraftMetascriptParserT__73)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1277)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(1274)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1279)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1280)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1284)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(1281)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1286)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1287)
		p.Match(MinecraftMetascriptParserT__9)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1291)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 139, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1288)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1293)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 139, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1303)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&65970697666560) != 0 {
		{
			p.SetState(1294)
			p.DensityFn_YClampedGradientBuilder()
		}
		p.SetState(1298)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 140, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1295)
					p.Match(MinecraftMetascriptParserNL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(1300)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 140, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}

		p.SetState(1305)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDensityFn_YClampedGradientBuilderContext is an interface to support dynamic dispatch.
type IDensityFn_YClampedGradientBuilderContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Builder_TopLiteral() IBuilder_TopLiteralContext
	Builder_BottomLiteral() IBuilder_BottomLiteralContext
	Builder_Min() IBuilder_MinContext
	Builder_Max() IBuilder_MaxContext

	// IsDensityFn_YClampedGradientBuilderContext differentiates from other interfaces.
	IsDensityFn_YClampedGradientBuilderContext()
}

type DensityFn_YClampedGradientBuilderContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDensityFn_YClampedGradientBuilderContext() *DensityFn_YClampedGradientBuilderContext {
	var p = new(DensityFn_YClampedGradientBuilderContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_YClampedGradientBuilder
	return p
}

func InitEmptyDensityFn_YClampedGradientBuilderContext(p *DensityFn_YClampedGradientBuilderContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_YClampedGradientBuilder
}

func (*DensityFn_YClampedGradientBuilderContext) IsDensityFn_YClampedGradientBuilderContext() {}

func NewDensityFn_YClampedGradientBuilderContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DensityFn_YClampedGradientBuilderContext {
	var p = new(DensityFn_YClampedGradientBuilderContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_YClampedGradientBuilder

	return p
}

func (s *DensityFn_YClampedGradientBuilderContext) GetParser() antlr.Parser { return s.parser }

func (s *DensityFn_YClampedGradientBuilderContext) Builder_TopLiteral() IBuilder_TopLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_TopLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_TopLiteralContext)
}

func (s *DensityFn_YClampedGradientBuilderContext) Builder_BottomLiteral() IBuilder_BottomLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_BottomLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_BottomLiteralContext)
}

func (s *DensityFn_YClampedGradientBuilderContext) Builder_Min() IBuilder_MinContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_MinContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_MinContext)
}

func (s *DensityFn_YClampedGradientBuilderContext) Builder_Max() IBuilder_MaxContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_MaxContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_MaxContext)
}

func (s *DensityFn_YClampedGradientBuilderContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DensityFn_YClampedGradientBuilderContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DensityFn_YClampedGradientBuilderContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterDensityFn_YClampedGradientBuilder(s)
	}
}

func (s *DensityFn_YClampedGradientBuilderContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitDensityFn_YClampedGradientBuilder(s)
	}
}

func (p *MinecraftMetascriptParser) DensityFn_YClampedGradientBuilder() (localctx IDensityFn_YClampedGradientBuilderContext) {
	localctx = NewDensityFn_YClampedGradientBuilderContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 174, MinecraftMetascriptParserRULE_densityFn_YClampedGradientBuilder)
	p.SetState(1310)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case MinecraftMetascriptParserT__43:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1306)
			p.Builder_TopLiteral()
		}

	case MinecraftMetascriptParserT__44:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1307)
			p.Builder_BottomLiteral()
		}

	case MinecraftMetascriptParserT__41:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1308)
			p.Builder_Min()
		}

	case MinecraftMetascriptParserT__42:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1309)
			p.Builder_Max()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDensityFn_SplineFnContext is an interface to support dynamic dispatch.
type IDensityFn_SplineFnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DensityFn_Spline() IDensityFn_SplineContext

	// IsDensityFn_SplineFnContext differentiates from other interfaces.
	IsDensityFn_SplineFnContext()
}

type DensityFn_SplineFnContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDensityFn_SplineFnContext() *DensityFn_SplineFnContext {
	var p = new(DensityFn_SplineFnContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_SplineFn
	return p
}

func InitEmptyDensityFn_SplineFnContext(p *DensityFn_SplineFnContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_SplineFn
}

func (*DensityFn_SplineFnContext) IsDensityFn_SplineFnContext() {}

func NewDensityFn_SplineFnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DensityFn_SplineFnContext {
	var p = new(DensityFn_SplineFnContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_SplineFn

	return p
}

func (s *DensityFn_SplineFnContext) GetParser() antlr.Parser { return s.parser }

func (s *DensityFn_SplineFnContext) DensityFn_Spline() IDensityFn_SplineContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFn_SplineContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFn_SplineContext)
}

func (s *DensityFn_SplineFnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DensityFn_SplineFnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DensityFn_SplineFnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterDensityFn_SplineFn(s)
	}
}

func (s *DensityFn_SplineFnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitDensityFn_SplineFn(s)
	}
}

func (p *MinecraftMetascriptParser) DensityFn_SplineFn() (localctx IDensityFn_SplineFnContext) {
	localctx = NewDensityFn_SplineFnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 176, MinecraftMetascriptParserRULE_densityFn_SplineFn)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1312)
		p.DensityFn_Spline()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDensityFn_SplineContext is an interface to support dynamic dispatch.
type IDensityFn_SplineContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Number() INumberContext
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode
	DensityFn() IDensityFnContext
	AllDensityFn_SplinePoint() []IDensityFn_SplinePointContext
	DensityFn_SplinePoint(i int) IDensityFn_SplinePointContext

	// IsDensityFn_SplineContext differentiates from other interfaces.
	IsDensityFn_SplineContext()
}

type DensityFn_SplineContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDensityFn_SplineContext() *DensityFn_SplineContext {
	var p = new(DensityFn_SplineContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_Spline
	return p
}

func InitEmptyDensityFn_SplineContext(p *DensityFn_SplineContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_Spline
}

func (*DensityFn_SplineContext) IsDensityFn_SplineContext() {}

func NewDensityFn_SplineContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DensityFn_SplineContext {
	var p = new(DensityFn_SplineContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_Spline

	return p
}

func (s *DensityFn_SplineContext) GetParser() antlr.Parser { return s.parser }

func (s *DensityFn_SplineContext) Number() INumberContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumberContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumberContext)
}

func (s *DensityFn_SplineContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *DensityFn_SplineContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *DensityFn_SplineContext) DensityFn() IDensityFnContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFnContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFnContext)
}

func (s *DensityFn_SplineContext) AllDensityFn_SplinePoint() []IDensityFn_SplinePointContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDensityFn_SplinePointContext); ok {
			len++
		}
	}

	tst := make([]IDensityFn_SplinePointContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDensityFn_SplinePointContext); ok {
			tst[i] = t.(IDensityFn_SplinePointContext)
			i++
		}
	}

	return tst
}

func (s *DensityFn_SplineContext) DensityFn_SplinePoint(i int) IDensityFn_SplinePointContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFn_SplinePointContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFn_SplinePointContext)
}

func (s *DensityFn_SplineContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DensityFn_SplineContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DensityFn_SplineContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterDensityFn_Spline(s)
	}
}

func (s *DensityFn_SplineContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitDensityFn_Spline(s)
	}
}

func (p *MinecraftMetascriptParser) DensityFn_Spline() (localctx IDensityFn_SplineContext) {
	localctx = NewDensityFn_SplineContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 178, MinecraftMetascriptParserRULE_densityFn_Spline)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1314)
		p.Match(MinecraftMetascriptParserT__74)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1318)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(1315)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1320)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(1358)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 149, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1321)
			p.Match(MinecraftMetascriptParserT__8)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1325)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 144, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1322)
					p.Match(MinecraftMetascriptParserNL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(1327)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 144, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		{
			p.SetState(1328)
			p.DensityFn()
		}
		p.SetState(1332)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == MinecraftMetascriptParserNL {
			{
				p.SetState(1329)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(1334)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1335)
			p.Match(MinecraftMetascriptParserT__9)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1339)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 146, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1336)
					p.Match(MinecraftMetascriptParserNL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(1341)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 146, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(1351)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == MinecraftMetascriptParserT__75 {
			{
				p.SetState(1342)
				p.DensityFn_SplinePoint()
			}
			p.SetState(1346)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 147, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(1343)
						p.Match(MinecraftMetascriptParserNL)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				}
				p.SetState(1348)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 147, p.GetParserRuleContext())
				if p.HasError() {
					goto errorExit
				}
			}

			p.SetState(1353)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}

	case 2:
		{
			p.SetState(1354)
			p.Match(MinecraftMetascriptParserT__8)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1355)
			p.Number()
		}
		{
			p.SetState(1356)
			p.Match(MinecraftMetascriptParserT__9)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDensityFn_SplinePointContext is an interface to support dynamic dispatch.
type IDensityFn_SplinePointContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllNumber() []INumberContext
	Number(i int) INumberContext
	DensityFn_Spline() IDensityFn_SplineContext
	ResourceReference() IResourceReferenceContext

	// IsDensityFn_SplinePointContext differentiates from other interfaces.
	IsDensityFn_SplinePointContext()
}

type DensityFn_SplinePointContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDensityFn_SplinePointContext() *DensityFn_SplinePointContext {
	var p = new(DensityFn_SplinePointContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_SplinePoint
	return p
}

func InitEmptyDensityFn_SplinePointContext(p *DensityFn_SplinePointContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_SplinePoint
}

func (*DensityFn_SplinePointContext) IsDensityFn_SplinePointContext() {}

func NewDensityFn_SplinePointContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DensityFn_SplinePointContext {
	var p = new(DensityFn_SplinePointContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_SplinePoint

	return p
}

func (s *DensityFn_SplinePointContext) GetParser() antlr.Parser { return s.parser }

func (s *DensityFn_SplinePointContext) AllNumber() []INumberContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INumberContext); ok {
			len++
		}
	}

	tst := make([]INumberContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INumberContext); ok {
			tst[i] = t.(INumberContext)
			i++
		}
	}

	return tst
}

func (s *DensityFn_SplinePointContext) Number(i int) INumberContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumberContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumberContext)
}

func (s *DensityFn_SplinePointContext) DensityFn_Spline() IDensityFn_SplineContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFn_SplineContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFn_SplineContext)
}

func (s *DensityFn_SplinePointContext) ResourceReference() IResourceReferenceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IResourceReferenceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IResourceReferenceContext)
}

func (s *DensityFn_SplinePointContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DensityFn_SplinePointContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DensityFn_SplinePointContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterDensityFn_SplinePoint(s)
	}
}

func (s *DensityFn_SplinePointContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitDensityFn_SplinePoint(s)
	}
}

func (p *MinecraftMetascriptParser) DensityFn_SplinePoint() (localctx IDensityFn_SplinePointContext) {
	localctx = NewDensityFn_SplinePointContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 180, MinecraftMetascriptParserRULE_densityFn_SplinePoint)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1360)
		p.Match(MinecraftMetascriptParserT__75)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1361)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1362)
		p.Number()
	}
	{
		p.SetState(1363)
		p.Match(MinecraftMetascriptParserT__13)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1367)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case MinecraftMetascriptParserInt, MinecraftMetascriptParserFloat:
		{
			p.SetState(1364)
			p.Number()
		}

	case MinecraftMetascriptParserT__74:
		{
			p.SetState(1365)
			p.DensityFn_Spline()
		}

	case MinecraftMetascriptParserIdentifier:
		{
			p.SetState(1366)
			p.ResourceReference()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}
	{
		p.SetState(1369)
		p.Match(MinecraftMetascriptParserT__13)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1370)
		p.Number()
	}
	{
		p.SetState(1371)
		p.Match(MinecraftMetascriptParserT__9)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDensityFn_ConstantContext is an interface to support dynamic dispatch.
type IDensityFn_ConstantContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Number() INumberContext

	// IsDensityFn_ConstantContext differentiates from other interfaces.
	IsDensityFn_ConstantContext()
}

type DensityFn_ConstantContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDensityFn_ConstantContext() *DensityFn_ConstantContext {
	var p = new(DensityFn_ConstantContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_Constant
	return p
}

func InitEmptyDensityFn_ConstantContext(p *DensityFn_ConstantContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_Constant
}

func (*DensityFn_ConstantContext) IsDensityFn_ConstantContext() {}

func NewDensityFn_ConstantContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DensityFn_ConstantContext {
	var p = new(DensityFn_ConstantContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_Constant

	return p
}

func (s *DensityFn_ConstantContext) GetParser() antlr.Parser { return s.parser }

func (s *DensityFn_ConstantContext) Number() INumberContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumberContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumberContext)
}

func (s *DensityFn_ConstantContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DensityFn_ConstantContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DensityFn_ConstantContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterDensityFn_Constant(s)
	}
}

func (s *DensityFn_ConstantContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitDensityFn_Constant(s)
	}
}

func (p *MinecraftMetascriptParser) DensityFn_Constant() (localctx IDensityFn_ConstantContext) {
	localctx = NewDensityFn_ConstantContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 182, MinecraftMetascriptParserRULE_densityFn_Constant)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1373)
		p.Number()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDensityFn_ReferenceContext is an interface to support dynamic dispatch.
type IDensityFn_ReferenceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ResourceReference() IResourceReferenceContext

	// IsDensityFn_ReferenceContext differentiates from other interfaces.
	IsDensityFn_ReferenceContext()
}

type DensityFn_ReferenceContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDensityFn_ReferenceContext() *DensityFn_ReferenceContext {
	var p = new(DensityFn_ReferenceContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_Reference
	return p
}

func InitEmptyDensityFn_ReferenceContext(p *DensityFn_ReferenceContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_Reference
}

func (*DensityFn_ReferenceContext) IsDensityFn_ReferenceContext() {}

func NewDensityFn_ReferenceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DensityFn_ReferenceContext {
	var p = new(DensityFn_ReferenceContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_Reference

	return p
}

func (s *DensityFn_ReferenceContext) GetParser() antlr.Parser { return s.parser }

func (s *DensityFn_ReferenceContext) ResourceReference() IResourceReferenceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IResourceReferenceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IResourceReferenceContext)
}

func (s *DensityFn_ReferenceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DensityFn_ReferenceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DensityFn_ReferenceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterDensityFn_Reference(s)
	}
}

func (s *DensityFn_ReferenceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitDensityFn_Reference(s)
	}
}

func (p *MinecraftMetascriptParser) DensityFn_Reference() (localctx IDensityFn_ReferenceContext) {
	localctx = NewDensityFn_ReferenceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 184, MinecraftMetascriptParserRULE_densityFn_Reference)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1375)
		p.ResourceReference()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDensityFn_MathContext is an interface to support dynamic dispatch.
type IDensityFn_MathContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DensityFn() IDensityFnContext

	// IsDensityFn_MathContext differentiates from other interfaces.
	IsDensityFn_MathContext()
}

type DensityFn_MathContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDensityFn_MathContext() *DensityFn_MathContext {
	var p = new(DensityFn_MathContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_Math
	return p
}

func InitEmptyDensityFn_MathContext(p *DensityFn_MathContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_Math
}

func (*DensityFn_MathContext) IsDensityFn_MathContext() {}

func NewDensityFn_MathContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DensityFn_MathContext {
	var p = new(DensityFn_MathContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_Math

	return p
}

func (s *DensityFn_MathContext) GetParser() antlr.Parser { return s.parser }

func (s *DensityFn_MathContext) DensityFn() IDensityFnContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFnContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFnContext)
}

func (s *DensityFn_MathContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DensityFn_MathContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DensityFn_MathContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterDensityFn_Math(s)
	}
}

func (s *DensityFn_MathContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitDensityFn_Math(s)
	}
}

func (p *MinecraftMetascriptParser) DensityFn_Math() (localctx IDensityFn_MathContext) {
	localctx = NewDensityFn_MathContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 186, MinecraftMetascriptParserRULE_densityFn_Math)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1377)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MinecraftMetascriptParserT__76 || _la == MinecraftMetascriptParserT__77) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(1378)
		p.DensityFn()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}
