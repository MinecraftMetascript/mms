// Code generated from ./grammar/MinecraftMetascript.g4 by ANTLR 4.13.2. DO NOT EDIT.

package grammar // MinecraftMetascript
import (
	"fmt"
	"strconv"
	"sync"

	"github.com/antlr4-go/antlr/v4"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = strconv.Itoa
var _ = sync.Once{}

type MinecraftMetascriptParser struct {
	*antlr.BaseParser
}

var MinecraftMetascriptParserStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	LiteralNames           []string
	SymbolicNames          []string
	RuleNames              []string
	PredictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func minecraftmetascriptParserInit() {
	staticData := &MinecraftMetascriptParserStaticData
	staticData.LiteralNames = []string{
		"", "'Namespace'", "'{'", "'}'", "'Surface'", "'~'", "'!'", "'And'",
		"'('", "')'", "'Or'", "'AboveSurface()'", "'Biome'", "','", "'Hole'",
		"'Steep'", "'Freezing'", "'NoiseThreshold'", "'StoneDepth('", "'.SecondaryDepthRange('",
		"'VerticalGradient'", "'AboveWater'", "'YAbove'", "'Block'", "'['",
		"']'", "'Bandlands'", "'If'", "'='", "'.XZScale('", "'.YScale('", "'.XZFactor('",
		"'.YFactor('", "'.Noise'", "'Smear'", "'.Type1'", "'.Type2'", "'.ShiftX'",
		"'.ShiftY'", "'.ShiftZ'", "'.Amplitudes'", "'.Offset'", "'.Add'", "'.Mul('",
		"'.Min('", "'.Max('", "'.Top'", "'.Bottom'", "'.InRange'", "'.OutRange'",
		"':'", "'Noise'", "'DensityFn'", "'BlendAlpha'", "'BlendOffset'", "'EndIslands'",
		"'Interpolated'", "'BlendDensity'", "'FlatCache'", "'Abs'", "'Square'",
		"'Cube'", "'HalfNeg'", "'QuarterNeg'", "'Squeeze'", "'Shift'", "'ShiftA'",
		"'ShiftB'", "'Cache'", "'Min'", "'Max'", "'OldBlendedNoise'", "'WeirdScaledSampler'",
		"'ShiftedNoise'", "'RangeChoice'", "'Clamp'", "'YClampedGradient'",
		"'Spline'", "'.Point'", "'+'", "'*'", "'NoiseRouter'", "'Router'", "'.'",
		"'FinalDensity'", "'Barrier'", "'FluidLevelFloodedness'", "'FluidLevelSpread'",
		"'Lava'", "'VeinToggle'", "'VeinRidged'", "'VeinGap'", "'Temperature'",
		"'Vegetation'", "'Continents'", "'Erosion'", "'Depth'", "'Ridges'",
		"'NoiseSettings'", "'.NoiseSize'", "'.NoiseRouter'", "'.SeaLevel'",
		"'.DisableCreatures'", "'.DisableVeins'", "'.DisableAquifers'", "'.LegacyRandomSource'",
		"'.DefaultBlock'", "'.DefaultFluid'", "'.SpawnTarget'", "'.MinY'", "'.Height'",
		"'.SurfaceRule'", "'Property'",
	}
	staticData.SymbolicNames = []string{
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "", "", "", "", "", "", "", "", "StoneDepthMode", "Int",
		"Float", "String", "NL", "WS", "Identifier", "BlockComment", "LineComment",
		"DensityFn_CacheKind",
	}
	staticData.RuleNames = []string{
		"script", "namespaceDeclaration", "namespace", "contentBlocks", "surfaceBlock",
		"surfaceStatement", "verticalAnchor", "verticalAnchorDeclaration", "surfaceCondition",
		"surfaceConditionDeclaration", "surfaceCondition_Not", "surfaceCondition_And",
		"surfaceCondition_Or", "surfaceCondition_Reference", "surfaceCondition_AboveSurface",
		"surfaceCondition_Biome", "surfaceCondition_Hole", "surfaceCondition_Steep",
		"surfaceCondition_Freezing", "surfaceCondition_NoiseThresholdBuilder",
		"surfaceCondition_NoiseThreshold", "surfaceCondition_StoneDepth", "surfaceCondition_StoneDepthBuilder",
		"surfaceCondition_StoneDepthBuilder_SecondaryDepthRange", "surfaceCondition_VerticalGradient",
		"surfaceCondition_VerticalGradientBuilder", "surfaceCondition_AboveWater",
		"surfaceCondition_AboveWaterBuilder", "surfaceCondition_YAbove", "surfaceCondition_YAboveBuilder",
		"surfaceRuleDeclaration", "surfaceRule", "surfaceRule_Reference", "surfaceRule_Block",
		"surfaceRule_Sequence", "surfaceRule_Bandlands", "surfaceRule_If", "declare",
		"builder_XZScale", "builder_YScale", "builder_XZFactor", "builder_YFactor",
		"builder_Noise", "builder_Smear", "builder_Type1", "builder_Type2",
		"builder_ShiftX", "builder_ShiftY", "builder_ShiftZ", "builder_Amplitudes",
		"builder_Offset", "builder_Add", "builder_Mul", "builder_MulInt", "builder_Min",
		"builder_Max", "builder_Top", "builder_TopLiteral", "builder_Bottom",
		"builder_BottomLiteral", "builder_InRange", "builder_OutRange", "resourceReference",
		"number", "noiseBlock", "noiseDeclaration", "noise", "noiseDefinition",
		"noise_Builder", "densityFnBlock", "densityFnDeclaration", "densityFn",
		"densityFn_NoInput", "densityFn_SingleInput", "densityFn_InlineNoise",
		"densityFn_Noise", "densityFn_NoiseBuilder", "densityFn_Cache", "densityFn_DualInput",
		"densityFn_OldBlendedNoise", "densityFn_OldBlendedNoiseBuilder", "densityFn_WierdScaledSampler",
		"densityFn_WierdScaledSamplerBuilder", "densityFn_ShiftedNoise", "densityFn_ShiftedNoiseBuilder",
		"densityFn_RangeChoice", "densityFn_RangeChoiceBuilder", "densityFn_Clamp",
		"densityFn_ClampBuilder", "densityFn_YClampedGradient", "densityFn_YClampedGradientBuilder",
		"densityFn_SplineFn", "densityFn_Spline", "densityFn_SplinePoint", "densityFn_Constant",
		"densityFn_Reference", "densityFn_Math", "noiseRouterBlock", "noiseRouterDeclaration",
		"noiseRouter", "noiseRouter_Builder", "noiseSettingsBlock", "noiseSettingsDeclaration",
		"noiseSettings", "noiseSettings_Builder", "builder_NoiseSize", "builder_NoiseRouter",
		"builder_SeaLevel", "builder_DisableCreatures", "builder_DisableVeins",
		"builder_DisableAquifers", "builder_LegacyRandomSource", "builder_DefaultBlock",
		"builder_DefaultFluid", "builder_SpawnTarget", "builder_MinY", "builder_Height",
		"builder_SurfaceRule", "blockState", "blockState_Builder",
	}
	staticData.PredictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 1, 122, 2136, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4,
		7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10,
		7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15, 7,
		15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7, 20,
		2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25, 2,
		26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2, 31,
		7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36, 7,
		36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7, 41,
		2, 42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46, 2,
		47, 7, 47, 2, 48, 7, 48, 2, 49, 7, 49, 2, 50, 7, 50, 2, 51, 7, 51, 2, 52,
		7, 52, 2, 53, 7, 53, 2, 54, 7, 54, 2, 55, 7, 55, 2, 56, 7, 56, 2, 57, 7,
		57, 2, 58, 7, 58, 2, 59, 7, 59, 2, 60, 7, 60, 2, 61, 7, 61, 2, 62, 7, 62,
		2, 63, 7, 63, 2, 64, 7, 64, 2, 65, 7, 65, 2, 66, 7, 66, 2, 67, 7, 67, 2,
		68, 7, 68, 2, 69, 7, 69, 2, 70, 7, 70, 2, 71, 7, 71, 2, 72, 7, 72, 2, 73,
		7, 73, 2, 74, 7, 74, 2, 75, 7, 75, 2, 76, 7, 76, 2, 77, 7, 77, 2, 78, 7,
		78, 2, 79, 7, 79, 2, 80, 7, 80, 2, 81, 7, 81, 2, 82, 7, 82, 2, 83, 7, 83,
		2, 84, 7, 84, 2, 85, 7, 85, 2, 86, 7, 86, 2, 87, 7, 87, 2, 88, 7, 88, 2,
		89, 7, 89, 2, 90, 7, 90, 2, 91, 7, 91, 2, 92, 7, 92, 2, 93, 7, 93, 2, 94,
		7, 94, 2, 95, 7, 95, 2, 96, 7, 96, 2, 97, 7, 97, 2, 98, 7, 98, 2, 99, 7,
		99, 2, 100, 7, 100, 2, 101, 7, 101, 2, 102, 7, 102, 2, 103, 7, 103, 2,
		104, 7, 104, 2, 105, 7, 105, 2, 106, 7, 106, 2, 107, 7, 107, 2, 108, 7,
		108, 2, 109, 7, 109, 2, 110, 7, 110, 2, 111, 7, 111, 2, 112, 7, 112, 2,
		113, 7, 113, 2, 114, 7, 114, 2, 115, 7, 115, 2, 116, 7, 116, 2, 117, 7,
		117, 2, 118, 7, 118, 2, 119, 7, 119, 1, 0, 5, 0, 242, 8, 0, 10, 0, 12,
		0, 245, 9, 0, 1, 0, 1, 0, 5, 0, 249, 8, 0, 10, 0, 12, 0, 252, 9, 0, 5,
		0, 254, 8, 0, 10, 0, 12, 0, 257, 9, 0, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 5,
		2, 264, 8, 2, 10, 2, 12, 2, 267, 9, 2, 1, 2, 1, 2, 5, 2, 271, 8, 2, 10,
		2, 12, 2, 274, 9, 2, 1, 2, 1, 2, 5, 2, 278, 8, 2, 10, 2, 12, 2, 281, 9,
		2, 5, 2, 283, 8, 2, 10, 2, 12, 2, 286, 9, 2, 1, 2, 1, 2, 1, 3, 1, 3, 1,
		3, 1, 3, 1, 3, 3, 3, 295, 8, 3, 1, 4, 1, 4, 5, 4, 299, 8, 4, 10, 4, 12,
		4, 302, 9, 4, 1, 4, 1, 4, 5, 4, 306, 8, 4, 10, 4, 12, 4, 309, 9, 4, 1,
		4, 1, 4, 5, 4, 313, 8, 4, 10, 4, 12, 4, 316, 9, 4, 5, 4, 318, 8, 4, 10,
		4, 12, 4, 321, 9, 4, 1, 4, 5, 4, 324, 8, 4, 10, 4, 12, 4, 327, 9, 4, 1,
		4, 1, 4, 1, 5, 1, 5, 1, 5, 3, 5, 334, 8, 5, 1, 6, 3, 6, 337, 8, 6, 1, 6,
		1, 6, 3, 6, 341, 8, 6, 1, 7, 1, 7, 1, 7, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8,
		1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 3, 8, 360, 8, 8,
		1, 9, 1, 9, 1, 9, 1, 10, 1, 10, 1, 10, 1, 11, 1, 11, 5, 11, 370, 8, 11,
		10, 11, 12, 11, 373, 9, 11, 1, 11, 1, 11, 5, 11, 377, 8, 11, 10, 11, 12,
		11, 380, 9, 11, 1, 11, 1, 11, 5, 11, 384, 8, 11, 10, 11, 12, 11, 387, 9,
		11, 5, 11, 389, 8, 11, 10, 11, 12, 11, 392, 9, 11, 1, 11, 1, 11, 5, 11,
		396, 8, 11, 10, 11, 12, 11, 399, 9, 11, 1, 11, 1, 11, 1, 12, 1, 12, 5,
		12, 405, 8, 12, 10, 12, 12, 12, 408, 9, 12, 1, 12, 1, 12, 5, 12, 412, 8,
		12, 10, 12, 12, 12, 415, 9, 12, 1, 12, 1, 12, 5, 12, 419, 8, 12, 10, 12,
		12, 12, 422, 9, 12, 5, 12, 424, 8, 12, 10, 12, 12, 12, 427, 9, 12, 1, 12,
		1, 12, 5, 12, 431, 8, 12, 10, 12, 12, 12, 434, 9, 12, 1, 12, 1, 12, 1,
		13, 1, 13, 1, 14, 1, 14, 1, 15, 1, 15, 1, 15, 5, 15, 445, 8, 15, 10, 15,
		12, 15, 448, 9, 15, 1, 15, 1, 15, 1, 15, 5, 15, 453, 8, 15, 10, 15, 12,
		15, 456, 9, 15, 5, 15, 458, 8, 15, 10, 15, 12, 15, 461, 9, 15, 1, 15, 5,
		15, 464, 8, 15, 10, 15, 12, 15, 467, 9, 15, 1, 15, 1, 15, 5, 15, 471, 8,
		15, 10, 15, 12, 15, 474, 9, 15, 1, 15, 1, 15, 1, 16, 1, 16, 1, 16, 1, 16,
		1, 17, 1, 17, 1, 17, 1, 17, 1, 18, 1, 18, 1, 18, 1, 18, 1, 19, 1, 19, 3,
		19, 492, 8, 19, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 5, 20, 499, 8, 20, 10,
		20, 12, 20, 502, 9, 20, 1, 20, 1, 20, 5, 20, 506, 8, 20, 10, 20, 12, 20,
		509, 9, 20, 5, 20, 511, 8, 20, 10, 20, 12, 20, 514, 9, 20, 1, 21, 1, 21,
		1, 21, 1, 21, 5, 21, 520, 8, 21, 10, 21, 12, 21, 523, 9, 21, 1, 21, 1,
		21, 5, 21, 527, 8, 21, 10, 21, 12, 21, 530, 9, 21, 5, 21, 532, 8, 21, 10,
		21, 12, 21, 535, 9, 21, 1, 22, 1, 22, 1, 22, 3, 22, 540, 8, 22, 1, 23,
		1, 23, 1, 23, 1, 23, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 5, 24, 551, 8,
		24, 10, 24, 12, 24, 554, 9, 24, 1, 24, 1, 24, 5, 24, 558, 8, 24, 10, 24,
		12, 24, 561, 9, 24, 5, 24, 563, 8, 24, 10, 24, 12, 24, 566, 9, 24, 1, 25,
		1, 25, 3, 25, 570, 8, 25, 1, 26, 1, 26, 1, 26, 1, 26, 5, 26, 576, 8, 26,
		10, 26, 12, 26, 579, 9, 26, 1, 26, 1, 26, 5, 26, 583, 8, 26, 10, 26, 12,
		26, 586, 9, 26, 5, 26, 588, 8, 26, 10, 26, 12, 26, 591, 9, 26, 1, 27, 1,
		27, 1, 27, 3, 27, 596, 8, 27, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 5, 28,
		603, 8, 28, 10, 28, 12, 28, 606, 9, 28, 1, 28, 1, 28, 5, 28, 610, 8, 28,
		10, 28, 12, 28, 613, 9, 28, 5, 28, 615, 8, 28, 10, 28, 12, 28, 618, 9,
		28, 1, 29, 1, 29, 3, 29, 622, 8, 29, 1, 30, 1, 30, 1, 30, 1, 31, 1, 31,
		1, 31, 1, 31, 1, 31, 3, 31, 632, 8, 31, 1, 32, 1, 32, 1, 33, 1, 33, 1,
		33, 1, 33, 1, 33, 1, 34, 1, 34, 5, 34, 643, 8, 34, 10, 34, 12, 34, 646,
		9, 34, 1, 34, 1, 34, 5, 34, 650, 8, 34, 10, 34, 12, 34, 653, 9, 34, 5,
		34, 655, 8, 34, 10, 34, 12, 34, 658, 9, 34, 1, 34, 5, 34, 661, 8, 34, 10,
		34, 12, 34, 664, 9, 34, 1, 34, 1, 34, 1, 35, 1, 35, 1, 35, 1, 35, 1, 36,
		1, 36, 5, 36, 674, 8, 36, 10, 36, 12, 36, 677, 9, 36, 1, 36, 1, 36, 5,
		36, 681, 8, 36, 10, 36, 12, 36, 684, 9, 36, 1, 36, 1, 36, 5, 36, 688, 8,
		36, 10, 36, 12, 36, 691, 9, 36, 1, 36, 1, 36, 5, 36, 695, 8, 36, 10, 36,
		12, 36, 698, 9, 36, 1, 36, 1, 36, 1, 37, 1, 37, 5, 37, 704, 8, 37, 10,
		37, 12, 37, 707, 9, 37, 1, 37, 1, 37, 5, 37, 711, 8, 37, 10, 37, 12, 37,
		714, 9, 37, 1, 38, 1, 38, 5, 38, 718, 8, 38, 10, 38, 12, 38, 721, 9, 38,
		1, 38, 1, 38, 5, 38, 725, 8, 38, 10, 38, 12, 38, 728, 9, 38, 1, 38, 1,
		38, 1, 39, 1, 39, 5, 39, 734, 8, 39, 10, 39, 12, 39, 737, 9, 39, 1, 39,
		1, 39, 5, 39, 741, 8, 39, 10, 39, 12, 39, 744, 9, 39, 1, 39, 1, 39, 1,
		40, 1, 40, 5, 40, 750, 8, 40, 10, 40, 12, 40, 753, 9, 40, 1, 40, 1, 40,
		5, 40, 757, 8, 40, 10, 40, 12, 40, 760, 9, 40, 1, 40, 1, 40, 1, 41, 1,
		41, 5, 41, 766, 8, 41, 10, 41, 12, 41, 769, 9, 41, 1, 41, 1, 41, 5, 41,
		773, 8, 41, 10, 41, 12, 41, 776, 9, 41, 1, 41, 1, 41, 1, 42, 1, 42, 1,
		42, 1, 42, 5, 42, 784, 8, 42, 10, 42, 12, 42, 787, 9, 42, 1, 42, 1, 42,
		5, 42, 791, 8, 42, 10, 42, 12, 42, 794, 9, 42, 1, 42, 1, 42, 3, 42, 798,
		8, 42, 1, 43, 1, 43, 1, 43, 5, 43, 803, 8, 43, 10, 43, 12, 43, 806, 9,
		43, 1, 43, 1, 43, 5, 43, 810, 8, 43, 10, 43, 12, 43, 813, 9, 43, 1, 43,
		1, 43, 1, 44, 1, 44, 1, 44, 1, 44, 1, 45, 1, 45, 1, 45, 1, 45, 1, 46, 1,
		46, 1, 46, 5, 46, 828, 8, 46, 10, 46, 12, 46, 831, 9, 46, 1, 46, 1, 46,
		5, 46, 835, 8, 46, 10, 46, 12, 46, 838, 9, 46, 1, 46, 1, 46, 1, 47, 1,
		47, 1, 47, 5, 47, 845, 8, 47, 10, 47, 12, 47, 848, 9, 47, 1, 47, 1, 47,
		5, 47, 852, 8, 47, 10, 47, 12, 47, 855, 9, 47, 1, 47, 1, 47, 1, 48, 1,
		48, 1, 48, 5, 48, 862, 8, 48, 10, 48, 12, 48, 865, 9, 48, 1, 48, 1, 48,
		5, 48, 869, 8, 48, 10, 48, 12, 48, 872, 9, 48, 1, 48, 1, 48, 1, 49, 1,
		49, 1, 49, 1, 49, 1, 49, 5, 49, 881, 8, 49, 10, 49, 12, 49, 884, 9, 49,
		1, 49, 1, 49, 1, 49, 1, 50, 1, 50, 1, 50, 5, 50, 892, 8, 50, 10, 50, 12,
		50, 895, 9, 50, 1, 50, 1, 50, 5, 50, 899, 8, 50, 10, 50, 12, 50, 902, 9,
		50, 1, 50, 1, 50, 1, 51, 1, 51, 1, 51, 1, 51, 1, 52, 1, 52, 5, 52, 912,
		8, 52, 10, 52, 12, 52, 915, 9, 52, 1, 52, 1, 52, 5, 52, 919, 8, 52, 10,
		52, 12, 52, 922, 9, 52, 1, 52, 1, 52, 1, 53, 1, 53, 5, 53, 928, 8, 53,
		10, 53, 12, 53, 931, 9, 53, 1, 53, 1, 53, 5, 53, 935, 8, 53, 10, 53, 12,
		53, 938, 9, 53, 1, 53, 1, 53, 1, 54, 1, 54, 5, 54, 944, 8, 54, 10, 54,
		12, 54, 947, 9, 54, 1, 54, 1, 54, 5, 54, 951, 8, 54, 10, 54, 12, 54, 954,
		9, 54, 1, 54, 1, 54, 1, 55, 1, 55, 5, 55, 960, 8, 55, 10, 55, 12, 55, 963,
		9, 55, 1, 55, 1, 55, 5, 55, 967, 8, 55, 10, 55, 12, 55, 970, 9, 55, 1,
		55, 1, 55, 1, 56, 1, 56, 1, 56, 5, 56, 977, 8, 56, 10, 56, 12, 56, 980,
		9, 56, 1, 56, 1, 56, 5, 56, 984, 8, 56, 10, 56, 12, 56, 987, 9, 56, 1,
		56, 1, 56, 1, 57, 1, 57, 1, 57, 1, 57, 1, 57, 1, 58, 1, 58, 1, 58, 5, 58,
		999, 8, 58, 10, 58, 12, 58, 1002, 9, 58, 1, 58, 1, 58, 5, 58, 1006, 8,
		58, 10, 58, 12, 58, 1009, 9, 58, 1, 58, 1, 58, 1, 59, 1, 59, 1, 59, 5,
		59, 1016, 8, 59, 10, 59, 12, 59, 1019, 9, 59, 1, 59, 1, 59, 5, 59, 1023,
		8, 59, 10, 59, 12, 59, 1026, 9, 59, 1, 59, 1, 59, 1, 60, 1, 60, 1, 60,
		5, 60, 1033, 8, 60, 10, 60, 12, 60, 1036, 9, 60, 1, 60, 1, 60, 5, 60, 1040,
		8, 60, 10, 60, 12, 60, 1043, 9, 60, 1, 60, 1, 60, 1, 61, 1, 61, 1, 61,
		5, 61, 1050, 8, 61, 10, 61, 12, 61, 1053, 9, 61, 1, 61, 1, 61, 5, 61, 1057,
		8, 61, 10, 61, 12, 61, 1060, 9, 61, 1, 61, 1, 61, 1, 62, 1, 62, 3, 62,
		1066, 8, 62, 1, 62, 1, 62, 1, 63, 1, 63, 1, 64, 1, 64, 5, 64, 1074, 8,
		64, 10, 64, 12, 64, 1077, 9, 64, 1, 64, 1, 64, 5, 64, 1081, 8, 64, 10,
		64, 12, 64, 1084, 9, 64, 1, 64, 1, 64, 5, 64, 1088, 8, 64, 10, 64, 12,
		64, 1091, 9, 64, 5, 64, 1093, 8, 64, 10, 64, 12, 64, 1096, 9, 64, 1, 64,
		5, 64, 1099, 8, 64, 10, 64, 12, 64, 1102, 9, 64, 1, 64, 1, 64, 1, 65, 1,
		65, 1, 65, 1, 66, 1, 66, 1, 66, 1, 67, 1, 67, 5, 67, 1114, 8, 67, 10, 67,
		12, 67, 1117, 9, 67, 1, 67, 1, 67, 5, 67, 1121, 8, 67, 10, 67, 12, 67,
		1124, 9, 67, 1, 67, 1, 67, 5, 67, 1128, 8, 67, 10, 67, 12, 67, 1131, 9,
		67, 1, 67, 1, 67, 5, 67, 1135, 8, 67, 10, 67, 12, 67, 1138, 9, 67, 5, 67,
		1140, 8, 67, 10, 67, 12, 67, 1143, 9, 67, 1, 68, 1, 68, 1, 69, 1, 69, 5,
		69, 1149, 8, 69, 10, 69, 12, 69, 1152, 9, 69, 1, 69, 1, 69, 5, 69, 1156,
		8, 69, 10, 69, 12, 69, 1159, 9, 69, 1, 69, 1, 69, 5, 69, 1163, 8, 69, 10,
		69, 12, 69, 1166, 9, 69, 5, 69, 1168, 8, 69, 10, 69, 12, 69, 1171, 9, 69,
		1, 69, 5, 69, 1174, 8, 69, 10, 69, 12, 69, 1177, 9, 69, 1, 69, 1, 69, 1,
		70, 1, 70, 1, 70, 1, 71, 1, 71, 1, 71, 1, 71, 1, 71, 1, 71, 1, 71, 1, 71,
		1, 71, 1, 71, 1, 71, 1, 71, 1, 71, 1, 71, 3, 71, 1198, 8, 71, 1, 71, 3,
		71, 1201, 8, 71, 1, 72, 1, 72, 1, 73, 1, 73, 5, 73, 1207, 8, 73, 10, 73,
		12, 73, 1210, 9, 73, 1, 73, 1, 73, 5, 73, 1214, 8, 73, 10, 73, 12, 73,
		1217, 9, 73, 1, 73, 1, 73, 5, 73, 1221, 8, 73, 10, 73, 12, 73, 1224, 9,
		73, 1, 73, 1, 73, 1, 74, 1, 74, 1, 75, 1, 75, 5, 75, 1232, 8, 75, 10, 75,
		12, 75, 1235, 9, 75, 1, 75, 1, 75, 5, 75, 1239, 8, 75, 10, 75, 12, 75,
		1242, 9, 75, 1, 75, 1, 75, 5, 75, 1246, 8, 75, 10, 75, 12, 75, 1249, 9,
		75, 1, 75, 1, 75, 1, 75, 3, 75, 1254, 8, 75, 1, 75, 5, 75, 1257, 8, 75,
		10, 75, 12, 75, 1260, 9, 75, 1, 75, 1, 75, 5, 75, 1264, 8, 75, 10, 75,
		12, 75, 1267, 9, 75, 5, 75, 1269, 8, 75, 10, 75, 12, 75, 1272, 9, 75, 1,
		76, 1, 76, 3, 76, 1276, 8, 76, 1, 77, 1, 77, 5, 77, 1280, 8, 77, 10, 77,
		12, 77, 1283, 9, 77, 1, 77, 1, 77, 5, 77, 1287, 8, 77, 10, 77, 12, 77,
		1290, 9, 77, 1, 77, 1, 77, 5, 77, 1294, 8, 77, 10, 77, 12, 77, 1297, 9,
		77, 1, 77, 1, 77, 5, 77, 1301, 8, 77, 10, 77, 12, 77, 1304, 9, 77, 1, 77,
		1, 77, 5, 77, 1308, 8, 77, 10, 77, 12, 77, 1311, 9, 77, 1, 77, 1, 77, 1,
		78, 1, 78, 1, 78, 3, 78, 1318, 8, 78, 1, 78, 5, 78, 1321, 8, 78, 10, 78,
		12, 78, 1324, 9, 78, 1, 78, 1, 78, 5, 78, 1328, 8, 78, 10, 78, 12, 78,
		1331, 9, 78, 1, 78, 1, 78, 1, 78, 5, 78, 1336, 8, 78, 10, 78, 12, 78, 1339,
		9, 78, 1, 78, 1, 78, 5, 78, 1343, 8, 78, 10, 78, 12, 78, 1346, 9, 78, 1,
		78, 1, 78, 1, 79, 1, 79, 5, 79, 1352, 8, 79, 10, 79, 12, 79, 1355, 9, 79,
		1, 79, 1, 79, 5, 79, 1359, 8, 79, 10, 79, 12, 79, 1362, 9, 79, 1, 79, 1,
		79, 5, 79, 1366, 8, 79, 10, 79, 12, 79, 1369, 9, 79, 1, 79, 1, 79, 5, 79,
		1373, 8, 79, 10, 79, 12, 79, 1376, 9, 79, 5, 79, 1378, 8, 79, 10, 79, 12,
		79, 1381, 9, 79, 1, 80, 1, 80, 1, 80, 1, 80, 1, 80, 3, 80, 1388, 8, 80,
		1, 81, 1, 81, 5, 81, 1392, 8, 81, 10, 81, 12, 81, 1395, 9, 81, 1, 81, 1,
		81, 5, 81, 1399, 8, 81, 10, 81, 12, 81, 1402, 9, 81, 1, 81, 1, 81, 5, 81,
		1406, 8, 81, 10, 81, 12, 81, 1409, 9, 81, 1, 81, 1, 81, 5, 81, 1413, 8,
		81, 10, 81, 12, 81, 1416, 9, 81, 1, 81, 1, 81, 5, 81, 1420, 8, 81, 10,
		81, 12, 81, 1423, 9, 81, 5, 81, 1425, 8, 81, 10, 81, 12, 81, 1428, 9, 81,
		1, 82, 1, 82, 1, 82, 3, 82, 1433, 8, 82, 1, 83, 1, 83, 5, 83, 1437, 8,
		83, 10, 83, 12, 83, 1440, 9, 83, 1, 83, 1, 83, 5, 83, 1444, 8, 83, 10,
		83, 12, 83, 1447, 9, 83, 1, 83, 1, 83, 5, 83, 1451, 8, 83, 10, 83, 12,
		83, 1454, 9, 83, 1, 83, 1, 83, 5, 83, 1458, 8, 83, 10, 83, 12, 83, 1461,
		9, 83, 5, 83, 1463, 8, 83, 10, 83, 12, 83, 1466, 9, 83, 1, 84, 1, 84, 1,
		84, 1, 84, 1, 84, 1, 84, 3, 84, 1474, 8, 84, 1, 85, 1, 85, 5, 85, 1478,
		8, 85, 10, 85, 12, 85, 1481, 9, 85, 1, 85, 1, 85, 5, 85, 1485, 8, 85, 10,
		85, 12, 85, 1488, 9, 85, 1, 85, 1, 85, 5, 85, 1492, 8, 85, 10, 85, 12,
		85, 1495, 9, 85, 1, 85, 1, 85, 5, 85, 1499, 8, 85, 10, 85, 12, 85, 1502,
		9, 85, 1, 85, 1, 85, 5, 85, 1506, 8, 85, 10, 85, 12, 85, 1509, 9, 85, 5,
		85, 1511, 8, 85, 10, 85, 12, 85, 1514, 9, 85, 1, 86, 1, 86, 1, 86, 1, 86,
		3, 86, 1520, 8, 86, 1, 87, 1, 87, 5, 87, 1524, 8, 87, 10, 87, 12, 87, 1527,
		9, 87, 1, 87, 1, 87, 1, 87, 1, 87, 5, 87, 1533, 8, 87, 10, 87, 12, 87,
		1536, 9, 87, 1, 87, 1, 87, 5, 87, 1540, 8, 87, 10, 87, 12, 87, 1543, 9,
		87, 5, 87, 1545, 8, 87, 10, 87, 12, 87, 1548, 9, 87, 1, 88, 1, 88, 3, 88,
		1552, 8, 88, 1, 89, 1, 89, 5, 89, 1556, 8, 89, 10, 89, 12, 89, 1559, 9,
		89, 1, 89, 1, 89, 5, 89, 1563, 8, 89, 10, 89, 12, 89, 1566, 9, 89, 1, 89,
		1, 89, 5, 89, 1570, 8, 89, 10, 89, 12, 89, 1573, 9, 89, 1, 89, 1, 89, 5,
		89, 1577, 8, 89, 10, 89, 12, 89, 1580, 9, 89, 5, 89, 1582, 8, 89, 10, 89,
		12, 89, 1585, 9, 89, 1, 90, 1, 90, 1, 90, 1, 90, 3, 90, 1591, 8, 90, 1,
		91, 1, 91, 1, 92, 1, 92, 5, 92, 1597, 8, 92, 10, 92, 12, 92, 1600, 9, 92,
		1, 92, 1, 92, 5, 92, 1604, 8, 92, 10, 92, 12, 92, 1607, 9, 92, 1, 92, 1,
		92, 5, 92, 1611, 8, 92, 10, 92, 12, 92, 1614, 9, 92, 1, 92, 1, 92, 5, 92,
		1618, 8, 92, 10, 92, 12, 92, 1621, 9, 92, 1, 92, 1, 92, 5, 92, 1625, 8,
		92, 10, 92, 12, 92, 1628, 9, 92, 5, 92, 1630, 8, 92, 10, 92, 12, 92, 1633,
		9, 92, 1, 92, 1, 92, 1, 92, 1, 92, 3, 92, 1639, 8, 92, 1, 93, 1, 93, 1,
		93, 1, 93, 1, 93, 1, 93, 1, 93, 3, 93, 1648, 8, 93, 1, 93, 1, 93, 1, 93,
		1, 93, 1, 94, 1, 94, 1, 95, 1, 95, 1, 96, 1, 96, 5, 96, 1660, 8, 96, 10,
		96, 12, 96, 1663, 9, 96, 1, 96, 1, 96, 1, 97, 1, 97, 5, 97, 1669, 8, 97,
		10, 97, 12, 97, 1672, 9, 97, 1, 97, 1, 97, 5, 97, 1676, 8, 97, 10, 97,
		12, 97, 1679, 9, 97, 1, 97, 1, 97, 5, 97, 1683, 8, 97, 10, 97, 12, 97,
		1686, 9, 97, 5, 97, 1688, 8, 97, 10, 97, 12, 97, 1691, 9, 97, 1, 97, 5,
		97, 1694, 8, 97, 10, 97, 12, 97, 1697, 9, 97, 1, 97, 1, 97, 1, 98, 1, 98,
		1, 98, 1, 99, 1, 99, 5, 99, 1706, 8, 99, 10, 99, 12, 99, 1709, 9, 99, 1,
		99, 1, 99, 5, 99, 1713, 8, 99, 10, 99, 12, 99, 1716, 9, 99, 1, 99, 1, 99,
		5, 99, 1720, 8, 99, 10, 99, 12, 99, 1723, 9, 99, 1, 99, 1, 99, 5, 99, 1727,
		8, 99, 10, 99, 12, 99, 1730, 9, 99, 5, 99, 1732, 8, 99, 10, 99, 12, 99,
		1735, 9, 99, 1, 100, 1, 100, 1, 100, 5, 100, 1740, 8, 100, 10, 100, 12,
		100, 1743, 9, 100, 1, 100, 1, 100, 5, 100, 1747, 8, 100, 10, 100, 12, 100,
		1750, 9, 100, 1, 100, 1, 100, 5, 100, 1754, 8, 100, 10, 100, 12, 100, 1757,
		9, 100, 1, 100, 1, 100, 1, 101, 1, 101, 5, 101, 1763, 8, 101, 10, 101,
		12, 101, 1766, 9, 101, 1, 101, 1, 101, 5, 101, 1770, 8, 101, 10, 101, 12,
		101, 1773, 9, 101, 1, 101, 1, 101, 5, 101, 1777, 8, 101, 10, 101, 12, 101,
		1780, 9, 101, 5, 101, 1782, 8, 101, 10, 101, 12, 101, 1785, 9, 101, 1,
		101, 5, 101, 1788, 8, 101, 10, 101, 12, 101, 1791, 9, 101, 1, 101, 1, 101,
		1, 102, 1, 102, 1, 102, 1, 103, 1, 103, 5, 103, 1800, 8, 103, 10, 103,
		12, 103, 1803, 9, 103, 1, 103, 1, 103, 5, 103, 1807, 8, 103, 10, 103, 12,
		103, 1810, 9, 103, 1, 103, 5, 103, 1813, 8, 103, 10, 103, 12, 103, 1816,
		9, 103, 1, 103, 1, 103, 5, 103, 1820, 8, 103, 10, 103, 12, 103, 1823, 9,
		103, 1, 103, 1, 103, 5, 103, 1827, 8, 103, 10, 103, 12, 103, 1830, 9, 103,
		5, 103, 1832, 8, 103, 10, 103, 12, 103, 1835, 9, 103, 1, 104, 1, 104, 1,
		104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1, 104, 1,
		104, 1, 104, 3, 104, 1850, 8, 104, 1, 105, 1, 105, 1, 105, 5, 105, 1855,
		8, 105, 10, 105, 12, 105, 1858, 9, 105, 1, 105, 1, 105, 5, 105, 1862, 8,
		105, 10, 105, 12, 105, 1865, 9, 105, 1, 105, 1, 105, 5, 105, 1869, 8, 105,
		10, 105, 12, 105, 1872, 9, 105, 1, 105, 1, 105, 5, 105, 1876, 8, 105, 10,
		105, 12, 105, 1879, 9, 105, 1, 105, 1, 105, 1, 106, 1, 106, 1, 106, 5,
		106, 1886, 8, 106, 10, 106, 12, 106, 1889, 9, 106, 1, 106, 1, 106, 5, 106,
		1893, 8, 106, 10, 106, 12, 106, 1896, 9, 106, 1, 106, 1, 106, 1, 107, 1,
		107, 1, 107, 5, 107, 1903, 8, 107, 10, 107, 12, 107, 1906, 9, 107, 1, 107,
		1, 107, 5, 107, 1910, 8, 107, 10, 107, 12, 107, 1913, 9, 107, 1, 107, 1,
		107, 1, 108, 1, 108, 1, 108, 5, 108, 1920, 8, 108, 10, 108, 12, 108, 1923,
		9, 108, 1, 108, 5, 108, 1926, 8, 108, 10, 108, 12, 108, 1929, 9, 108, 1,
		108, 1, 108, 1, 109, 1, 109, 1, 109, 5, 109, 1936, 8, 109, 10, 109, 12,
		109, 1939, 9, 109, 1, 109, 5, 109, 1942, 8, 109, 10, 109, 12, 109, 1945,
		9, 109, 1, 109, 1, 109, 1, 110, 1, 110, 1, 110, 5, 110, 1952, 8, 110, 10,
		110, 12, 110, 1955, 9, 110, 1, 110, 5, 110, 1958, 8, 110, 10, 110, 12,
		110, 1961, 9, 110, 1, 110, 1, 110, 1, 111, 1, 111, 1, 111, 5, 111, 1968,
		8, 111, 10, 111, 12, 111, 1971, 9, 111, 1, 111, 5, 111, 1974, 8, 111, 10,
		111, 12, 111, 1977, 9, 111, 1, 111, 1, 111, 1, 112, 1, 112, 1, 112, 5,
		112, 1984, 8, 112, 10, 112, 12, 112, 1987, 9, 112, 1, 112, 1, 112, 3, 112,
		1991, 8, 112, 1, 112, 5, 112, 1994, 8, 112, 10, 112, 12, 112, 1997, 9,
		112, 1, 112, 1, 112, 1, 113, 1, 113, 1, 113, 5, 113, 2004, 8, 113, 10,
		113, 12, 113, 2007, 9, 113, 1, 113, 1, 113, 3, 113, 2011, 8, 113, 1, 113,
		5, 113, 2014, 8, 113, 10, 113, 12, 113, 2017, 9, 113, 1, 113, 1, 113, 1,
		114, 1, 114, 1, 114, 5, 114, 2024, 8, 114, 10, 114, 12, 114, 2027, 9, 114,
		1, 114, 5, 114, 2030, 8, 114, 10, 114, 12, 114, 2033, 9, 114, 1, 114, 1,
		114, 1, 115, 1, 115, 1, 115, 5, 115, 2040, 8, 115, 10, 115, 12, 115, 2043,
		9, 115, 1, 115, 1, 115, 5, 115, 2047, 8, 115, 10, 115, 12, 115, 2050, 9,
		115, 1, 115, 1, 115, 1, 116, 1, 116, 1, 116, 5, 116, 2057, 8, 116, 10,
		116, 12, 116, 2060, 9, 116, 1, 116, 1, 116, 5, 116, 2064, 8, 116, 10, 116,
		12, 116, 2067, 9, 116, 1, 116, 1, 116, 1, 117, 1, 117, 1, 117, 5, 117,
		2074, 8, 117, 10, 117, 12, 117, 2077, 9, 117, 1, 117, 1, 117, 5, 117, 2081,
		8, 117, 10, 117, 12, 117, 2084, 9, 117, 1, 117, 1, 117, 1, 118, 1, 118,
		5, 118, 2090, 8, 118, 10, 118, 12, 118, 2093, 9, 118, 1, 118, 1, 118, 5,
		118, 2097, 8, 118, 10, 118, 12, 118, 2100, 9, 118, 1, 118, 1, 118, 5, 118,
		2104, 8, 118, 10, 118, 12, 118, 2107, 9, 118, 1, 118, 1, 118, 5, 118, 2111,
		8, 118, 10, 118, 12, 118, 2114, 9, 118, 1, 118, 1, 118, 5, 118, 2118, 8,
		118, 10, 118, 12, 118, 2121, 9, 118, 5, 118, 2123, 8, 118, 10, 118, 12,
		118, 2126, 9, 118, 1, 119, 1, 119, 1, 119, 1, 119, 1, 119, 1, 119, 1, 119,
		1, 119, 1, 119, 0, 0, 120, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24,
		26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60,
		62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96,
		98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126,
		128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156,
		158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186,
		188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216,
		218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 0, 5, 1, 0, 114,
		115, 1, 0, 53, 55, 1, 0, 56, 67, 1, 0, 79, 80, 1, 0, 84, 97, 2322, 0, 243,
		1, 0, 0, 0, 2, 258, 1, 0, 0, 0, 4, 261, 1, 0, 0, 0, 6, 294, 1, 0, 0, 0,
		8, 296, 1, 0, 0, 0, 10, 333, 1, 0, 0, 0, 12, 340, 1, 0, 0, 0, 14, 342,
		1, 0, 0, 0, 16, 359, 1, 0, 0, 0, 18, 361, 1, 0, 0, 0, 20, 364, 1, 0, 0,
		0, 22, 367, 1, 0, 0, 0, 24, 402, 1, 0, 0, 0, 26, 437, 1, 0, 0, 0, 28, 439,
		1, 0, 0, 0, 30, 441, 1, 0, 0, 0, 32, 477, 1, 0, 0, 0, 34, 481, 1, 0, 0,
		0, 36, 485, 1, 0, 0, 0, 38, 491, 1, 0, 0, 0, 40, 493, 1, 0, 0, 0, 42, 515,
		1, 0, 0, 0, 44, 539, 1, 0, 0, 0, 46, 541, 1, 0, 0, 0, 48, 545, 1, 0, 0,
		0, 50, 569, 1, 0, 0, 0, 52, 571, 1, 0, 0, 0, 54, 595, 1, 0, 0, 0, 56, 597,
		1, 0, 0, 0, 58, 621, 1, 0, 0, 0, 60, 623, 1, 0, 0, 0, 62, 631, 1, 0, 0,
		0, 64, 633, 1, 0, 0, 0, 66, 635, 1, 0, 0, 0, 68, 640, 1, 0, 0, 0, 70, 667,
		1, 0, 0, 0, 72, 671, 1, 0, 0, 0, 74, 701, 1, 0, 0, 0, 76, 715, 1, 0, 0,
		0, 78, 731, 1, 0, 0, 0, 80, 747, 1, 0, 0, 0, 82, 763, 1, 0, 0, 0, 84, 779,
		1, 0, 0, 0, 86, 799, 1, 0, 0, 0, 88, 816, 1, 0, 0, 0, 90, 820, 1, 0, 0,
		0, 92, 824, 1, 0, 0, 0, 94, 841, 1, 0, 0, 0, 96, 858, 1, 0, 0, 0, 98, 875,
		1, 0, 0, 0, 100, 888, 1, 0, 0, 0, 102, 905, 1, 0, 0, 0, 104, 909, 1, 0,
		0, 0, 106, 925, 1, 0, 0, 0, 108, 941, 1, 0, 0, 0, 110, 957, 1, 0, 0, 0,
		112, 973, 1, 0, 0, 0, 114, 990, 1, 0, 0, 0, 116, 995, 1, 0, 0, 0, 118,
		1012, 1, 0, 0, 0, 120, 1029, 1, 0, 0, 0, 122, 1046, 1, 0, 0, 0, 124, 1065,
		1, 0, 0, 0, 126, 1069, 1, 0, 0, 0, 128, 1071, 1, 0, 0, 0, 130, 1105, 1,
		0, 0, 0, 132, 1108, 1, 0, 0, 0, 134, 1111, 1, 0, 0, 0, 136, 1144, 1, 0,
		0, 0, 138, 1146, 1, 0, 0, 0, 140, 1180, 1, 0, 0, 0, 142, 1197, 1, 0, 0,
		0, 144, 1202, 1, 0, 0, 0, 146, 1204, 1, 0, 0, 0, 148, 1227, 1, 0, 0, 0,
		150, 1253, 1, 0, 0, 0, 152, 1275, 1, 0, 0, 0, 154, 1277, 1, 0, 0, 0, 156,
		1317, 1, 0, 0, 0, 158, 1349, 1, 0, 0, 0, 160, 1387, 1, 0, 0, 0, 162, 1389,
		1, 0, 0, 0, 164, 1432, 1, 0, 0, 0, 166, 1434, 1, 0, 0, 0, 168, 1473, 1,
		0, 0, 0, 170, 1475, 1, 0, 0, 0, 172, 1519, 1, 0, 0, 0, 174, 1521, 1, 0,
		0, 0, 176, 1551, 1, 0, 0, 0, 178, 1553, 1, 0, 0, 0, 180, 1590, 1, 0, 0,
		0, 182, 1592, 1, 0, 0, 0, 184, 1594, 1, 0, 0, 0, 186, 1640, 1, 0, 0, 0,
		188, 1653, 1, 0, 0, 0, 190, 1655, 1, 0, 0, 0, 192, 1657, 1, 0, 0, 0, 194,
		1666, 1, 0, 0, 0, 196, 1700, 1, 0, 0, 0, 198, 1703, 1, 0, 0, 0, 200, 1736,
		1, 0, 0, 0, 202, 1760, 1, 0, 0, 0, 204, 1794, 1, 0, 0, 0, 206, 1797, 1,
		0, 0, 0, 208, 1849, 1, 0, 0, 0, 210, 1851, 1, 0, 0, 0, 212, 1882, 1, 0,
		0, 0, 214, 1899, 1, 0, 0, 0, 216, 1916, 1, 0, 0, 0, 218, 1932, 1, 0, 0,
		0, 220, 1948, 1, 0, 0, 0, 222, 1964, 1, 0, 0, 0, 224, 1980, 1, 0, 0, 0,
		226, 2000, 1, 0, 0, 0, 228, 2020, 1, 0, 0, 0, 230, 2036, 1, 0, 0, 0, 232,
		2053, 1, 0, 0, 0, 234, 2070, 1, 0, 0, 0, 236, 2087, 1, 0, 0, 0, 238, 2127,
		1, 0, 0, 0, 240, 242, 5, 117, 0, 0, 241, 240, 1, 0, 0, 0, 242, 245, 1,
		0, 0, 0, 243, 241, 1, 0, 0, 0, 243, 244, 1, 0, 0, 0, 244, 255, 1, 0, 0,
		0, 245, 243, 1, 0, 0, 0, 246, 250, 3, 4, 2, 0, 247, 249, 5, 117, 0, 0,
		248, 247, 1, 0, 0, 0, 249, 252, 1, 0, 0, 0, 250, 248, 1, 0, 0, 0, 250,
		251, 1, 0, 0, 0, 251, 254, 1, 0, 0, 0, 252, 250, 1, 0, 0, 0, 253, 246,
		1, 0, 0, 0, 254, 257, 1, 0, 0, 0, 255, 253, 1, 0, 0, 0, 255, 256, 1, 0,
		0, 0, 256, 1, 1, 0, 0, 0, 257, 255, 1, 0, 0, 0, 258, 259, 5, 1, 0, 0, 259,
		260, 5, 119, 0, 0, 260, 3, 1, 0, 0, 0, 261, 265, 3, 2, 1, 0, 262, 264,
		5, 117, 0, 0, 263, 262, 1, 0, 0, 0, 264, 267, 1, 0, 0, 0, 265, 263, 1,
		0, 0, 0, 265, 266, 1, 0, 0, 0, 266, 268, 1, 0, 0, 0, 267, 265, 1, 0, 0,
		0, 268, 272, 5, 2, 0, 0, 269, 271, 5, 117, 0, 0, 270, 269, 1, 0, 0, 0,
		271, 274, 1, 0, 0, 0, 272, 270, 1, 0, 0, 0, 272, 273, 1, 0, 0, 0, 273,
		284, 1, 0, 0, 0, 274, 272, 1, 0, 0, 0, 275, 279, 3, 6, 3, 0, 276, 278,
		5, 117, 0, 0, 277, 276, 1, 0, 0, 0, 278, 281, 1, 0, 0, 0, 279, 277, 1,
		0, 0, 0, 279, 280, 1, 0, 0, 0, 280, 283, 1, 0, 0, 0, 281, 279, 1, 0, 0,
		0, 282, 275, 1, 0, 0, 0, 283, 286, 1, 0, 0, 0, 284, 282, 1, 0, 0, 0, 284,
		285, 1, 0, 0, 0, 285, 287, 1, 0, 0, 0, 286, 284, 1, 0, 0, 0, 287, 288,
		5, 3, 0, 0, 288, 5, 1, 0, 0, 0, 289, 295, 3, 8, 4, 0, 290, 295, 3, 128,
		64, 0, 291, 295, 3, 138, 69, 0, 292, 295, 3, 194, 97, 0, 293, 295, 3, 202,
		101, 0, 294, 289, 1, 0, 0, 0, 294, 290, 1, 0, 0, 0, 294, 291, 1, 0, 0,
		0, 294, 292, 1, 0, 0, 0, 294, 293, 1, 0, 0, 0, 295, 7, 1, 0, 0, 0, 296,
		300, 5, 4, 0, 0, 297, 299, 5, 117, 0, 0, 298, 297, 1, 0, 0, 0, 299, 302,
		1, 0, 0, 0, 300, 298, 1, 0, 0, 0, 300, 301, 1, 0, 0, 0, 301, 303, 1, 0,
		0, 0, 302, 300, 1, 0, 0, 0, 303, 307, 5, 2, 0, 0, 304, 306, 5, 117, 0,
		0, 305, 304, 1, 0, 0, 0, 306, 309, 1, 0, 0, 0, 307, 305, 1, 0, 0, 0, 307,
		308, 1, 0, 0, 0, 308, 319, 1, 0, 0, 0, 309, 307, 1, 0, 0, 0, 310, 314,
		3, 10, 5, 0, 311, 313, 5, 117, 0, 0, 312, 311, 1, 0, 0, 0, 313, 316, 1,
		0, 0, 0, 314, 312, 1, 0, 0, 0, 314, 315, 1, 0, 0, 0, 315, 318, 1, 0, 0,
		0, 316, 314, 1, 0, 0, 0, 317, 310, 1, 0, 0, 0, 318, 321, 1, 0, 0, 0, 319,
		317, 1, 0, 0, 0, 319, 320, 1, 0, 0, 0, 320, 325, 1, 0, 0, 0, 321, 319,
		1, 0, 0, 0, 322, 324, 5, 117, 0, 0, 323, 322, 1, 0, 0, 0, 324, 327, 1,
		0, 0, 0, 325, 323, 1, 0, 0, 0, 325, 326, 1, 0, 0, 0, 326, 328, 1, 0, 0,
		0, 327, 325, 1, 0, 0, 0, 328, 329, 5, 3, 0, 0, 329, 9, 1, 0, 0, 0, 330,
		334, 3, 14, 7, 0, 331, 334, 3, 18, 9, 0, 332, 334, 3, 60, 30, 0, 333, 330,
		1, 0, 0, 0, 333, 331, 1, 0, 0, 0, 333, 332, 1, 0, 0, 0, 334, 11, 1, 0,
		0, 0, 335, 337, 5, 5, 0, 0, 336, 335, 1, 0, 0, 0, 336, 337, 1, 0, 0, 0,
		337, 338, 1, 0, 0, 0, 338, 341, 5, 114, 0, 0, 339, 341, 5, 119, 0, 0, 340,
		336, 1, 0, 0, 0, 340, 339, 1, 0, 0, 0, 341, 13, 1, 0, 0, 0, 342, 343, 3,
		74, 37, 0, 343, 344, 3, 12, 6, 0, 344, 15, 1, 0, 0, 0, 345, 360, 3, 20,
		10, 0, 346, 360, 3, 28, 14, 0, 347, 360, 3, 30, 15, 0, 348, 360, 3, 32,
		16, 0, 349, 360, 3, 34, 17, 0, 350, 360, 3, 36, 18, 0, 351, 360, 3, 40,
		20, 0, 352, 360, 3, 42, 21, 0, 353, 360, 3, 52, 26, 0, 354, 360, 3, 56,
		28, 0, 355, 360, 3, 26, 13, 0, 356, 360, 3, 22, 11, 0, 357, 360, 3, 24,
		12, 0, 358, 360, 3, 48, 24, 0, 359, 345, 1, 0, 0, 0, 359, 346, 1, 0, 0,
		0, 359, 347, 1, 0, 0, 0, 359, 348, 1, 0, 0, 0, 359, 349, 1, 0, 0, 0, 359,
		350, 1, 0, 0, 0, 359, 351, 1, 0, 0, 0, 359, 352, 1, 0, 0, 0, 359, 353,
		1, 0, 0, 0, 359, 354, 1, 0, 0, 0, 359, 355, 1, 0, 0, 0, 359, 356, 1, 0,
		0, 0, 359, 357, 1, 0, 0, 0, 359, 358, 1, 0, 0, 0, 360, 17, 1, 0, 0, 0,
		361, 362, 3, 74, 37, 0, 362, 363, 3, 16, 8, 0, 363, 19, 1, 0, 0, 0, 364,
		365, 5, 6, 0, 0, 365, 366, 3, 16, 8, 0, 366, 21, 1, 0, 0, 0, 367, 371,
		5, 7, 0, 0, 368, 370, 5, 117, 0, 0, 369, 368, 1, 0, 0, 0, 370, 373, 1,
		0, 0, 0, 371, 369, 1, 0, 0, 0, 371, 372, 1, 0, 0, 0, 372, 374, 1, 0, 0,
		0, 373, 371, 1, 0, 0, 0, 374, 378, 5, 8, 0, 0, 375, 377, 5, 117, 0, 0,
		376, 375, 1, 0, 0, 0, 377, 380, 1, 0, 0, 0, 378, 376, 1, 0, 0, 0, 378,
		379, 1, 0, 0, 0, 379, 390, 1, 0, 0, 0, 380, 378, 1, 0, 0, 0, 381, 385,
		3, 16, 8, 0, 382, 384, 5, 117, 0, 0, 383, 382, 1, 0, 0, 0, 384, 387, 1,
		0, 0, 0, 385, 383, 1, 0, 0, 0, 385, 386, 1, 0, 0, 0, 386, 389, 1, 0, 0,
		0, 387, 385, 1, 0, 0, 0, 388, 381, 1, 0, 0, 0, 389, 392, 1, 0, 0, 0, 390,
		388, 1, 0, 0, 0, 390, 391, 1, 0, 0, 0, 391, 393, 1, 0, 0, 0, 392, 390,
		1, 0, 0, 0, 393, 397, 3, 16, 8, 0, 394, 396, 5, 117, 0, 0, 395, 394, 1,
		0, 0, 0, 396, 399, 1, 0, 0, 0, 397, 395, 1, 0, 0, 0, 397, 398, 1, 0, 0,
		0, 398, 400, 1, 0, 0, 0, 399, 397, 1, 0, 0, 0, 400, 401, 5, 9, 0, 0, 401,
		23, 1, 0, 0, 0, 402, 406, 5, 10, 0, 0, 403, 405, 5, 117, 0, 0, 404, 403,
		1, 0, 0, 0, 405, 408, 1, 0, 0, 0, 406, 404, 1, 0, 0, 0, 406, 407, 1, 0,
		0, 0, 407, 409, 1, 0, 0, 0, 408, 406, 1, 0, 0, 0, 409, 413, 5, 8, 0, 0,
		410, 412, 5, 117, 0, 0, 411, 410, 1, 0, 0, 0, 412, 415, 1, 0, 0, 0, 413,
		411, 1, 0, 0, 0, 413, 414, 1, 0, 0, 0, 414, 425, 1, 0, 0, 0, 415, 413,
		1, 0, 0, 0, 416, 420, 3, 16, 8, 0, 417, 419, 5, 117, 0, 0, 418, 417, 1,
		0, 0, 0, 419, 422, 1, 0, 0, 0, 420, 418, 1, 0, 0, 0, 420, 421, 1, 0, 0,
		0, 421, 424, 1, 0, 0, 0, 422, 420, 1, 0, 0, 0, 423, 416, 1, 0, 0, 0, 424,
		427, 1, 0, 0, 0, 425, 423, 1, 0, 0, 0, 425, 426, 1, 0, 0, 0, 426, 428,
		1, 0, 0, 0, 427, 425, 1, 0, 0, 0, 428, 432, 3, 16, 8, 0, 429, 431, 5, 117,
		0, 0, 430, 429, 1, 0, 0, 0, 431, 434, 1, 0, 0, 0, 432, 430, 1, 0, 0, 0,
		432, 433, 1, 0, 0, 0, 433, 435, 1, 0, 0, 0, 434, 432, 1, 0, 0, 0, 435,
		436, 5, 9, 0, 0, 436, 25, 1, 0, 0, 0, 437, 438, 3, 124, 62, 0, 438, 27,
		1, 0, 0, 0, 439, 440, 5, 11, 0, 0, 440, 29, 1, 0, 0, 0, 441, 442, 5, 12,
		0, 0, 442, 446, 5, 8, 0, 0, 443, 445, 5, 117, 0, 0, 444, 443, 1, 0, 0,
		0, 445, 448, 1, 0, 0, 0, 446, 444, 1, 0, 0, 0, 446, 447, 1, 0, 0, 0, 447,
		459, 1, 0, 0, 0, 448, 446, 1, 0, 0, 0, 449, 450, 3, 124, 62, 0, 450, 454,
		5, 13, 0, 0, 451, 453, 5, 117, 0, 0, 452, 451, 1, 0, 0, 0, 453, 456, 1,
		0, 0, 0, 454, 452, 1, 0, 0, 0, 454, 455, 1, 0, 0, 0, 455, 458, 1, 0, 0,
		0, 456, 454, 1, 0, 0, 0, 457, 449, 1, 0, 0, 0, 458, 461, 1, 0, 0, 0, 459,
		457, 1, 0, 0, 0, 459, 460, 1, 0, 0, 0, 460, 465, 1, 0, 0, 0, 461, 459,
		1, 0, 0, 0, 462, 464, 5, 117, 0, 0, 463, 462, 1, 0, 0, 0, 464, 467, 1,
		0, 0, 0, 465, 463, 1, 0, 0, 0, 465, 466, 1, 0, 0, 0, 466, 468, 1, 0, 0,
		0, 467, 465, 1, 0, 0, 0, 468, 472, 3, 124, 62, 0, 469, 471, 5, 117, 0,
		0, 470, 469, 1, 0, 0, 0, 471, 474, 1, 0, 0, 0, 472, 470, 1, 0, 0, 0, 472,
		473, 1, 0, 0, 0, 473, 475, 1, 0, 0, 0, 474, 472, 1, 0, 0, 0, 475, 476,
		5, 9, 0, 0, 476, 31, 1, 0, 0, 0, 477, 478, 5, 14, 0, 0, 478, 479, 5, 8,
		0, 0, 479, 480, 5, 9, 0, 0, 480, 33, 1, 0, 0, 0, 481, 482, 5, 15, 0, 0,
		482, 483, 5, 8, 0, 0, 483, 484, 5, 9, 0, 0, 484, 35, 1, 0, 0, 0, 485, 486,
		5, 16, 0, 0, 486, 487, 5, 8, 0, 0, 487, 488, 5, 9, 0, 0, 488, 37, 1, 0,
		0, 0, 489, 492, 3, 110, 55, 0, 490, 492, 3, 108, 54, 0, 491, 489, 1, 0,
		0, 0, 491, 490, 1, 0, 0, 0, 492, 39, 1, 0, 0, 0, 493, 494, 5, 17, 0, 0,
		494, 495, 5, 8, 0, 0, 495, 496, 3, 124, 62, 0, 496, 500, 5, 9, 0, 0, 497,
		499, 5, 117, 0, 0, 498, 497, 1, 0, 0, 0, 499, 502, 1, 0, 0, 0, 500, 498,
		1, 0, 0, 0, 500, 501, 1, 0, 0, 0, 501, 512, 1, 0, 0, 0, 502, 500, 1, 0,
		0, 0, 503, 507, 3, 38, 19, 0, 504, 506, 5, 117, 0, 0, 505, 504, 1, 0, 0,
		0, 506, 509, 1, 0, 0, 0, 507, 505, 1, 0, 0, 0, 507, 508, 1, 0, 0, 0, 508,
		511, 1, 0, 0, 0, 509, 507, 1, 0, 0, 0, 510, 503, 1, 0, 0, 0, 511, 514,
		1, 0, 0, 0, 512, 510, 1, 0, 0, 0, 512, 513, 1, 0, 0, 0, 513, 41, 1, 0,
		0, 0, 514, 512, 1, 0, 0, 0, 515, 516, 5, 18, 0, 0, 516, 517, 5, 113, 0,
		0, 517, 521, 5, 9, 0, 0, 518, 520, 5, 117, 0, 0, 519, 518, 1, 0, 0, 0,
		520, 523, 1, 0, 0, 0, 521, 519, 1, 0, 0, 0, 521, 522, 1, 0, 0, 0, 522,
		533, 1, 0, 0, 0, 523, 521, 1, 0, 0, 0, 524, 528, 3, 44, 22, 0, 525, 527,
		5, 117, 0, 0, 526, 525, 1, 0, 0, 0, 527, 530, 1, 0, 0, 0, 528, 526, 1,
		0, 0, 0, 528, 529, 1, 0, 0, 0, 529, 532, 1, 0, 0, 0, 530, 528, 1, 0, 0,
		0, 531, 524, 1, 0, 0, 0, 532, 535, 1, 0, 0, 0, 533, 531, 1, 0, 0, 0, 533,
		534, 1, 0, 0, 0, 534, 43, 1, 0, 0, 0, 535, 533, 1, 0, 0, 0, 536, 540, 3,
		100, 50, 0, 537, 540, 3, 102, 51, 0, 538, 540, 3, 46, 23, 0, 539, 536,
		1, 0, 0, 0, 539, 537, 1, 0, 0, 0, 539, 538, 1, 0, 0, 0, 540, 45, 1, 0,
		0, 0, 541, 542, 5, 19, 0, 0, 542, 543, 5, 114, 0, 0, 543, 544, 5, 9, 0,
		0, 544, 47, 1, 0, 0, 0, 545, 546, 5, 20, 0, 0, 546, 547, 5, 8, 0, 0, 547,
		548, 5, 116, 0, 0, 548, 552, 5, 9, 0, 0, 549, 551, 5, 117, 0, 0, 550, 549,
		1, 0, 0, 0, 551, 554, 1, 0, 0, 0, 552, 550, 1, 0, 0, 0, 552, 553, 1, 0,
		0, 0, 553, 564, 1, 0, 0, 0, 554, 552, 1, 0, 0, 0, 555, 559, 3, 50, 25,
		0, 556, 558, 5, 117, 0, 0, 557, 556, 1, 0, 0, 0, 558, 561, 1, 0, 0, 0,
		559, 557, 1, 0, 0, 0, 559, 560, 1, 0, 0, 0, 560, 563, 1, 0, 0, 0, 561,
		559, 1, 0, 0, 0, 562, 555, 1, 0, 0, 0, 563, 566, 1, 0, 0, 0, 564, 562,
		1, 0, 0, 0, 564, 565, 1, 0, 0, 0, 565, 49, 1, 0, 0, 0, 566, 564, 1, 0,
		0, 0, 567, 570, 3, 112, 56, 0, 568, 570, 3, 116, 58, 0, 569, 567, 1, 0,
		0, 0, 569, 568, 1, 0, 0, 0, 570, 51, 1, 0, 0, 0, 571, 572, 5, 21, 0, 0,
		572, 573, 5, 8, 0, 0, 573, 577, 5, 9, 0, 0, 574, 576, 5, 117, 0, 0, 575,
		574, 1, 0, 0, 0, 576, 579, 1, 0, 0, 0, 577, 575, 1, 0, 0, 0, 577, 578,
		1, 0, 0, 0, 578, 589, 1, 0, 0, 0, 579, 577, 1, 0, 0, 0, 580, 584, 3, 54,
		27, 0, 581, 583, 5, 117, 0, 0, 582, 581, 1, 0, 0, 0, 583, 586, 1, 0, 0,
		0, 584, 582, 1, 0, 0, 0, 584, 585, 1, 0, 0, 0, 585, 588, 1, 0, 0, 0, 586,
		584, 1, 0, 0, 0, 587, 580, 1, 0, 0, 0, 588, 591, 1, 0, 0, 0, 589, 587,
		1, 0, 0, 0, 589, 590, 1, 0, 0, 0, 590, 53, 1, 0, 0, 0, 591, 589, 1, 0,
		0, 0, 592, 596, 3, 100, 50, 0, 593, 596, 3, 102, 51, 0, 594, 596, 3, 104,
		52, 0, 595, 592, 1, 0, 0, 0, 595, 593, 1, 0, 0, 0, 595, 594, 1, 0, 0, 0,
		596, 55, 1, 0, 0, 0, 597, 598, 5, 22, 0, 0, 598, 599, 5, 8, 0, 0, 599,
		600, 3, 12, 6, 0, 600, 604, 5, 9, 0, 0, 601, 603, 5, 117, 0, 0, 602, 601,
		1, 0, 0, 0, 603, 606, 1, 0, 0, 0, 604, 602, 1, 0, 0, 0, 604, 605, 1, 0,
		0, 0, 605, 616, 1, 0, 0, 0, 606, 604, 1, 0, 0, 0, 607, 611, 3, 58, 29,
		0, 608, 610, 5, 117, 0, 0, 609, 608, 1, 0, 0, 0, 610, 613, 1, 0, 0, 0,
		611, 609, 1, 0, 0, 0, 611, 612, 1, 0, 0, 0, 612, 615, 1, 0, 0, 0, 613,
		611, 1, 0, 0, 0, 614, 607, 1, 0, 0, 0, 615, 618, 1, 0, 0, 0, 616, 614,
		1, 0, 0, 0, 616, 617, 1, 0, 0, 0, 617, 57, 1, 0, 0, 0, 618, 616, 1, 0,
		0, 0, 619, 622, 3, 106, 53, 0, 620, 622, 3, 102, 51, 0, 621, 619, 1, 0,
		0, 0, 621, 620, 1, 0, 0, 0, 622, 59, 1, 0, 0, 0, 623, 624, 3, 74, 37, 0,
		624, 625, 3, 62, 31, 0, 625, 61, 1, 0, 0, 0, 626, 632, 3, 66, 33, 0, 627,
		632, 3, 68, 34, 0, 628, 632, 3, 64, 32, 0, 629, 632, 3, 72, 36, 0, 630,
		632, 3, 70, 35, 0, 631, 626, 1, 0, 0, 0, 631, 627, 1, 0, 0, 0, 631, 628,
		1, 0, 0, 0, 631, 629, 1, 0, 0, 0, 631, 630, 1, 0, 0, 0, 632, 63, 1, 0,
		0, 0, 633, 634, 3, 124, 62, 0, 634, 65, 1, 0, 0, 0, 635, 636, 5, 23, 0,
		0, 636, 637, 5, 8, 0, 0, 637, 638, 3, 124, 62, 0, 638, 639, 5, 9, 0, 0,
		639, 67, 1, 0, 0, 0, 640, 644, 5, 24, 0, 0, 641, 643, 5, 117, 0, 0, 642,
		641, 1, 0, 0, 0, 643, 646, 1, 0, 0, 0, 644, 642, 1, 0, 0, 0, 644, 645,
		1, 0, 0, 0, 645, 656, 1, 0, 0, 0, 646, 644, 1, 0, 0, 0, 647, 651, 3, 62,
		31, 0, 648, 650, 5, 117, 0, 0, 649, 648, 1, 0, 0, 0, 650, 653, 1, 0, 0,
		0, 651, 649, 1, 0, 0, 0, 651, 652, 1, 0, 0, 0, 652, 655, 1, 0, 0, 0, 653,
		651, 1, 0, 0, 0, 654, 647, 1, 0, 0, 0, 655, 658, 1, 0, 0, 0, 656, 654,
		1, 0, 0, 0, 656, 657, 1, 0, 0, 0, 657, 662, 1, 0, 0, 0, 658, 656, 1, 0,
		0, 0, 659, 661, 5, 117, 0, 0, 660, 659, 1, 0, 0, 0, 661, 664, 1, 0, 0,
		0, 662, 660, 1, 0, 0, 0, 662, 663, 1, 0, 0, 0, 663, 665, 1, 0, 0, 0, 664,
		662, 1, 0, 0, 0, 665, 666, 5, 25, 0, 0, 666, 69, 1, 0, 0, 0, 667, 668,
		5, 26, 0, 0, 668, 669, 5, 8, 0, 0, 669, 670, 5, 9, 0, 0, 670, 71, 1, 0,
		0, 0, 671, 675, 5, 27, 0, 0, 672, 674, 5, 117, 0, 0, 673, 672, 1, 0, 0,
		0, 674, 677, 1, 0, 0, 0, 675, 673, 1, 0, 0, 0, 675, 676, 1, 0, 0, 0, 676,
		678, 1, 0, 0, 0, 677, 675, 1, 0, 0, 0, 678, 682, 5, 8, 0, 0, 679, 681,
		5, 117, 0, 0, 680, 679, 1, 0, 0, 0, 681, 684, 1, 0, 0, 0, 682, 680, 1,
		0, 0, 0, 682, 683, 1, 0, 0, 0, 683, 685, 1, 0, 0, 0, 684, 682, 1, 0, 0,
		0, 685, 689, 3, 16, 8, 0, 686, 688, 5, 117, 0, 0, 687, 686, 1, 0, 0, 0,
		688, 691, 1, 0, 0, 0, 689, 687, 1, 0, 0, 0, 689, 690, 1, 0, 0, 0, 690,
		692, 1, 0, 0, 0, 691, 689, 1, 0, 0, 0, 692, 696, 5, 9, 0, 0, 693, 695,
		5, 117, 0, 0, 694, 693, 1, 0, 0, 0, 695, 698, 1, 0, 0, 0, 696, 694, 1,
		0, 0, 0, 696, 697, 1, 0, 0, 0, 697, 699, 1, 0, 0, 0, 698, 696, 1, 0, 0,
		0, 699, 700, 3, 62, 31, 0, 700, 73, 1, 0, 0, 0, 701, 705, 5, 119, 0, 0,
		702, 704, 5, 117, 0, 0, 703, 702, 1, 0, 0, 0, 704, 707, 1, 0, 0, 0, 705,
		703, 1, 0, 0, 0, 705, 706, 1, 0, 0, 0, 706, 708, 1, 0, 0, 0, 707, 705,
		1, 0, 0, 0, 708, 712, 5, 28, 0, 0, 709, 711, 5, 117, 0, 0, 710, 709, 1,
		0, 0, 0, 711, 714, 1, 0, 0, 0, 712, 710, 1, 0, 0, 0, 712, 713, 1, 0, 0,
		0, 713, 75, 1, 0, 0, 0, 714, 712, 1, 0, 0, 0, 715, 719, 5, 29, 0, 0, 716,
		718, 5, 117, 0, 0, 717, 716, 1, 0, 0, 0, 718, 721, 1, 0, 0, 0, 719, 717,
		1, 0, 0, 0, 719, 720, 1, 0, 0, 0, 720, 722, 1, 0, 0, 0, 721, 719, 1, 0,
		0, 0, 722, 726, 3, 126, 63, 0, 723, 725, 5, 117, 0, 0, 724, 723, 1, 0,
		0, 0, 725, 728, 1, 0, 0, 0, 726, 724, 1, 0, 0, 0, 726, 727, 1, 0, 0, 0,
		727, 729, 1, 0, 0, 0, 728, 726, 1, 0, 0, 0, 729, 730, 5, 9, 0, 0, 730,
		77, 1, 0, 0, 0, 731, 735, 5, 30, 0, 0, 732, 734, 5, 117, 0, 0, 733, 732,
		1, 0, 0, 0, 734, 737, 1, 0, 0, 0, 735, 733, 1, 0, 0, 0, 735, 736, 1, 0,
		0, 0, 736, 738, 1, 0, 0, 0, 737, 735, 1, 0, 0, 0, 738, 742, 3, 126, 63,
		0, 739, 741, 5, 117, 0, 0, 740, 739, 1, 0, 0, 0, 741, 744, 1, 0, 0, 0,
		742, 740, 1, 0, 0, 0, 742, 743, 1, 0, 0, 0, 743, 745, 1, 0, 0, 0, 744,
		742, 1, 0, 0, 0, 745, 746, 5, 9, 0, 0, 746, 79, 1, 0, 0, 0, 747, 751, 5,
		31, 0, 0, 748, 750, 5, 117, 0, 0, 749, 748, 1, 0, 0, 0, 750, 753, 1, 0,
		0, 0, 751, 749, 1, 0, 0, 0, 751, 752, 1, 0, 0, 0, 752, 754, 1, 0, 0, 0,
		753, 751, 1, 0, 0, 0, 754, 758, 3, 126, 63, 0, 755, 757, 5, 117, 0, 0,
		756, 755, 1, 0, 0, 0, 757, 760, 1, 0, 0, 0, 758, 756, 1, 0, 0, 0, 758,
		759, 1, 0, 0, 0, 759, 761, 1, 0, 0, 0, 760, 758, 1, 0, 0, 0, 761, 762,
		5, 9, 0, 0, 762, 81, 1, 0, 0, 0, 763, 767, 5, 32, 0, 0, 764, 766, 5, 117,
		0, 0, 765, 764, 1, 0, 0, 0, 766, 769, 1, 0, 0, 0, 767, 765, 1, 0, 0, 0,
		767, 768, 1, 0, 0, 0, 768, 770, 1, 0, 0, 0, 769, 767, 1, 0, 0, 0, 770,
		774, 3, 126, 63, 0, 771, 773, 5, 117, 0, 0, 772, 771, 1, 0, 0, 0, 773,
		776, 1, 0, 0, 0, 774, 772, 1, 0, 0, 0, 774, 775, 1, 0, 0, 0, 775, 777,
		1, 0, 0, 0, 776, 774, 1, 0, 0, 0, 777, 778, 5, 9, 0, 0, 778, 83, 1, 0,
		0, 0, 779, 797, 5, 33, 0, 0, 780, 798, 3, 134, 67, 0, 781, 785, 5, 8, 0,
		0, 782, 784, 5, 117, 0, 0, 783, 782, 1, 0, 0, 0, 784, 787, 1, 0, 0, 0,
		785, 783, 1, 0, 0, 0, 785, 786, 1, 0, 0, 0, 786, 788, 1, 0, 0, 0, 787,
		785, 1, 0, 0, 0, 788, 792, 3, 124, 62, 0, 789, 791, 5, 117, 0, 0, 790,
		789, 1, 0, 0, 0, 791, 794, 1, 0, 0, 0, 792, 790, 1, 0, 0, 0, 792, 793,
		1, 0, 0, 0, 793, 795, 1, 0, 0, 0, 794, 792, 1, 0, 0, 0, 795, 796, 5, 9,
		0, 0, 796, 798, 1, 0, 0, 0, 797, 780, 1, 0, 0, 0, 797, 781, 1, 0, 0, 0,
		798, 85, 1, 0, 0, 0, 799, 800, 5, 34, 0, 0, 800, 804, 5, 8, 0, 0, 801,
		803, 5, 117, 0, 0, 802, 801, 1, 0, 0, 0, 803, 806, 1, 0, 0, 0, 804, 802,
		1, 0, 0, 0, 804, 805, 1, 0, 0, 0, 805, 807, 1, 0, 0, 0, 806, 804, 1, 0,
		0, 0, 807, 811, 3, 126, 63, 0, 808, 810, 5, 117, 0, 0, 809, 808, 1, 0,
		0, 0, 810, 813, 1, 0, 0, 0, 811, 809, 1, 0, 0, 0, 811, 812, 1, 0, 0, 0,
		812, 814, 1, 0, 0, 0, 813, 811, 1, 0, 0, 0, 814, 815, 5, 9, 0, 0, 815,
		87, 1, 0, 0, 0, 816, 817, 5, 35, 0, 0, 817, 818, 5, 8, 0, 0, 818, 819,
		5, 9, 0, 0, 819, 89, 1, 0, 0, 0, 820, 821, 5, 36, 0, 0, 821, 822, 5, 8,
		0, 0, 822, 823, 5, 9, 0, 0, 823, 91, 1, 0, 0, 0, 824, 825, 5, 37, 0, 0,
		825, 829, 5, 8, 0, 0, 826, 828, 5, 117, 0, 0, 827, 826, 1, 0, 0, 0, 828,
		831, 1, 0, 0, 0, 829, 827, 1, 0, 0, 0, 829, 830, 1, 0, 0, 0, 830, 832,
		1, 0, 0, 0, 831, 829, 1, 0, 0, 0, 832, 836, 3, 142, 71, 0, 833, 835, 5,
		117, 0, 0, 834, 833, 1, 0, 0, 0, 835, 838, 1, 0, 0, 0, 836, 834, 1, 0,
		0, 0, 836, 837, 1, 0, 0, 0, 837, 839, 1, 0, 0, 0, 838, 836, 1, 0, 0, 0,
		839, 840, 5, 9, 0, 0, 840, 93, 1, 0, 0, 0, 841, 842, 5, 38, 0, 0, 842,
		846, 5, 8, 0, 0, 843, 845, 5, 117, 0, 0, 844, 843, 1, 0, 0, 0, 845, 848,
		1, 0, 0, 0, 846, 844, 1, 0, 0, 0, 846, 847, 1, 0, 0, 0, 847, 849, 1, 0,
		0, 0, 848, 846, 1, 0, 0, 0, 849, 853, 3, 142, 71, 0, 850, 852, 5, 117,
		0, 0, 851, 850, 1, 0, 0, 0, 852, 855, 1, 0, 0, 0, 853, 851, 1, 0, 0, 0,
		853, 854, 1, 0, 0, 0, 854, 856, 1, 0, 0, 0, 855, 853, 1, 0, 0, 0, 856,
		857, 5, 9, 0, 0, 857, 95, 1, 0, 0, 0, 858, 859, 5, 39, 0, 0, 859, 863,
		5, 8, 0, 0, 860, 862, 5, 117, 0, 0, 861, 860, 1, 0, 0, 0, 862, 865, 1,
		0, 0, 0, 863, 861, 1, 0, 0, 0, 863, 864, 1, 0, 0, 0, 864, 866, 1, 0, 0,
		0, 865, 863, 1, 0, 0, 0, 866, 870, 3, 142, 71, 0, 867, 869, 5, 117, 0,
		0, 868, 867, 1, 0, 0, 0, 869, 872, 1, 0, 0, 0, 870, 868, 1, 0, 0, 0, 870,
		871, 1, 0, 0, 0, 871, 873, 1, 0, 0, 0, 872, 870, 1, 0, 0, 0, 873, 874,
		5, 9, 0, 0, 874, 97, 1, 0, 0, 0, 875, 876, 5, 40, 0, 0, 876, 882, 5, 8,
		0, 0, 877, 878, 3, 126, 63, 0, 878, 879, 5, 13, 0, 0, 879, 881, 1, 0, 0,
		0, 880, 877, 1, 0, 0, 0, 881, 884, 1, 0, 0, 0, 882, 880, 1, 0, 0, 0, 882,
		883, 1, 0, 0, 0, 883, 885, 1, 0, 0, 0, 884, 882, 1, 0, 0, 0, 885, 886,
		3, 126, 63, 0, 886, 887, 5, 9, 0, 0, 887, 99, 1, 0, 0, 0, 888, 889, 5,
		41, 0, 0, 889, 893, 5, 8, 0, 0, 890, 892, 5, 117, 0, 0, 891, 890, 1, 0,
		0, 0, 892, 895, 1, 0, 0, 0, 893, 891, 1, 0, 0, 0, 893, 894, 1, 0, 0, 0,
		894, 896, 1, 0, 0, 0, 895, 893, 1, 0, 0, 0, 896, 900, 5, 114, 0, 0, 897,
		899, 5, 117, 0, 0, 898, 897, 1, 0, 0, 0, 899, 902, 1, 0, 0, 0, 900, 898,
		1, 0, 0, 0, 900, 901, 1, 0, 0, 0, 901, 903, 1, 0, 0, 0, 902, 900, 1, 0,
		0, 0, 903, 904, 5, 9, 0, 0, 904, 101, 1, 0, 0, 0, 905, 906, 5, 42, 0, 0,
		906, 907, 5, 8, 0, 0, 907, 908, 5, 9, 0, 0, 908, 103, 1, 0, 0, 0, 909,
		913, 5, 43, 0, 0, 910, 912, 5, 117, 0, 0, 911, 910, 1, 0, 0, 0, 912, 915,
		1, 0, 0, 0, 913, 911, 1, 0, 0, 0, 913, 914, 1, 0, 0, 0, 914, 916, 1, 0,
		0, 0, 915, 913, 1, 0, 0, 0, 916, 920, 3, 126, 63, 0, 917, 919, 5, 117,
		0, 0, 918, 917, 1, 0, 0, 0, 919, 922, 1, 0, 0, 0, 920, 918, 1, 0, 0, 0,
		920, 921, 1, 0, 0, 0, 921, 923, 1, 0, 0, 0, 922, 920, 1, 0, 0, 0, 923,
		924, 5, 9, 0, 0, 924, 105, 1, 0, 0, 0, 925, 929, 5, 43, 0, 0, 926, 928,
		5, 117, 0, 0, 927, 926, 1, 0, 0, 0, 928, 931, 1, 0, 0, 0, 929, 927, 1,
		0, 0, 0, 929, 930, 1, 0, 0, 0, 930, 932, 1, 0, 0, 0, 931, 929, 1, 0, 0,
		0, 932, 936, 5, 114, 0, 0, 933, 935, 5, 117, 0, 0, 934, 933, 1, 0, 0, 0,
		935, 938, 1, 0, 0, 0, 936, 934, 1, 0, 0, 0, 936, 937, 1, 0, 0, 0, 937,
		939, 1, 0, 0, 0, 938, 936, 1, 0, 0, 0, 939, 940, 5, 9, 0, 0, 940, 107,
		1, 0, 0, 0, 941, 945, 5, 44, 0, 0, 942, 944, 5, 117, 0, 0, 943, 942, 1,
		0, 0, 0, 944, 947, 1, 0, 0, 0, 945, 943, 1, 0, 0, 0, 945, 946, 1, 0, 0,
		0, 946, 948, 1, 0, 0, 0, 947, 945, 1, 0, 0, 0, 948, 952, 3, 126, 63, 0,
		949, 951, 5, 117, 0, 0, 950, 949, 1, 0, 0, 0, 951, 954, 1, 0, 0, 0, 952,
		950, 1, 0, 0, 0, 952, 953, 1, 0, 0, 0, 953, 955, 1, 0, 0, 0, 954, 952,
		1, 0, 0, 0, 955, 956, 5, 9, 0, 0, 956, 109, 1, 0, 0, 0, 957, 961, 5, 45,
		0, 0, 958, 960, 5, 117, 0, 0, 959, 958, 1, 0, 0, 0, 960, 963, 1, 0, 0,
		0, 961, 959, 1, 0, 0, 0, 961, 962, 1, 0, 0, 0, 962, 964, 1, 0, 0, 0, 963,
		961, 1, 0, 0, 0, 964, 968, 3, 126, 63, 0, 965, 967, 5, 117, 0, 0, 966,
		965, 1, 0, 0, 0, 967, 970, 1, 0, 0, 0, 968, 966, 1, 0, 0, 0, 968, 969,
		1, 0, 0, 0, 969, 971, 1, 0, 0, 0, 970, 968, 1, 0, 0, 0, 971, 972, 5, 9,
		0, 0, 972, 111, 1, 0, 0, 0, 973, 974, 5, 46, 0, 0, 974, 978, 5, 8, 0, 0,
		975, 977, 5, 117, 0, 0, 976, 975, 1, 0, 0, 0, 977, 980, 1, 0, 0, 0, 978,
		976, 1, 0, 0, 0, 978, 979, 1, 0, 0, 0, 979, 981, 1, 0, 0, 0, 980, 978,
		1, 0, 0, 0, 981, 985, 3, 12, 6, 0, 982, 984, 5, 117, 0, 0, 983, 982, 1,
		0, 0, 0, 984, 987, 1, 0, 0, 0, 985, 983, 1, 0, 0, 0, 985, 986, 1, 0, 0,
		0, 986, 988, 1, 0, 0, 0, 987, 985, 1, 0, 0, 0, 988, 989, 5, 9, 0, 0, 989,
		113, 1, 0, 0, 0, 990, 991, 5, 46, 0, 0, 991, 992, 5, 8, 0, 0, 992, 993,
		5, 114, 0, 0, 993, 994, 5, 9, 0, 0, 994, 115, 1, 0, 0, 0, 995, 996, 5,
		47, 0, 0, 996, 1000, 5, 8, 0, 0, 997, 999, 5, 117, 0, 0, 998, 997, 1, 0,
		0, 0, 999, 1002, 1, 0, 0, 0, 1000, 998, 1, 0, 0, 0, 1000, 1001, 1, 0, 0,
		0, 1001, 1003, 1, 0, 0, 0, 1002, 1000, 1, 0, 0, 0, 1003, 1007, 3, 12, 6,
		0, 1004, 1006, 5, 117, 0, 0, 1005, 1004, 1, 0, 0, 0, 1006, 1009, 1, 0,
		0, 0, 1007, 1005, 1, 0, 0, 0, 1007, 1008, 1, 0, 0, 0, 1008, 1010, 1, 0,
		0, 0, 1009, 1007, 1, 0, 0, 0, 1010, 1011, 5, 9, 0, 0, 1011, 117, 1, 0,
		0, 0, 1012, 1013, 5, 47, 0, 0, 1013, 1017, 5, 8, 0, 0, 1014, 1016, 5, 117,
		0, 0, 1015, 1014, 1, 0, 0, 0, 1016, 1019, 1, 0, 0, 0, 1017, 1015, 1, 0,
		0, 0, 1017, 1018, 1, 0, 0, 0, 1018, 1020, 1, 0, 0, 0, 1019, 1017, 1, 0,
		0, 0, 1020, 1024, 5, 114, 0, 0, 1021, 1023, 5, 117, 0, 0, 1022, 1021, 1,
		0, 0, 0, 1023, 1026, 1, 0, 0, 0, 1024, 1022, 1, 0, 0, 0, 1024, 1025, 1,
		0, 0, 0, 1025, 1027, 1, 0, 0, 0, 1026, 1024, 1, 0, 0, 0, 1027, 1028, 5,
		9, 0, 0, 1028, 119, 1, 0, 0, 0, 1029, 1030, 5, 48, 0, 0, 1030, 1034, 5,
		8, 0, 0, 1031, 1033, 5, 117, 0, 0, 1032, 1031, 1, 0, 0, 0, 1033, 1036,
		1, 0, 0, 0, 1034, 1032, 1, 0, 0, 0, 1034, 1035, 1, 0, 0, 0, 1035, 1037,
		1, 0, 0, 0, 1036, 1034, 1, 0, 0, 0, 1037, 1041, 3, 142, 71, 0, 1038, 1040,
		5, 117, 0, 0, 1039, 1038, 1, 0, 0, 0, 1040, 1043, 1, 0, 0, 0, 1041, 1039,
		1, 0, 0, 0, 1041, 1042, 1, 0, 0, 0, 1042, 1044, 1, 0, 0, 0, 1043, 1041,
		1, 0, 0, 0, 1044, 1045, 5, 9, 0, 0, 1045, 121, 1, 0, 0, 0, 1046, 1047,
		5, 49, 0, 0, 1047, 1051, 5, 8, 0, 0, 1048, 1050, 5, 117, 0, 0, 1049, 1048,
		1, 0, 0, 0, 1050, 1053, 1, 0, 0, 0, 1051, 1049, 1, 0, 0, 0, 1051, 1052,
		1, 0, 0, 0, 1052, 1054, 1, 0, 0, 0, 1053, 1051, 1, 0, 0, 0, 1054, 1058,
		3, 142, 71, 0, 1055, 1057, 5, 117, 0, 0, 1056, 1055, 1, 0, 0, 0, 1057,
		1060, 1, 0, 0, 0, 1058, 1056, 1, 0, 0, 0, 1058, 1059, 1, 0, 0, 0, 1059,
		1061, 1, 0, 0, 0, 1060, 1058, 1, 0, 0, 0, 1061, 1062, 5, 9, 0, 0, 1062,
		123, 1, 0, 0, 0, 1063, 1064, 5, 119, 0, 0, 1064, 1066, 5, 50, 0, 0, 1065,
		1063, 1, 0, 0, 0, 1065, 1066, 1, 0, 0, 0, 1066, 1067, 1, 0, 0, 0, 1067,
		1068, 5, 119, 0, 0, 1068, 125, 1, 0, 0, 0, 1069, 1070, 7, 0, 0, 0, 1070,
		127, 1, 0, 0, 0, 1071, 1075, 5, 51, 0, 0, 1072, 1074, 5, 117, 0, 0, 1073,
		1072, 1, 0, 0, 0, 1074, 1077, 1, 0, 0, 0, 1075, 1073, 1, 0, 0, 0, 1075,
		1076, 1, 0, 0, 0, 1076, 1078, 1, 0, 0, 0, 1077, 1075, 1, 0, 0, 0, 1078,
		1082, 5, 2, 0, 0, 1079, 1081, 5, 117, 0, 0, 1080, 1079, 1, 0, 0, 0, 1081,
		1084, 1, 0, 0, 0, 1082, 1080, 1, 0, 0, 0, 1082, 1083, 1, 0, 0, 0, 1083,
		1094, 1, 0, 0, 0, 1084, 1082, 1, 0, 0, 0, 1085, 1089, 3, 130, 65, 0, 1086,
		1088, 5, 117, 0, 0, 1087, 1086, 1, 0, 0, 0, 1088, 1091, 1, 0, 0, 0, 1089,
		1087, 1, 0, 0, 0, 1089, 1090, 1, 0, 0, 0, 1090, 1093, 1, 0, 0, 0, 1091,
		1089, 1, 0, 0, 0, 1092, 1085, 1, 0, 0, 0, 1093, 1096, 1, 0, 0, 0, 1094,
		1092, 1, 0, 0, 0, 1094, 1095, 1, 0, 0, 0, 1095, 1100, 1, 0, 0, 0, 1096,
		1094, 1, 0, 0, 0, 1097, 1099, 5, 117, 0, 0, 1098, 1097, 1, 0, 0, 0, 1099,
		1102, 1, 0, 0, 0, 1100, 1098, 1, 0, 0, 0, 1100, 1101, 1, 0, 0, 0, 1101,
		1103, 1, 0, 0, 0, 1102, 1100, 1, 0, 0, 0, 1103, 1104, 5, 3, 0, 0, 1104,
		129, 1, 0, 0, 0, 1105, 1106, 3, 74, 37, 0, 1106, 1107, 3, 132, 66, 0, 1107,
		131, 1, 0, 0, 0, 1108, 1109, 5, 51, 0, 0, 1109, 1110, 3, 134, 67, 0, 1110,
		133, 1, 0, 0, 0, 1111, 1115, 5, 8, 0, 0, 1112, 1114, 5, 117, 0, 0, 1113,
		1112, 1, 0, 0, 0, 1114, 1117, 1, 0, 0, 0, 1115, 1113, 1, 0, 0, 0, 1115,
		1116, 1, 0, 0, 0, 1116, 1118, 1, 0, 0, 0, 1117, 1115, 1, 0, 0, 0, 1118,
		1122, 5, 114, 0, 0, 1119, 1121, 5, 117, 0, 0, 1120, 1119, 1, 0, 0, 0, 1121,
		1124, 1, 0, 0, 0, 1122, 1120, 1, 0, 0, 0, 1122, 1123, 1, 0, 0, 0, 1123,
		1125, 1, 0, 0, 0, 1124, 1122, 1, 0, 0, 0, 1125, 1129, 5, 9, 0, 0, 1126,
		1128, 5, 117, 0, 0, 1127, 1126, 1, 0, 0, 0, 1128, 1131, 1, 0, 0, 0, 1129,
		1127, 1, 0, 0, 0, 1129, 1130, 1, 0, 0, 0, 1130, 1141, 1, 0, 0, 0, 1131,
		1129, 1, 0, 0, 0, 1132, 1136, 3, 136, 68, 0, 1133, 1135, 5, 117, 0, 0,
		1134, 1133, 1, 0, 0, 0, 1135, 1138, 1, 0, 0, 0, 1136, 1134, 1, 0, 0, 0,
		1136, 1137, 1, 0, 0, 0, 1137, 1140, 1, 0, 0, 0, 1138, 1136, 1, 0, 0, 0,
		1139, 1132, 1, 0, 0, 0, 1140, 1143, 1, 0, 0, 0, 1141, 1139, 1, 0, 0, 0,
		1141, 1142, 1, 0, 0, 0, 1142, 135, 1, 0, 0, 0, 1143, 1141, 1, 0, 0, 0,
		1144, 1145, 3, 98, 49, 0, 1145, 137, 1, 0, 0, 0, 1146, 1150, 5, 52, 0,
		0, 1147, 1149, 5, 117, 0, 0, 1148, 1147, 1, 0, 0, 0, 1149, 1152, 1, 0,
		0, 0, 1150, 1148, 1, 0, 0, 0, 1150, 1151, 1, 0, 0, 0, 1151, 1153, 1, 0,
		0, 0, 1152, 1150, 1, 0, 0, 0, 1153, 1157, 5, 2, 0, 0, 1154, 1156, 5, 117,
		0, 0, 1155, 1154, 1, 0, 0, 0, 1156, 1159, 1, 0, 0, 0, 1157, 1155, 1, 0,
		0, 0, 1157, 1158, 1, 0, 0, 0, 1158, 1169, 1, 0, 0, 0, 1159, 1157, 1, 0,
		0, 0, 1160, 1164, 3, 140, 70, 0, 1161, 1163, 5, 117, 0, 0, 1162, 1161,
		1, 0, 0, 0, 1163, 1166, 1, 0, 0, 0, 1164, 1162, 1, 0, 0, 0, 1164, 1165,
		1, 0, 0, 0, 1165, 1168, 1, 0, 0, 0, 1166, 1164, 1, 0, 0, 0, 1167, 1160,
		1, 0, 0, 0, 1168, 1171, 1, 0, 0, 0, 1169, 1167, 1, 0, 0, 0, 1169, 1170,
		1, 0, 0, 0, 1170, 1175, 1, 0, 0, 0, 1171, 1169, 1, 0, 0, 0, 1172, 1174,
		5, 117, 0, 0, 1173, 1172, 1, 0, 0, 0, 1174, 1177, 1, 0, 0, 0, 1175, 1173,
		1, 0, 0, 0, 1175, 1176, 1, 0, 0, 0, 1176, 1178, 1, 0, 0, 0, 1177, 1175,
		1, 0, 0, 0, 1178, 1179, 5, 3, 0, 0, 1179, 139, 1, 0, 0, 0, 1180, 1181,
		3, 74, 37, 0, 1181, 1182, 3, 142, 71, 0, 1182, 141, 1, 0, 0, 0, 1183, 1198,
		3, 146, 73, 0, 1184, 1198, 3, 154, 77, 0, 1185, 1198, 3, 156, 78, 0, 1186,
		1198, 3, 188, 94, 0, 1187, 1198, 3, 150, 75, 0, 1188, 1198, 3, 144, 72,
		0, 1189, 1198, 3, 158, 79, 0, 1190, 1198, 3, 162, 81, 0, 1191, 1198, 3,
		166, 83, 0, 1192, 1198, 3, 170, 85, 0, 1193, 1198, 3, 174, 87, 0, 1194,
		1198, 3, 178, 89, 0, 1195, 1198, 3, 182, 91, 0, 1196, 1198, 3, 190, 95,
		0, 1197, 1183, 1, 0, 0, 0, 1197, 1184, 1, 0, 0, 0, 1197, 1185, 1, 0, 0,
		0, 1197, 1186, 1, 0, 0, 0, 1197, 1187, 1, 0, 0, 0, 1197, 1188, 1, 0, 0,
		0, 1197, 1189, 1, 0, 0, 0, 1197, 1190, 1, 0, 0, 0, 1197, 1191, 1, 0, 0,
		0, 1197, 1192, 1, 0, 0, 0, 1197, 1193, 1, 0, 0, 0, 1197, 1194, 1, 0, 0,
		0, 1197, 1195, 1, 0, 0, 0, 1197, 1196, 1, 0, 0, 0, 1198, 1200, 1, 0, 0,
		0, 1199, 1201, 3, 192, 96, 0, 1200, 1199, 1, 0, 0, 0, 1200, 1201, 1, 0,
		0, 0, 1201, 143, 1, 0, 0, 0, 1202, 1203, 7, 1, 0, 0, 1203, 145, 1, 0, 0,
		0, 1204, 1208, 7, 2, 0, 0, 1205, 1207, 5, 117, 0, 0, 1206, 1205, 1, 0,
		0, 0, 1207, 1210, 1, 0, 0, 0, 1208, 1206, 1, 0, 0, 0, 1208, 1209, 1, 0,
		0, 0, 1209, 1211, 1, 0, 0, 0, 1210, 1208, 1, 0, 0, 0, 1211, 1215, 5, 8,
		0, 0, 1212, 1214, 5, 117, 0, 0, 1213, 1212, 1, 0, 0, 0, 1214, 1217, 1,
		0, 0, 0, 1215, 1213, 1, 0, 0, 0, 1215, 1216, 1, 0, 0, 0, 1216, 1218, 1,
		0, 0, 0, 1217, 1215, 1, 0, 0, 0, 1218, 1222, 3, 142, 71, 0, 1219, 1221,
		5, 117, 0, 0, 1220, 1219, 1, 0, 0, 0, 1221, 1224, 1, 0, 0, 0, 1222, 1220,
		1, 0, 0, 0, 1222, 1223, 1, 0, 0, 0, 1223, 1225, 1, 0, 0, 0, 1224, 1222,
		1, 0, 0, 0, 1225, 1226, 5, 9, 0, 0, 1226, 147, 1, 0, 0, 0, 1227, 1228,
		3, 132, 66, 0, 1228, 149, 1, 0, 0, 0, 1229, 1233, 5, 51, 0, 0, 1230, 1232,
		5, 117, 0, 0, 1231, 1230, 1, 0, 0, 0, 1232, 1235, 1, 0, 0, 0, 1233, 1231,
		1, 0, 0, 0, 1233, 1234, 1, 0, 0, 0, 1234, 1236, 1, 0, 0, 0, 1235, 1233,
		1, 0, 0, 0, 1236, 1240, 5, 8, 0, 0, 1237, 1239, 5, 117, 0, 0, 1238, 1237,
		1, 0, 0, 0, 1239, 1242, 1, 0, 0, 0, 1240, 1238, 1, 0, 0, 0, 1240, 1241,
		1, 0, 0, 0, 1241, 1243, 1, 0, 0, 0, 1242, 1240, 1, 0, 0, 0, 1243, 1247,
		3, 124, 62, 0, 1244, 1246, 5, 117, 0, 0, 1245, 1244, 1, 0, 0, 0, 1246,
		1249, 1, 0, 0, 0, 1247, 1245, 1, 0, 0, 0, 1247, 1248, 1, 0, 0, 0, 1248,
		1250, 1, 0, 0, 0, 1249, 1247, 1, 0, 0, 0, 1250, 1251, 5, 9, 0, 0, 1251,
		1254, 1, 0, 0, 0, 1252, 1254, 3, 148, 74, 0, 1253, 1229, 1, 0, 0, 0, 1253,
		1252, 1, 0, 0, 0, 1254, 1258, 1, 0, 0, 0, 1255, 1257, 5, 117, 0, 0, 1256,
		1255, 1, 0, 0, 0, 1257, 1260, 1, 0, 0, 0, 1258, 1256, 1, 0, 0, 0, 1258,
		1259, 1, 0, 0, 0, 1259, 1270, 1, 0, 0, 0, 1260, 1258, 1, 0, 0, 0, 1261,
		1265, 3, 152, 76, 0, 1262, 1264, 5, 117, 0, 0, 1263, 1262, 1, 0, 0, 0,
		1264, 1267, 1, 0, 0, 0, 1265, 1263, 1, 0, 0, 0, 1265, 1266, 1, 0, 0, 0,
		1266, 1269, 1, 0, 0, 0, 1267, 1265, 1, 0, 0, 0, 1268, 1261, 1, 0, 0, 0,
		1269, 1272, 1, 0, 0, 0, 1270, 1268, 1, 0, 0, 0, 1270, 1271, 1, 0, 0, 0,
		1271, 151, 1, 0, 0, 0, 1272, 1270, 1, 0, 0, 0, 1273, 1276, 3, 76, 38, 0,
		1274, 1276, 3, 78, 39, 0, 1275, 1273, 1, 0, 0, 0, 1275, 1274, 1, 0, 0,
		0, 1276, 153, 1, 0, 0, 0, 1277, 1281, 5, 68, 0, 0, 1278, 1280, 5, 117,
		0, 0, 1279, 1278, 1, 0, 0, 0, 1280, 1283, 1, 0, 0, 0, 1281, 1279, 1, 0,
		0, 0, 1281, 1282, 1, 0, 0, 0, 1282, 1284, 1, 0, 0, 0, 1283, 1281, 1, 0,
		0, 0, 1284, 1288, 5, 8, 0, 0, 1285, 1287, 5, 117, 0, 0, 1286, 1285, 1,
		0, 0, 0, 1287, 1290, 1, 0, 0, 0, 1288, 1286, 1, 0, 0, 0, 1288, 1289, 1,
		0, 0, 0, 1289, 1291, 1, 0, 0, 0, 1290, 1288, 1, 0, 0, 0, 1291, 1295, 5,
		122, 0, 0, 1292, 1294, 5, 117, 0, 0, 1293, 1292, 1, 0, 0, 0, 1294, 1297,
		1, 0, 0, 0, 1295, 1293, 1, 0, 0, 0, 1295, 1296, 1, 0, 0, 0, 1296, 1298,
		1, 0, 0, 0, 1297, 1295, 1, 0, 0, 0, 1298, 1302, 5, 13, 0, 0, 1299, 1301,
		5, 117, 0, 0, 1300, 1299, 1, 0, 0, 0, 1301, 1304, 1, 0, 0, 0, 1302, 1300,
		1, 0, 0, 0, 1302, 1303, 1, 0, 0, 0, 1303, 1305, 1, 0, 0, 0, 1304, 1302,
		1, 0, 0, 0, 1305, 1309, 3, 142, 71, 0, 1306, 1308, 5, 117, 0, 0, 1307,
		1306, 1, 0, 0, 0, 1308, 1311, 1, 0, 0, 0, 1309, 1307, 1, 0, 0, 0, 1309,
		1310, 1, 0, 0, 0, 1310, 1312, 1, 0, 0, 0, 1311, 1309, 1, 0, 0, 0, 1312,
		1313, 5, 9, 0, 0, 1313, 155, 1, 0, 0, 0, 1314, 1318, 1, 0, 0, 0, 1315,
		1318, 5, 69, 0, 0, 1316, 1318, 5, 70, 0, 0, 1317, 1314, 1, 0, 0, 0, 1317,
		1315, 1, 0, 0, 0, 1317, 1316, 1, 0, 0, 0, 1318, 1322, 1, 0, 0, 0, 1319,
		1321, 5, 117, 0, 0, 1320, 1319, 1, 0, 0, 0, 1321, 1324, 1, 0, 0, 0, 1322,
		1320, 1, 0, 0, 0, 1322, 1323, 1, 0, 0, 0, 1323, 1325, 1, 0, 0, 0, 1324,
		1322, 1, 0, 0, 0, 1325, 1329, 5, 8, 0, 0, 1326, 1328, 5, 117, 0, 0, 1327,
		1326, 1, 0, 0, 0, 1328, 1331, 1, 0, 0, 0, 1329, 1327, 1, 0, 0, 0, 1329,
		1330, 1, 0, 0, 0, 1330, 1332, 1, 0, 0, 0, 1331, 1329, 1, 0, 0, 0, 1332,
		1333, 3, 142, 71, 0, 1333, 1337, 5, 13, 0, 0, 1334, 1336, 5, 117, 0, 0,
		1335, 1334, 1, 0, 0, 0, 1336, 1339, 1, 0, 0, 0, 1337, 1335, 1, 0, 0, 0,
		1337, 1338, 1, 0, 0, 0, 1338, 1340, 1, 0, 0, 0, 1339, 1337, 1, 0, 0, 0,
		1340, 1344, 3, 142, 71, 0, 1341, 1343, 5, 117, 0, 0, 1342, 1341, 1, 0,
		0, 0, 1343, 1346, 1, 0, 0, 0, 1344, 1342, 1, 0, 0, 0, 1344, 1345, 1, 0,
		0, 0, 1345, 1347, 1, 0, 0, 0, 1346, 1344, 1, 0, 0, 0, 1347, 1348, 5, 9,
		0, 0, 1348, 157, 1, 0, 0, 0, 1349, 1353, 5, 71, 0, 0, 1350, 1352, 5, 117,
		0, 0, 1351, 1350, 1, 0, 0, 0, 1352, 1355, 1, 0, 0, 0, 1353, 1351, 1, 0,
		0, 0, 1353, 1354, 1, 0, 0, 0, 1354, 1356, 1, 0, 0, 0, 1355, 1353, 1, 0,
		0, 0, 1356, 1360, 5, 8, 0, 0, 1357, 1359, 5, 117, 0, 0, 1358, 1357, 1,
		0, 0, 0, 1359, 1362, 1, 0, 0, 0, 1360, 1358, 1, 0, 0, 0, 1360, 1361, 1,
		0, 0, 0, 1361, 1363, 1, 0, 0, 0, 1362, 1360, 1, 0, 0, 0, 1363, 1367, 5,
		9, 0, 0, 1364, 1366, 5, 117, 0, 0, 1365, 1364, 1, 0, 0, 0, 1366, 1369,
		1, 0, 0, 0, 1367, 1365, 1, 0, 0, 0, 1367, 1368, 1, 0, 0, 0, 1368, 1379,
		1, 0, 0, 0, 1369, 1367, 1, 0, 0, 0, 1370, 1374, 3, 160, 80, 0, 1371, 1373,
		5, 117, 0, 0, 1372, 1371, 1, 0, 0, 0, 1373, 1376, 1, 0, 0, 0, 1374, 1372,
		1, 0, 0, 0, 1374, 1375, 1, 0, 0, 0, 1375, 1378, 1, 0, 0, 0, 1376, 1374,
		1, 0, 0, 0, 1377, 1370, 1, 0, 0, 0, 1378, 1381, 1, 0, 0, 0, 1379, 1377,
		1, 0, 0, 0, 1379, 1380, 1, 0, 0, 0, 1380, 159, 1, 0, 0, 0, 1381, 1379,
		1, 0, 0, 0, 1382, 1388, 3, 76, 38, 0, 1383, 1388, 3, 78, 39, 0, 1384, 1388,
		3, 80, 40, 0, 1385, 1388, 3, 82, 41, 0, 1386, 1388, 3, 86, 43, 0, 1387,
		1382, 1, 0, 0, 0, 1387, 1383, 1, 0, 0, 0, 1387, 1384, 1, 0, 0, 0, 1387,
		1385, 1, 0, 0, 0, 1387, 1386, 1, 0, 0, 0, 1388, 161, 1, 0, 0, 0, 1389,
		1393, 5, 72, 0, 0, 1390, 1392, 5, 117, 0, 0, 1391, 1390, 1, 0, 0, 0, 1392,
		1395, 1, 0, 0, 0, 1393, 1391, 1, 0, 0, 0, 1393, 1394, 1, 0, 0, 0, 1394,
		1396, 1, 0, 0, 0, 1395, 1393, 1, 0, 0, 0, 1396, 1400, 5, 8, 0, 0, 1397,
		1399, 5, 117, 0, 0, 1398, 1397, 1, 0, 0, 0, 1399, 1402, 1, 0, 0, 0, 1400,
		1398, 1, 0, 0, 0, 1400, 1401, 1, 0, 0, 0, 1401, 1403, 1, 0, 0, 0, 1402,
		1400, 1, 0, 0, 0, 1403, 1407, 3, 142, 71, 0, 1404, 1406, 5, 117, 0, 0,
		1405, 1404, 1, 0, 0, 0, 1406, 1409, 1, 0, 0, 0, 1407, 1405, 1, 0, 0, 0,
		1407, 1408, 1, 0, 0, 0, 1408, 1410, 1, 0, 0, 0, 1409, 1407, 1, 0, 0, 0,
		1410, 1414, 5, 9, 0, 0, 1411, 1413, 5, 117, 0, 0, 1412, 1411, 1, 0, 0,
		0, 1413, 1416, 1, 0, 0, 0, 1414, 1412, 1, 0, 0, 0, 1414, 1415, 1, 0, 0,
		0, 1415, 1426, 1, 0, 0, 0, 1416, 1414, 1, 0, 0, 0, 1417, 1421, 3, 164,
		82, 0, 1418, 1420, 5, 117, 0, 0, 1419, 1418, 1, 0, 0, 0, 1420, 1423, 1,
		0, 0, 0, 1421, 1419, 1, 0, 0, 0, 1421, 1422, 1, 0, 0, 0, 1422, 1425, 1,
		0, 0, 0, 1423, 1421, 1, 0, 0, 0, 1424, 1417, 1, 0, 0, 0, 1425, 1428, 1,
		0, 0, 0, 1426, 1424, 1, 0, 0, 0, 1426, 1427, 1, 0, 0, 0, 1427, 163, 1,
		0, 0, 0, 1428, 1426, 1, 0, 0, 0, 1429, 1433, 3, 88, 44, 0, 1430, 1433,
		3, 90, 45, 0, 1431, 1433, 3, 84, 42, 0, 1432, 1429, 1, 0, 0, 0, 1432, 1430,
		1, 0, 0, 0, 1432, 1431, 1, 0, 0, 0, 1433, 165, 1, 0, 0, 0, 1434, 1438,
		5, 73, 0, 0, 1435, 1437, 5, 117, 0, 0, 1436, 1435, 1, 0, 0, 0, 1437, 1440,
		1, 0, 0, 0, 1438, 1436, 1, 0, 0, 0, 1438, 1439, 1, 0, 0, 0, 1439, 1441,
		1, 0, 0, 0, 1440, 1438, 1, 0, 0, 0, 1441, 1445, 5, 8, 0, 0, 1442, 1444,
		5, 117, 0, 0, 1443, 1442, 1, 0, 0, 0, 1444, 1447, 1, 0, 0, 0, 1445, 1443,
		1, 0, 0, 0, 1445, 1446, 1, 0, 0, 0, 1446, 1448, 1, 0, 0, 0, 1447, 1445,
		1, 0, 0, 0, 1448, 1452, 5, 9, 0, 0, 1449, 1451, 5, 117, 0, 0, 1450, 1449,
		1, 0, 0, 0, 1451, 1454, 1, 0, 0, 0, 1452, 1450, 1, 0, 0, 0, 1452, 1453,
		1, 0, 0, 0, 1453, 1464, 1, 0, 0, 0, 1454, 1452, 1, 0, 0, 0, 1455, 1459,
		3, 168, 84, 0, 1456, 1458, 5, 117, 0, 0, 1457, 1456, 1, 0, 0, 0, 1458,
		1461, 1, 0, 0, 0, 1459, 1457, 1, 0, 0, 0, 1459, 1460, 1, 0, 0, 0, 1460,
		1463, 1, 0, 0, 0, 1461, 1459, 1, 0, 0, 0, 1462, 1455, 1, 0, 0, 0, 1463,
		1466, 1, 0, 0, 0, 1464, 1462, 1, 0, 0, 0, 1464, 1465, 1, 0, 0, 0, 1465,
		167, 1, 0, 0, 0, 1466, 1464, 1, 0, 0, 0, 1467, 1474, 3, 84, 42, 0, 1468,
		1474, 3, 76, 38, 0, 1469, 1474, 3, 78, 39, 0, 1470, 1474, 3, 92, 46, 0,
		1471, 1474, 3, 94, 47, 0, 1472, 1474, 3, 96, 48, 0, 1473, 1467, 1, 0, 0,
		0, 1473, 1468, 1, 0, 0, 0, 1473, 1469, 1, 0, 0, 0, 1473, 1470, 1, 0, 0,
		0, 1473, 1471, 1, 0, 0, 0, 1473, 1472, 1, 0, 0, 0, 1474, 169, 1, 0, 0,
		0, 1475, 1479, 5, 74, 0, 0, 1476, 1478, 5, 117, 0, 0, 1477, 1476, 1, 0,
		0, 0, 1478, 1481, 1, 0, 0, 0, 1479, 1477, 1, 0, 0, 0, 1479, 1480, 1, 0,
		0, 0, 1480, 1482, 1, 0, 0, 0, 1481, 1479, 1, 0, 0, 0, 1482, 1486, 5, 8,
		0, 0, 1483, 1485, 5, 117, 0, 0, 1484, 1483, 1, 0, 0, 0, 1485, 1488, 1,
		0, 0, 0, 1486, 1484, 1, 0, 0, 0, 1486, 1487, 1, 0, 0, 0, 1487, 1489, 1,
		0, 0, 0, 1488, 1486, 1, 0, 0, 0, 1489, 1493, 3, 142, 71, 0, 1490, 1492,
		5, 117, 0, 0, 1491, 1490, 1, 0, 0, 0, 1492, 1495, 1, 0, 0, 0, 1493, 1491,
		1, 0, 0, 0, 1493, 1494, 1, 0, 0, 0, 1494, 1496, 1, 0, 0, 0, 1495, 1493,
		1, 0, 0, 0, 1496, 1500, 5, 9, 0, 0, 1497, 1499, 5, 117, 0, 0, 1498, 1497,
		1, 0, 0, 0, 1499, 1502, 1, 0, 0, 0, 1500, 1498, 1, 0, 0, 0, 1500, 1501,
		1, 0, 0, 0, 1501, 1512, 1, 0, 0, 0, 1502, 1500, 1, 0, 0, 0, 1503, 1507,
		3, 172, 86, 0, 1504, 1506, 5, 117, 0, 0, 1505, 1504, 1, 0, 0, 0, 1506,
		1509, 1, 0, 0, 0, 1507, 1505, 1, 0, 0, 0, 1507, 1508, 1, 0, 0, 0, 1508,
		1511, 1, 0, 0, 0, 1509, 1507, 1, 0, 0, 0, 1510, 1503, 1, 0, 0, 0, 1511,
		1514, 1, 0, 0, 0, 1512, 1510, 1, 0, 0, 0, 1512, 1513, 1, 0, 0, 0, 1513,
		171, 1, 0, 0, 0, 1514, 1512, 1, 0, 0, 0, 1515, 1520, 3, 108, 54, 0, 1516,
		1520, 3, 110, 55, 0, 1517, 1520, 3, 120, 60, 0, 1518, 1520, 3, 122, 61,
		0, 1519, 1515, 1, 0, 0, 0, 1519, 1516, 1, 0, 0, 0, 1519, 1517, 1, 0, 0,
		0, 1519, 1518, 1, 0, 0, 0, 1520, 173, 1, 0, 0, 0, 1521, 1525, 5, 75, 0,
		0, 1522, 1524, 5, 117, 0, 0, 1523, 1522, 1, 0, 0, 0, 1524, 1527, 1, 0,
		0, 0, 1525, 1523, 1, 0, 0, 0, 1525, 1526, 1, 0, 0, 0, 1526, 1528, 1, 0,
		0, 0, 1527, 1525, 1, 0, 0, 0, 1528, 1529, 5, 8, 0, 0, 1529, 1530, 3, 142,
		71, 0, 1530, 1534, 5, 9, 0, 0, 1531, 1533, 5, 117, 0, 0, 1532, 1531, 1,
		0, 0, 0, 1533, 1536, 1, 0, 0, 0, 1534, 1532, 1, 0, 0, 0, 1534, 1535, 1,
		0, 0, 0, 1535, 1546, 1, 0, 0, 0, 1536, 1534, 1, 0, 0, 0, 1537, 1541, 3,
		176, 88, 0, 1538, 1540, 5, 117, 0, 0, 1539, 1538, 1, 0, 0, 0, 1540, 1543,
		1, 0, 0, 0, 1541, 1539, 1, 0, 0, 0, 1541, 1542, 1, 0, 0, 0, 1542, 1545,
		1, 0, 0, 0, 1543, 1541, 1, 0, 0, 0, 1544, 1537, 1, 0, 0, 0, 1545, 1548,
		1, 0, 0, 0, 1546, 1544, 1, 0, 0, 0, 1546, 1547, 1, 0, 0, 0, 1547, 175,
		1, 0, 0, 0, 1548, 1546, 1, 0, 0, 0, 1549, 1552, 3, 108, 54, 0, 1550, 1552,
		3, 110, 55, 0, 1551, 1549, 1, 0, 0, 0, 1551, 1550, 1, 0, 0, 0, 1552, 177,
		1, 0, 0, 0, 1553, 1557, 5, 76, 0, 0, 1554, 1556, 5, 117, 0, 0, 1555, 1554,
		1, 0, 0, 0, 1556, 1559, 1, 0, 0, 0, 1557, 1555, 1, 0, 0, 0, 1557, 1558,
		1, 0, 0, 0, 1558, 1560, 1, 0, 0, 0, 1559, 1557, 1, 0, 0, 0, 1560, 1564,
		5, 8, 0, 0, 1561, 1563, 5, 117, 0, 0, 1562, 1561, 1, 0, 0, 0, 1563, 1566,
		1, 0, 0, 0, 1564, 1562, 1, 0, 0, 0, 1564, 1565, 1, 0, 0, 0, 1565, 1567,
		1, 0, 0, 0, 1566, 1564, 1, 0, 0, 0, 1567, 1571, 5, 9, 0, 0, 1568, 1570,
		5, 117, 0, 0, 1569, 1568, 1, 0, 0, 0, 1570, 1573, 1, 0, 0, 0, 1571, 1569,
		1, 0, 0, 0, 1571, 1572, 1, 0, 0, 0, 1572, 1583, 1, 0, 0, 0, 1573, 1571,
		1, 0, 0, 0, 1574, 1578, 3, 180, 90, 0, 1575, 1577, 5, 117, 0, 0, 1576,
		1575, 1, 0, 0, 0, 1577, 1580, 1, 0, 0, 0, 1578, 1576, 1, 0, 0, 0, 1578,
		1579, 1, 0, 0, 0, 1579, 1582, 1, 0, 0, 0, 1580, 1578, 1, 0, 0, 0, 1581,
		1574, 1, 0, 0, 0, 1582, 1585, 1, 0, 0, 0, 1583, 1581, 1, 0, 0, 0, 1583,
		1584, 1, 0, 0, 0, 1584, 179, 1, 0, 0, 0, 1585, 1583, 1, 0, 0, 0, 1586,
		1591, 3, 114, 57, 0, 1587, 1591, 3, 118, 59, 0, 1588, 1591, 3, 108, 54,
		0, 1589, 1591, 3, 110, 55, 0, 1590, 1586, 1, 0, 0, 0, 1590, 1587, 1, 0,
		0, 0, 1590, 1588, 1, 0, 0, 0, 1590, 1589, 1, 0, 0, 0, 1591, 181, 1, 0,
		0, 0, 1592, 1593, 3, 184, 92, 0, 1593, 183, 1, 0, 0, 0, 1594, 1598, 5,
		77, 0, 0, 1595, 1597, 5, 117, 0, 0, 1596, 1595, 1, 0, 0, 0, 1597, 1600,
		1, 0, 0, 0, 1598, 1596, 1, 0, 0, 0, 1598, 1599, 1, 0, 0, 0, 1599, 1638,
		1, 0, 0, 0, 1600, 1598, 1, 0, 0, 0, 1601, 1605, 5, 8, 0, 0, 1602, 1604,
		5, 117, 0, 0, 1603, 1602, 1, 0, 0, 0, 1604, 1607, 1, 0, 0, 0, 1605, 1603,
		1, 0, 0, 0, 1605, 1606, 1, 0, 0, 0, 1606, 1608, 1, 0, 0, 0, 1607, 1605,
		1, 0, 0, 0, 1608, 1612, 3, 142, 71, 0, 1609, 1611, 5, 117, 0, 0, 1610,
		1609, 1, 0, 0, 0, 1611, 1614, 1, 0, 0, 0, 1612, 1610, 1, 0, 0, 0, 1612,
		1613, 1, 0, 0, 0, 1613, 1615, 1, 0, 0, 0, 1614, 1612, 1, 0, 0, 0, 1615,
		1619, 5, 9, 0, 0, 1616, 1618, 5, 117, 0, 0, 1617, 1616, 1, 0, 0, 0, 1618,
		1621, 1, 0, 0, 0, 1619, 1617, 1, 0, 0, 0, 1619, 1620, 1, 0, 0, 0, 1620,
		1631, 1, 0, 0, 0, 1621, 1619, 1, 0, 0, 0, 1622, 1626, 3, 186, 93, 0, 1623,
		1625, 5, 117, 0, 0, 1624, 1623, 1, 0, 0, 0, 1625, 1628, 1, 0, 0, 0, 1626,
		1624, 1, 0, 0, 0, 1626, 1627, 1, 0, 0, 0, 1627, 1630, 1, 0, 0, 0, 1628,
		1626, 1, 0, 0, 0, 1629, 1622, 1, 0, 0, 0, 1630, 1633, 1, 0, 0, 0, 1631,
		1629, 1, 0, 0, 0, 1631, 1632, 1, 0, 0, 0, 1632, 1639, 1, 0, 0, 0, 1633,
		1631, 1, 0, 0, 0, 1634, 1635, 5, 8, 0, 0, 1635, 1636, 3, 126, 63, 0, 1636,
		1637, 5, 9, 0, 0, 1637, 1639, 1, 0, 0, 0, 1638, 1601, 1, 0, 0, 0, 1638,
		1634, 1, 0, 0, 0, 1639, 185, 1, 0, 0, 0, 1640, 1641, 5, 78, 0, 0, 1641,
		1642, 5, 8, 0, 0, 1642, 1643, 3, 126, 63, 0, 1643, 1647, 5, 13, 0, 0, 1644,
		1648, 3, 126, 63, 0, 1645, 1648, 3, 184, 92, 0, 1646, 1648, 3, 124, 62,
		0, 1647, 1644, 1, 0, 0, 0, 1647, 1645, 1, 0, 0, 0, 1647, 1646, 1, 0, 0,
		0, 1648, 1649, 1, 0, 0, 0, 1649, 1650, 5, 13, 0, 0, 1650, 1651, 3, 126,
		63, 0, 1651, 1652, 5, 9, 0, 0, 1652, 187, 1, 0, 0, 0, 1653, 1654, 3, 126,
		63, 0, 1654, 189, 1, 0, 0, 0, 1655, 1656, 3, 124, 62, 0, 1656, 191, 1,
		0, 0, 0, 1657, 1661, 7, 3, 0, 0, 1658, 1660, 5, 117, 0, 0, 1659, 1658,
		1, 0, 0, 0, 1660, 1663, 1, 0, 0, 0, 1661, 1659, 1, 0, 0, 0, 1661, 1662,
		1, 0, 0, 0, 1662, 1664, 1, 0, 0, 0, 1663, 1661, 1, 0, 0, 0, 1664, 1665,
		3, 142, 71, 0, 1665, 193, 1, 0, 0, 0, 1666, 1670, 5, 81, 0, 0, 1667, 1669,
		5, 117, 0, 0, 1668, 1667, 1, 0, 0, 0, 1669, 1672, 1, 0, 0, 0, 1670, 1668,
		1, 0, 0, 0, 1670, 1671, 1, 0, 0, 0, 1671, 1673, 1, 0, 0, 0, 1672, 1670,
		1, 0, 0, 0, 1673, 1677, 5, 2, 0, 0, 1674, 1676, 5, 117, 0, 0, 1675, 1674,
		1, 0, 0, 0, 1676, 1679, 1, 0, 0, 0, 1677, 1675, 1, 0, 0, 0, 1677, 1678,
		1, 0, 0, 0, 1678, 1689, 1, 0, 0, 0, 1679, 1677, 1, 0, 0, 0, 1680, 1684,
		3, 196, 98, 0, 1681, 1683, 5, 117, 0, 0, 1682, 1681, 1, 0, 0, 0, 1683,
		1686, 1, 0, 0, 0, 1684, 1682, 1, 0, 0, 0, 1684, 1685, 1, 0, 0, 0, 1685,
		1688, 1, 0, 0, 0, 1686, 1684, 1, 0, 0, 0, 1687, 1680, 1, 0, 0, 0, 1688,
		1691, 1, 0, 0, 0, 1689, 1687, 1, 0, 0, 0, 1689, 1690, 1, 0, 0, 0, 1690,
		1695, 1, 0, 0, 0, 1691, 1689, 1, 0, 0, 0, 1692, 1694, 5, 117, 0, 0, 1693,
		1692, 1, 0, 0, 0, 1694, 1697, 1, 0, 0, 0, 1695, 1693, 1, 0, 0, 0, 1695,
		1696, 1, 0, 0, 0, 1696, 1698, 1, 0, 0, 0, 1697, 1695, 1, 0, 0, 0, 1698,
		1699, 5, 3, 0, 0, 1699, 195, 1, 0, 0, 0, 1700, 1701, 3, 74, 37, 0, 1701,
		1702, 3, 198, 99, 0, 1702, 197, 1, 0, 0, 0, 1703, 1707, 5, 82, 0, 0, 1704,
		1706, 5, 117, 0, 0, 1705, 1704, 1, 0, 0, 0, 1706, 1709, 1, 0, 0, 0, 1707,
		1705, 1, 0, 0, 0, 1707, 1708, 1, 0, 0, 0, 1708, 1710, 1, 0, 0, 0, 1709,
		1707, 1, 0, 0, 0, 1710, 1714, 5, 8, 0, 0, 1711, 1713, 5, 117, 0, 0, 1712,
		1711, 1, 0, 0, 0, 1713, 1716, 1, 0, 0, 0, 1714, 1712, 1, 0, 0, 0, 1714,
		1715, 1, 0, 0, 0, 1715, 1717, 1, 0, 0, 0, 1716, 1714, 1, 0, 0, 0, 1717,
		1721, 5, 9, 0, 0, 1718, 1720, 5, 117, 0, 0, 1719, 1718, 1, 0, 0, 0, 1720,
		1723, 1, 0, 0, 0, 1721, 1719, 1, 0, 0, 0, 1721, 1722, 1, 0, 0, 0, 1722,
		1733, 1, 0, 0, 0, 1723, 1721, 1, 0, 0, 0, 1724, 1728, 3, 200, 100, 0, 1725,
		1727, 5, 117, 0, 0, 1726, 1725, 1, 0, 0, 0, 1727, 1730, 1, 0, 0, 0, 1728,
		1726, 1, 0, 0, 0, 1728, 1729, 1, 0, 0, 0, 1729, 1732, 1, 0, 0, 0, 1730,
		1728, 1, 0, 0, 0, 1731, 1724, 1, 0, 0, 0, 1732, 1735, 1, 0, 0, 0, 1733,
		1731, 1, 0, 0, 0, 1733, 1734, 1, 0, 0, 0, 1734, 199, 1, 0, 0, 0, 1735,
		1733, 1, 0, 0, 0, 1736, 1737, 5, 83, 0, 0, 1737, 1741, 7, 4, 0, 0, 1738,
		1740, 5, 117, 0, 0, 1739, 1738, 1, 0, 0, 0, 1740, 1743, 1, 0, 0, 0, 1741,
		1739, 1, 0, 0, 0, 1741, 1742, 1, 0, 0, 0, 1742, 1744, 1, 0, 0, 0, 1743,
		1741, 1, 0, 0, 0, 1744, 1748, 5, 8, 0, 0, 1745, 1747, 5, 117, 0, 0, 1746,
		1745, 1, 0, 0, 0, 1747, 1750, 1, 0, 0, 0, 1748, 1746, 1, 0, 0, 0, 1748,
		1749, 1, 0, 0, 0, 1749, 1751, 1, 0, 0, 0, 1750, 1748, 1, 0, 0, 0, 1751,
		1755, 3, 142, 71, 0, 1752, 1754, 5, 117, 0, 0, 1753, 1752, 1, 0, 0, 0,
		1754, 1757, 1, 0, 0, 0, 1755, 1753, 1, 0, 0, 0, 1755, 1756, 1, 0, 0, 0,
		1756, 1758, 1, 0, 0, 0, 1757, 1755, 1, 0, 0, 0, 1758, 1759, 5, 9, 0, 0,
		1759, 201, 1, 0, 0, 0, 1760, 1764, 5, 98, 0, 0, 1761, 1763, 5, 117, 0,
		0, 1762, 1761, 1, 0, 0, 0, 1763, 1766, 1, 0, 0, 0, 1764, 1762, 1, 0, 0,
		0, 1764, 1765, 1, 0, 0, 0, 1765, 1767, 1, 0, 0, 0, 1766, 1764, 1, 0, 0,
		0, 1767, 1771, 5, 2, 0, 0, 1768, 1770, 5, 117, 0, 0, 1769, 1768, 1, 0,
		0, 0, 1770, 1773, 1, 0, 0, 0, 1771, 1769, 1, 0, 0, 0, 1771, 1772, 1, 0,
		0, 0, 1772, 1783, 1, 0, 0, 0, 1773, 1771, 1, 0, 0, 0, 1774, 1778, 3, 204,
		102, 0, 1775, 1777, 5, 117, 0, 0, 1776, 1775, 1, 0, 0, 0, 1777, 1780, 1,
		0, 0, 0, 1778, 1776, 1, 0, 0, 0, 1778, 1779, 1, 0, 0, 0, 1779, 1782, 1,
		0, 0, 0, 1780, 1778, 1, 0, 0, 0, 1781, 1774, 1, 0, 0, 0, 1782, 1785, 1,
		0, 0, 0, 1783, 1781, 1, 0, 0, 0, 1783, 1784, 1, 0, 0, 0, 1784, 1789, 1,
		0, 0, 0, 1785, 1783, 1, 0, 0, 0, 1786, 1788, 5, 117, 0, 0, 1787, 1786,
		1, 0, 0, 0, 1788, 1791, 1, 0, 0, 0, 1789, 1787, 1, 0, 0, 0, 1789, 1790,
		1, 0, 0, 0, 1790, 1792, 1, 0, 0, 0, 1791, 1789, 1, 0, 0, 0, 1792, 1793,
		5, 3, 0, 0, 1793, 203, 1, 0, 0, 0, 1794, 1795, 3, 74, 37, 0, 1795, 1796,
		3, 206, 103, 0, 1796, 205, 1, 0, 0, 0, 1797, 1801, 5, 98, 0, 0, 1798, 1800,
		5, 117, 0, 0, 1799, 1798, 1, 0, 0, 0, 1800, 1803, 1, 0, 0, 0, 1801, 1799,
		1, 0, 0, 0, 1801, 1802, 1, 0, 0, 0, 1802, 1804, 1, 0, 0, 0, 1803, 1801,
		1, 0, 0, 0, 1804, 1808, 5, 8, 0, 0, 1805, 1807, 5, 117, 0, 0, 1806, 1805,
		1, 0, 0, 0, 1807, 1810, 1, 0, 0, 0, 1808, 1806, 1, 0, 0, 0, 1808, 1809,
		1, 0, 0, 0, 1809, 1814, 1, 0, 0, 0, 1810, 1808, 1, 0, 0, 0, 1811, 1813,
		5, 117, 0, 0, 1812, 1811, 1, 0, 0, 0, 1813, 1816, 1, 0, 0, 0, 1814, 1812,
		1, 0, 0, 0, 1814, 1815, 1, 0, 0, 0, 1815, 1817, 1, 0, 0, 0, 1816, 1814,
		1, 0, 0, 0, 1817, 1821, 5, 9, 0, 0, 1818, 1820, 5, 117, 0, 0, 1819, 1818,
		1, 0, 0, 0, 1820, 1823, 1, 0, 0, 0, 1821, 1819, 1, 0, 0, 0, 1821, 1822,
		1, 0, 0, 0, 1822, 1833, 1, 0, 0, 0, 1823, 1821, 1, 0, 0, 0, 1824, 1828,
		3, 208, 104, 0, 1825, 1827, 5, 117, 0, 0, 1826, 1825, 1, 0, 0, 0, 1827,
		1830, 1, 0, 0, 0, 1828, 1826, 1, 0, 0, 0, 1828, 1829, 1, 0, 0, 0, 1829,
		1832, 1, 0, 0, 0, 1830, 1828, 1, 0, 0, 0, 1831, 1824, 1, 0, 0, 0, 1832,
		1835, 1, 0, 0, 0, 1833, 1831, 1, 0, 0, 0, 1833, 1834, 1, 0, 0, 0, 1834,
		207, 1, 0, 0, 0, 1835, 1833, 1, 0, 0, 0, 1836, 1850, 3, 214, 107, 0, 1837,
		1850, 3, 216, 108, 0, 1838, 1850, 3, 218, 109, 0, 1839, 1850, 3, 220, 110,
		0, 1840, 1850, 3, 222, 111, 0, 1841, 1850, 3, 224, 112, 0, 1842, 1850,
		3, 226, 113, 0, 1843, 1850, 3, 228, 114, 0, 1844, 1850, 3, 230, 115, 0,
		1845, 1850, 3, 232, 116, 0, 1846, 1850, 3, 210, 105, 0, 1847, 1850, 3,
		212, 106, 0, 1848, 1850, 3, 234, 117, 0, 1849, 1836, 1, 0, 0, 0, 1849,
		1837, 1, 0, 0, 0, 1849, 1838, 1, 0, 0, 0, 1849, 1839, 1, 0, 0, 0, 1849,
		1840, 1, 0, 0, 0, 1849, 1841, 1, 0, 0, 0, 1849, 1842, 1, 0, 0, 0, 1849,
		1843, 1, 0, 0, 0, 1849, 1844, 1, 0, 0, 0, 1849, 1845, 1, 0, 0, 0, 1849,
		1846, 1, 0, 0, 0, 1849, 1847, 1, 0, 0, 0, 1849, 1848, 1, 0, 0, 0, 1850,
		209, 1, 0, 0, 0, 1851, 1852, 5, 99, 0, 0, 1852, 1856, 5, 8, 0, 0, 1853,
		1855, 5, 117, 0, 0, 1854, 1853, 1, 0, 0, 0, 1855, 1858, 1, 0, 0, 0, 1856,
		1854, 1, 0, 0, 0, 1856, 1857, 1, 0, 0, 0, 1857, 1859, 1, 0, 0, 0, 1858,
		1856, 1, 0, 0, 0, 1859, 1863, 5, 114, 0, 0, 1860, 1862, 5, 117, 0, 0, 1861,
		1860, 1, 0, 0, 0, 1862, 1865, 1, 0, 0, 0, 1863, 1861, 1, 0, 0, 0, 1863,
		1864, 1, 0, 0, 0, 1864, 1866, 1, 0, 0, 0, 1865, 1863, 1, 0, 0, 0, 1866,
		1870, 5, 13, 0, 0, 1867, 1869, 5, 117, 0, 0, 1868, 1867, 1, 0, 0, 0, 1869,
		1872, 1, 0, 0, 0, 1870, 1868, 1, 0, 0, 0, 1870, 1871, 1, 0, 0, 0, 1871,
		1873, 1, 0, 0, 0, 1872, 1870, 1, 0, 0, 0, 1873, 1877, 5, 114, 0, 0, 1874,
		1876, 5, 117, 0, 0, 1875, 1874, 1, 0, 0, 0, 1876, 1879, 1, 0, 0, 0, 1877,
		1875, 1, 0, 0, 0, 1877, 1878, 1, 0, 0, 0, 1878, 1880, 1, 0, 0, 0, 1879,
		1877, 1, 0, 0, 0, 1880, 1881, 5, 9, 0, 0, 1881, 211, 1, 0, 0, 0, 1882,
		1883, 5, 100, 0, 0, 1883, 1887, 5, 8, 0, 0, 1884, 1886, 5, 117, 0, 0, 1885,
		1884, 1, 0, 0, 0, 1886, 1889, 1, 0, 0, 0, 1887, 1885, 1, 0, 0, 0, 1887,
		1888, 1, 0, 0, 0, 1888, 1890, 1, 0, 0, 0, 1889, 1887, 1, 0, 0, 0, 1890,
		1894, 3, 198, 99, 0, 1891, 1893, 5, 117, 0, 0, 1892, 1891, 1, 0, 0, 0,
		1893, 1896, 1, 0, 0, 0, 1894, 1892, 1, 0, 0, 0, 1894, 1895, 1, 0, 0, 0,
		1895, 1897, 1, 0, 0, 0, 1896, 1894, 1, 0, 0, 0, 1897, 1898, 5, 9, 0, 0,
		1898, 213, 1, 0, 0, 0, 1899, 1900, 5, 101, 0, 0, 1900, 1904, 5, 8, 0, 0,
		1901, 1903, 5, 117, 0, 0, 1902, 1901, 1, 0, 0, 0, 1903, 1906, 1, 0, 0,
		0, 1904, 1902, 1, 0, 0, 0, 1904, 1905, 1, 0, 0, 0, 1905, 1907, 1, 0, 0,
		0, 1906, 1904, 1, 0, 0, 0, 1907, 1911, 5, 114, 0, 0, 1908, 1910, 5, 117,
		0, 0, 1909, 1908, 1, 0, 0, 0, 1910, 1913, 1, 0, 0, 0, 1911, 1909, 1, 0,
		0, 0, 1911, 1912, 1, 0, 0, 0, 1912, 1914, 1, 0, 0, 0, 1913, 1911, 1, 0,
		0, 0, 1914, 1915, 5, 9, 0, 0, 1915, 215, 1, 0, 0, 0, 1916, 1917, 5, 102,
		0, 0, 1917, 1921, 5, 8, 0, 0, 1918, 1920, 5, 117, 0, 0, 1919, 1918, 1,
		0, 0, 0, 1920, 1923, 1, 0, 0, 0, 1921, 1919, 1, 0, 0, 0, 1921, 1922, 1,
		0, 0, 0, 1922, 1927, 1, 0, 0, 0, 1923, 1921, 1, 0, 0, 0, 1924, 1926, 5,
		117, 0, 0, 1925, 1924, 1, 0, 0, 0, 1926, 1929, 1, 0, 0, 0, 1927, 1925,
		1, 0, 0, 0, 1927, 1928, 1, 0, 0, 0, 1928, 1930, 1, 0, 0, 0, 1929, 1927,
		1, 0, 0, 0, 1930, 1931, 5, 9, 0, 0, 1931, 217, 1, 0, 0, 0, 1932, 1933,
		5, 103, 0, 0, 1933, 1937, 5, 8, 0, 0, 1934, 1936, 5, 117, 0, 0, 1935, 1934,
		1, 0, 0, 0, 1936, 1939, 1, 0, 0, 0, 1937, 1935, 1, 0, 0, 0, 1937, 1938,
		1, 0, 0, 0, 1938, 1943, 1, 0, 0, 0, 1939, 1937, 1, 0, 0, 0, 1940, 1942,
		5, 117, 0, 0, 1941, 1940, 1, 0, 0, 0, 1942, 1945, 1, 0, 0, 0, 1943, 1941,
		1, 0, 0, 0, 1943, 1944, 1, 0, 0, 0, 1944, 1946, 1, 0, 0, 0, 1945, 1943,
		1, 0, 0, 0, 1946, 1947, 5, 9, 0, 0, 1947, 219, 1, 0, 0, 0, 1948, 1949,
		5, 104, 0, 0, 1949, 1953, 5, 8, 0, 0, 1950, 1952, 5, 117, 0, 0, 1951, 1950,
		1, 0, 0, 0, 1952, 1955, 1, 0, 0, 0, 1953, 1951, 1, 0, 0, 0, 1953, 1954,
		1, 0, 0, 0, 1954, 1959, 1, 0, 0, 0, 1955, 1953, 1, 0, 0, 0, 1956, 1958,
		5, 117, 0, 0, 1957, 1956, 1, 0, 0, 0, 1958, 1961, 1, 0, 0, 0, 1959, 1957,
		1, 0, 0, 0, 1959, 1960, 1, 0, 0, 0, 1960, 1962, 1, 0, 0, 0, 1961, 1959,
		1, 0, 0, 0, 1962, 1963, 5, 9, 0, 0, 1963, 221, 1, 0, 0, 0, 1964, 1965,
		5, 105, 0, 0, 1965, 1969, 5, 8, 0, 0, 1966, 1968, 5, 117, 0, 0, 1967, 1966,
		1, 0, 0, 0, 1968, 1971, 1, 0, 0, 0, 1969, 1967, 1, 0, 0, 0, 1969, 1970,
		1, 0, 0, 0, 1970, 1975, 1, 0, 0, 0, 1971, 1969, 1, 0, 0, 0, 1972, 1974,
		5, 117, 0, 0, 1973, 1972, 1, 0, 0, 0, 1974, 1977, 1, 0, 0, 0, 1975, 1973,
		1, 0, 0, 0, 1975, 1976, 1, 0, 0, 0, 1976, 1978, 1, 0, 0, 0, 1977, 1975,
		1, 0, 0, 0, 1978, 1979, 5, 9, 0, 0, 1979, 223, 1, 0, 0, 0, 1980, 1981,
		5, 106, 0, 0, 1981, 1985, 5, 8, 0, 0, 1982, 1984, 5, 117, 0, 0, 1983, 1982,
		1, 0, 0, 0, 1984, 1987, 1, 0, 0, 0, 1985, 1983, 1, 0, 0, 0, 1985, 1986,
		1, 0, 0, 0, 1986, 1990, 1, 0, 0, 0, 1987, 1985, 1, 0, 0, 0, 1988, 1991,
		3, 236, 118, 0, 1989, 1991, 3, 124, 62, 0, 1990, 1988, 1, 0, 0, 0, 1990,
		1989, 1, 0, 0, 0, 1991, 1995, 1, 0, 0, 0, 1992, 1994, 5, 117, 0, 0, 1993,
		1992, 1, 0, 0, 0, 1994, 1997, 1, 0, 0, 0, 1995, 1993, 1, 0, 0, 0, 1995,
		1996, 1, 0, 0, 0, 1996, 1998, 1, 0, 0, 0, 1997, 1995, 1, 0, 0, 0, 1998,
		1999, 5, 9, 0, 0, 1999, 225, 1, 0, 0, 0, 2000, 2001, 5, 107, 0, 0, 2001,
		2005, 5, 8, 0, 0, 2002, 2004, 5, 117, 0, 0, 2003, 2002, 1, 0, 0, 0, 2004,
		2007, 1, 0, 0, 0, 2005, 2003, 1, 0, 0, 0, 2005, 2006, 1, 0, 0, 0, 2006,
		2010, 1, 0, 0, 0, 2007, 2005, 1, 0, 0, 0, 2008, 2011, 3, 236, 118, 0, 2009,
		2011, 3, 124, 62, 0, 2010, 2008, 1, 0, 0, 0, 2010, 2009, 1, 0, 0, 0, 2011,
		2015, 1, 0, 0, 0, 2012, 2014, 5, 117, 0, 0, 2013, 2012, 1, 0, 0, 0, 2014,
		2017, 1, 0, 0, 0, 2015, 2013, 1, 0, 0, 0, 2015, 2016, 1, 0, 0, 0, 2016,
		2018, 1, 0, 0, 0, 2017, 2015, 1, 0, 0, 0, 2018, 2019, 5, 9, 0, 0, 2019,
		227, 1, 0, 0, 0, 2020, 2021, 5, 108, 0, 0, 2021, 2025, 5, 8, 0, 0, 2022,
		2024, 5, 117, 0, 0, 2023, 2022, 1, 0, 0, 0, 2024, 2027, 1, 0, 0, 0, 2025,
		2023, 1, 0, 0, 0, 2025, 2026, 1, 0, 0, 0, 2026, 2031, 1, 0, 0, 0, 2027,
		2025, 1, 0, 0, 0, 2028, 2030, 5, 117, 0, 0, 2029, 2028, 1, 0, 0, 0, 2030,
		2033, 1, 0, 0, 0, 2031, 2029, 1, 0, 0, 0, 2031, 2032, 1, 0, 0, 0, 2032,
		2034, 1, 0, 0, 0, 2033, 2031, 1, 0, 0, 0, 2034, 2035, 5, 9, 0, 0, 2035,
		229, 1, 0, 0, 0, 2036, 2037, 5, 109, 0, 0, 2037, 2041, 5, 8, 0, 0, 2038,
		2040, 5, 117, 0, 0, 2039, 2038, 1, 0, 0, 0, 2040, 2043, 1, 0, 0, 0, 2041,
		2039, 1, 0, 0, 0, 2041, 2042, 1, 0, 0, 0, 2042, 2044, 1, 0, 0, 0, 2043,
		2041, 1, 0, 0, 0, 2044, 2048, 5, 114, 0, 0, 2045, 2047, 5, 117, 0, 0, 2046,
		2045, 1, 0, 0, 0, 2047, 2050, 1, 0, 0, 0, 2048, 2046, 1, 0, 0, 0, 2048,
		2049, 1, 0, 0, 0, 2049, 2051, 1, 0, 0, 0, 2050, 2048, 1, 0, 0, 0, 2051,
		2052, 5, 9, 0, 0, 2052, 231, 1, 0, 0, 0, 2053, 2054, 5, 110, 0, 0, 2054,
		2058, 5, 8, 0, 0, 2055, 2057, 5, 117, 0, 0, 2056, 2055, 1, 0, 0, 0, 2057,
		2060, 1, 0, 0, 0, 2058, 2056, 1, 0, 0, 0, 2058, 2059, 1, 0, 0, 0, 2059,
		2061, 1, 0, 0, 0, 2060, 2058, 1, 0, 0, 0, 2061, 2065, 5, 114, 0, 0, 2062,
		2064, 5, 117, 0, 0, 2063, 2062, 1, 0, 0, 0, 2064, 2067, 1, 0, 0, 0, 2065,
		2063, 1, 0, 0, 0, 2065, 2066, 1, 0, 0, 0, 2066, 2068, 1, 0, 0, 0, 2067,
		2065, 1, 0, 0, 0, 2068, 2069, 5, 9, 0, 0, 2069, 233, 1, 0, 0, 0, 2070,
		2071, 5, 111, 0, 0, 2071, 2075, 5, 8, 0, 0, 2072, 2074, 5, 117, 0, 0, 2073,
		2072, 1, 0, 0, 0, 2074, 2077, 1, 0, 0, 0, 2075, 2073, 1, 0, 0, 0, 2075,
		2076, 1, 0, 0, 0, 2076, 2078, 1, 0, 0, 0, 2077, 2075, 1, 0, 0, 0, 2078,
		2082, 3, 62, 31, 0, 2079, 2081, 5, 117, 0, 0, 2080, 2079, 1, 0, 0, 0, 2081,
		2084, 1, 0, 0, 0, 2082, 2080, 1, 0, 0, 0, 2082, 2083, 1, 0, 0, 0, 2083,
		2085, 1, 0, 0, 0, 2084, 2082, 1, 0, 0, 0, 2085, 2086, 5, 9, 0, 0, 2086,
		235, 1, 0, 0, 0, 2087, 2091, 5, 23, 0, 0, 2088, 2090, 5, 117, 0, 0, 2089,
		2088, 1, 0, 0, 0, 2090, 2093, 1, 0, 0, 0, 2091, 2089, 1, 0, 0, 0, 2091,
		2092, 1, 0, 0, 0, 2092, 2094, 1, 0, 0, 0, 2093, 2091, 1, 0, 0, 0, 2094,
		2098, 5, 8, 0, 0, 2095, 2097, 5, 117, 0, 0, 2096, 2095, 1, 0, 0, 0, 2097,
		2100, 1, 0, 0, 0, 2098, 2096, 1, 0, 0, 0, 2098, 2099, 1, 0, 0, 0, 2099,
		2101, 1, 0, 0, 0, 2100, 2098, 1, 0, 0, 0, 2101, 2105, 3, 124, 62, 0, 2102,
		2104, 5, 117, 0, 0, 2103, 2102, 1, 0, 0, 0, 2104, 2107, 1, 0, 0, 0, 2105,
		2103, 1, 0, 0, 0, 2105, 2106, 1, 0, 0, 0, 2106, 2108, 1, 0, 0, 0, 2107,
		2105, 1, 0, 0, 0, 2108, 2112, 5, 9, 0, 0, 2109, 2111, 5, 117, 0, 0, 2110,
		2109, 1, 0, 0, 0, 2111, 2114, 1, 0, 0, 0, 2112, 2110, 1, 0, 0, 0, 2112,
		2113, 1, 0, 0, 0, 2113, 2124, 1, 0, 0, 0, 2114, 2112, 1, 0, 0, 0, 2115,
		2119, 3, 238, 119, 0, 2116, 2118, 5, 117, 0, 0, 2117, 2116, 1, 0, 0, 0,
		2118, 2121, 1, 0, 0, 0, 2119, 2117, 1, 0, 0, 0, 2119, 2120, 1, 0, 0, 0,
		2120, 2123, 1, 0, 0, 0, 2121, 2119, 1, 0, 0, 0, 2122, 2115, 1, 0, 0, 0,
		2123, 2126, 1, 0, 0, 0, 2124, 2122, 1, 0, 0, 0, 2124, 2125, 1, 0, 0, 0,
		2125, 237, 1, 0, 0, 0, 2126, 2124, 1, 0, 0, 0, 2127, 2128, 5, 83, 0, 0,
		2128, 2129, 5, 112, 0, 0, 2129, 2130, 5, 8, 0, 0, 2130, 2131, 5, 116, 0,
		0, 2131, 2132, 5, 13, 0, 0, 2132, 2133, 5, 116, 0, 0, 2133, 2134, 5, 9,
		0, 0, 2134, 239, 1, 0, 0, 0, 249, 243, 250, 255, 265, 272, 279, 284, 294,
		300, 307, 314, 319, 325, 333, 336, 340, 359, 371, 378, 385, 390, 397, 406,
		413, 420, 425, 432, 446, 454, 459, 465, 472, 491, 500, 507, 512, 521, 528,
		533, 539, 552, 559, 564, 569, 577, 584, 589, 595, 604, 611, 616, 621, 631,
		644, 651, 656, 662, 675, 682, 689, 696, 705, 712, 719, 726, 735, 742, 751,
		758, 767, 774, 785, 792, 797, 804, 811, 829, 836, 846, 853, 863, 870, 882,
		893, 900, 913, 920, 929, 936, 945, 952, 961, 968, 978, 985, 1000, 1007,
		1017, 1024, 1034, 1041, 1051, 1058, 1065, 1075, 1082, 1089, 1094, 1100,
		1115, 1122, 1129, 1136, 1141, 1150, 1157, 1164, 1169, 1175, 1197, 1200,
		1208, 1215, 1222, 1233, 1240, 1247, 1253, 1258, 1265, 1270, 1275, 1281,
		1288, 1295, 1302, 1309, 1317, 1322, 1329, 1337, 1344, 1353, 1360, 1367,
		1374, 1379, 1387, 1393, 1400, 1407, 1414, 1421, 1426, 1432, 1438, 1445,
		1452, 1459, 1464, 1473, 1479, 1486, 1493, 1500, 1507, 1512, 1519, 1525,
		1534, 1541, 1546, 1551, 1557, 1564, 1571, 1578, 1583, 1590, 1598, 1605,
		1612, 1619, 1626, 1631, 1638, 1647, 1661, 1670, 1677, 1684, 1689, 1695,
		1707, 1714, 1721, 1728, 1733, 1741, 1748, 1755, 1764, 1771, 1778, 1783,
		1789, 1801, 1808, 1814, 1821, 1828, 1833, 1849, 1856, 1863, 1870, 1877,
		1887, 1894, 1904, 1911, 1921, 1927, 1937, 1943, 1953, 1959, 1969, 1975,
		1985, 1990, 1995, 2005, 2010, 2015, 2025, 2031, 2041, 2048, 2058, 2065,
		2075, 2082, 2091, 2098, 2105, 2112, 2119, 2124,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// MinecraftMetascriptParserInit initializes any static state used to implement MinecraftMetascriptParser. By default the
// static state used to implement the parser is lazily initialized during the first call to
// NewMinecraftMetascriptParser(). You can call this function if you wish to initialize the static state ahead
// of time.
func MinecraftMetascriptParserInit() {
	staticData := &MinecraftMetascriptParserStaticData
	staticData.once.Do(minecraftmetascriptParserInit)
}

// NewMinecraftMetascriptParser produces a new parser instance for the optional input antlr.TokenStream.
func NewMinecraftMetascriptParser(input antlr.TokenStream) *MinecraftMetascriptParser {
	MinecraftMetascriptParserInit()
	this := new(MinecraftMetascriptParser)
	this.BaseParser = antlr.NewBaseParser(input)
	staticData := &MinecraftMetascriptParserStaticData
	this.Interpreter = antlr.NewParserATNSimulator(this, staticData.atn, staticData.decisionToDFA, staticData.PredictionContextCache)
	this.RuleNames = staticData.RuleNames
	this.LiteralNames = staticData.LiteralNames
	this.SymbolicNames = staticData.SymbolicNames
	this.GrammarFileName = "MinecraftMetascript.g4"

	return this
}

// MinecraftMetascriptParser tokens.
const (
	MinecraftMetascriptParserEOF                 = antlr.TokenEOF
	MinecraftMetascriptParserT__0                = 1
	MinecraftMetascriptParserT__1                = 2
	MinecraftMetascriptParserT__2                = 3
	MinecraftMetascriptParserT__3                = 4
	MinecraftMetascriptParserT__4                = 5
	MinecraftMetascriptParserT__5                = 6
	MinecraftMetascriptParserT__6                = 7
	MinecraftMetascriptParserT__7                = 8
	MinecraftMetascriptParserT__8                = 9
	MinecraftMetascriptParserT__9                = 10
	MinecraftMetascriptParserT__10               = 11
	MinecraftMetascriptParserT__11               = 12
	MinecraftMetascriptParserT__12               = 13
	MinecraftMetascriptParserT__13               = 14
	MinecraftMetascriptParserT__14               = 15
	MinecraftMetascriptParserT__15               = 16
	MinecraftMetascriptParserT__16               = 17
	MinecraftMetascriptParserT__17               = 18
	MinecraftMetascriptParserT__18               = 19
	MinecraftMetascriptParserT__19               = 20
	MinecraftMetascriptParserT__20               = 21
	MinecraftMetascriptParserT__21               = 22
	MinecraftMetascriptParserT__22               = 23
	MinecraftMetascriptParserT__23               = 24
	MinecraftMetascriptParserT__24               = 25
	MinecraftMetascriptParserT__25               = 26
	MinecraftMetascriptParserT__26               = 27
	MinecraftMetascriptParserT__27               = 28
	MinecraftMetascriptParserT__28               = 29
	MinecraftMetascriptParserT__29               = 30
	MinecraftMetascriptParserT__30               = 31
	MinecraftMetascriptParserT__31               = 32
	MinecraftMetascriptParserT__32               = 33
	MinecraftMetascriptParserT__33               = 34
	MinecraftMetascriptParserT__34               = 35
	MinecraftMetascriptParserT__35               = 36
	MinecraftMetascriptParserT__36               = 37
	MinecraftMetascriptParserT__37               = 38
	MinecraftMetascriptParserT__38               = 39
	MinecraftMetascriptParserT__39               = 40
	MinecraftMetascriptParserT__40               = 41
	MinecraftMetascriptParserT__41               = 42
	MinecraftMetascriptParserT__42               = 43
	MinecraftMetascriptParserT__43               = 44
	MinecraftMetascriptParserT__44               = 45
	MinecraftMetascriptParserT__45               = 46
	MinecraftMetascriptParserT__46               = 47
	MinecraftMetascriptParserT__47               = 48
	MinecraftMetascriptParserT__48               = 49
	MinecraftMetascriptParserT__49               = 50
	MinecraftMetascriptParserT__50               = 51
	MinecraftMetascriptParserT__51               = 52
	MinecraftMetascriptParserT__52               = 53
	MinecraftMetascriptParserT__53               = 54
	MinecraftMetascriptParserT__54               = 55
	MinecraftMetascriptParserT__55               = 56
	MinecraftMetascriptParserT__56               = 57
	MinecraftMetascriptParserT__57               = 58
	MinecraftMetascriptParserT__58               = 59
	MinecraftMetascriptParserT__59               = 60
	MinecraftMetascriptParserT__60               = 61
	MinecraftMetascriptParserT__61               = 62
	MinecraftMetascriptParserT__62               = 63
	MinecraftMetascriptParserT__63               = 64
	MinecraftMetascriptParserT__64               = 65
	MinecraftMetascriptParserT__65               = 66
	MinecraftMetascriptParserT__66               = 67
	MinecraftMetascriptParserT__67               = 68
	MinecraftMetascriptParserT__68               = 69
	MinecraftMetascriptParserT__69               = 70
	MinecraftMetascriptParserT__70               = 71
	MinecraftMetascriptParserT__71               = 72
	MinecraftMetascriptParserT__72               = 73
	MinecraftMetascriptParserT__73               = 74
	MinecraftMetascriptParserT__74               = 75
	MinecraftMetascriptParserT__75               = 76
	MinecraftMetascriptParserT__76               = 77
	MinecraftMetascriptParserT__77               = 78
	MinecraftMetascriptParserT__78               = 79
	MinecraftMetascriptParserT__79               = 80
	MinecraftMetascriptParserT__80               = 81
	MinecraftMetascriptParserT__81               = 82
	MinecraftMetascriptParserT__82               = 83
	MinecraftMetascriptParserT__83               = 84
	MinecraftMetascriptParserT__84               = 85
	MinecraftMetascriptParserT__85               = 86
	MinecraftMetascriptParserT__86               = 87
	MinecraftMetascriptParserT__87               = 88
	MinecraftMetascriptParserT__88               = 89
	MinecraftMetascriptParserT__89               = 90
	MinecraftMetascriptParserT__90               = 91
	MinecraftMetascriptParserT__91               = 92
	MinecraftMetascriptParserT__92               = 93
	MinecraftMetascriptParserT__93               = 94
	MinecraftMetascriptParserT__94               = 95
	MinecraftMetascriptParserT__95               = 96
	MinecraftMetascriptParserT__96               = 97
	MinecraftMetascriptParserT__97               = 98
	MinecraftMetascriptParserT__98               = 99
	MinecraftMetascriptParserT__99               = 100
	MinecraftMetascriptParserT__100              = 101
	MinecraftMetascriptParserT__101              = 102
	MinecraftMetascriptParserT__102              = 103
	MinecraftMetascriptParserT__103              = 104
	MinecraftMetascriptParserT__104              = 105
	MinecraftMetascriptParserT__105              = 106
	MinecraftMetascriptParserT__106              = 107
	MinecraftMetascriptParserT__107              = 108
	MinecraftMetascriptParserT__108              = 109
	MinecraftMetascriptParserT__109              = 110
	MinecraftMetascriptParserT__110              = 111
	MinecraftMetascriptParserT__111              = 112
	MinecraftMetascriptParserStoneDepthMode      = 113
	MinecraftMetascriptParserInt                 = 114
	MinecraftMetascriptParserFloat               = 115
	MinecraftMetascriptParserString_             = 116
	MinecraftMetascriptParserNL                  = 117
	MinecraftMetascriptParserWS                  = 118
	MinecraftMetascriptParserIdentifier          = 119
	MinecraftMetascriptParserBlockComment        = 120
	MinecraftMetascriptParserLineComment         = 121
	MinecraftMetascriptParserDensityFn_CacheKind = 122
)

// MinecraftMetascriptParser rules.
const (
	MinecraftMetascriptParserRULE_script                                                 = 0
	MinecraftMetascriptParserRULE_namespaceDeclaration                                   = 1
	MinecraftMetascriptParserRULE_namespace                                              = 2
	MinecraftMetascriptParserRULE_contentBlocks                                          = 3
	MinecraftMetascriptParserRULE_surfaceBlock                                           = 4
	MinecraftMetascriptParserRULE_surfaceStatement                                       = 5
	MinecraftMetascriptParserRULE_verticalAnchor                                         = 6
	MinecraftMetascriptParserRULE_verticalAnchorDeclaration                              = 7
	MinecraftMetascriptParserRULE_surfaceCondition                                       = 8
	MinecraftMetascriptParserRULE_surfaceConditionDeclaration                            = 9
	MinecraftMetascriptParserRULE_surfaceCondition_Not                                   = 10
	MinecraftMetascriptParserRULE_surfaceCondition_And                                   = 11
	MinecraftMetascriptParserRULE_surfaceCondition_Or                                    = 12
	MinecraftMetascriptParserRULE_surfaceCondition_Reference                             = 13
	MinecraftMetascriptParserRULE_surfaceCondition_AboveSurface                          = 14
	MinecraftMetascriptParserRULE_surfaceCondition_Biome                                 = 15
	MinecraftMetascriptParserRULE_surfaceCondition_Hole                                  = 16
	MinecraftMetascriptParserRULE_surfaceCondition_Steep                                 = 17
	MinecraftMetascriptParserRULE_surfaceCondition_Freezing                              = 18
	MinecraftMetascriptParserRULE_surfaceCondition_NoiseThresholdBuilder                 = 19
	MinecraftMetascriptParserRULE_surfaceCondition_NoiseThreshold                        = 20
	MinecraftMetascriptParserRULE_surfaceCondition_StoneDepth                            = 21
	MinecraftMetascriptParserRULE_surfaceCondition_StoneDepthBuilder                     = 22
	MinecraftMetascriptParserRULE_surfaceCondition_StoneDepthBuilder_SecondaryDepthRange = 23
	MinecraftMetascriptParserRULE_surfaceCondition_VerticalGradient                      = 24
	MinecraftMetascriptParserRULE_surfaceCondition_VerticalGradientBuilder               = 25
	MinecraftMetascriptParserRULE_surfaceCondition_AboveWater                            = 26
	MinecraftMetascriptParserRULE_surfaceCondition_AboveWaterBuilder                     = 27
	MinecraftMetascriptParserRULE_surfaceCondition_YAbove                                = 28
	MinecraftMetascriptParserRULE_surfaceCondition_YAboveBuilder                         = 29
	MinecraftMetascriptParserRULE_surfaceRuleDeclaration                                 = 30
	MinecraftMetascriptParserRULE_surfaceRule                                            = 31
	MinecraftMetascriptParserRULE_surfaceRule_Reference                                  = 32
	MinecraftMetascriptParserRULE_surfaceRule_Block                                      = 33
	MinecraftMetascriptParserRULE_surfaceRule_Sequence                                   = 34
	MinecraftMetascriptParserRULE_surfaceRule_Bandlands                                  = 35
	MinecraftMetascriptParserRULE_surfaceRule_If                                         = 36
	MinecraftMetascriptParserRULE_declare                                                = 37
	MinecraftMetascriptParserRULE_builder_XZScale                                        = 38
	MinecraftMetascriptParserRULE_builder_YScale                                         = 39
	MinecraftMetascriptParserRULE_builder_XZFactor                                       = 40
	MinecraftMetascriptParserRULE_builder_YFactor                                        = 41
	MinecraftMetascriptParserRULE_builder_Noise                                          = 42
	MinecraftMetascriptParserRULE_builder_Smear                                          = 43
	MinecraftMetascriptParserRULE_builder_Type1                                          = 44
	MinecraftMetascriptParserRULE_builder_Type2                                          = 45
	MinecraftMetascriptParserRULE_builder_ShiftX                                         = 46
	MinecraftMetascriptParserRULE_builder_ShiftY                                         = 47
	MinecraftMetascriptParserRULE_builder_ShiftZ                                         = 48
	MinecraftMetascriptParserRULE_builder_Amplitudes                                     = 49
	MinecraftMetascriptParserRULE_builder_Offset                                         = 50
	MinecraftMetascriptParserRULE_builder_Add                                            = 51
	MinecraftMetascriptParserRULE_builder_Mul                                            = 52
	MinecraftMetascriptParserRULE_builder_MulInt                                         = 53
	MinecraftMetascriptParserRULE_builder_Min                                            = 54
	MinecraftMetascriptParserRULE_builder_Max                                            = 55
	MinecraftMetascriptParserRULE_builder_Top                                            = 56
	MinecraftMetascriptParserRULE_builder_TopLiteral                                     = 57
	MinecraftMetascriptParserRULE_builder_Bottom                                         = 58
	MinecraftMetascriptParserRULE_builder_BottomLiteral                                  = 59
	MinecraftMetascriptParserRULE_builder_InRange                                        = 60
	MinecraftMetascriptParserRULE_builder_OutRange                                       = 61
	MinecraftMetascriptParserRULE_resourceReference                                      = 62
	MinecraftMetascriptParserRULE_number                                                 = 63
	MinecraftMetascriptParserRULE_noiseBlock                                             = 64
	MinecraftMetascriptParserRULE_noiseDeclaration                                       = 65
	MinecraftMetascriptParserRULE_noise                                                  = 66
	MinecraftMetascriptParserRULE_noiseDefinition                                        = 67
	MinecraftMetascriptParserRULE_noise_Builder                                          = 68
	MinecraftMetascriptParserRULE_densityFnBlock                                         = 69
	MinecraftMetascriptParserRULE_densityFnDeclaration                                   = 70
	MinecraftMetascriptParserRULE_densityFn                                              = 71
	MinecraftMetascriptParserRULE_densityFn_NoInput                                      = 72
	MinecraftMetascriptParserRULE_densityFn_SingleInput                                  = 73
	MinecraftMetascriptParserRULE_densityFn_InlineNoise                                  = 74
	MinecraftMetascriptParserRULE_densityFn_Noise                                        = 75
	MinecraftMetascriptParserRULE_densityFn_NoiseBuilder                                 = 76
	MinecraftMetascriptParserRULE_densityFn_Cache                                        = 77
	MinecraftMetascriptParserRULE_densityFn_DualInput                                    = 78
	MinecraftMetascriptParserRULE_densityFn_OldBlendedNoise                              = 79
	MinecraftMetascriptParserRULE_densityFn_OldBlendedNoiseBuilder                       = 80
	MinecraftMetascriptParserRULE_densityFn_WierdScaledSampler                           = 81
	MinecraftMetascriptParserRULE_densityFn_WierdScaledSamplerBuilder                    = 82
	MinecraftMetascriptParserRULE_densityFn_ShiftedNoise                                 = 83
	MinecraftMetascriptParserRULE_densityFn_ShiftedNoiseBuilder                          = 84
	MinecraftMetascriptParserRULE_densityFn_RangeChoice                                  = 85
	MinecraftMetascriptParserRULE_densityFn_RangeChoiceBuilder                           = 86
	MinecraftMetascriptParserRULE_densityFn_Clamp                                        = 87
	MinecraftMetascriptParserRULE_densityFn_ClampBuilder                                 = 88
	MinecraftMetascriptParserRULE_densityFn_YClampedGradient                             = 89
	MinecraftMetascriptParserRULE_densityFn_YClampedGradientBuilder                      = 90
	MinecraftMetascriptParserRULE_densityFn_SplineFn                                     = 91
	MinecraftMetascriptParserRULE_densityFn_Spline                                       = 92
	MinecraftMetascriptParserRULE_densityFn_SplinePoint                                  = 93
	MinecraftMetascriptParserRULE_densityFn_Constant                                     = 94
	MinecraftMetascriptParserRULE_densityFn_Reference                                    = 95
	MinecraftMetascriptParserRULE_densityFn_Math                                         = 96
	MinecraftMetascriptParserRULE_noiseRouterBlock                                       = 97
	MinecraftMetascriptParserRULE_noiseRouterDeclaration                                 = 98
	MinecraftMetascriptParserRULE_noiseRouter                                            = 99
	MinecraftMetascriptParserRULE_noiseRouter_Builder                                    = 100
	MinecraftMetascriptParserRULE_noiseSettingsBlock                                     = 101
	MinecraftMetascriptParserRULE_noiseSettingsDeclaration                               = 102
	MinecraftMetascriptParserRULE_noiseSettings                                          = 103
	MinecraftMetascriptParserRULE_noiseSettings_Builder                                  = 104
	MinecraftMetascriptParserRULE_builder_NoiseSize                                      = 105
	MinecraftMetascriptParserRULE_builder_NoiseRouter                                    = 106
	MinecraftMetascriptParserRULE_builder_SeaLevel                                       = 107
	MinecraftMetascriptParserRULE_builder_DisableCreatures                               = 108
	MinecraftMetascriptParserRULE_builder_DisableVeins                                   = 109
	MinecraftMetascriptParserRULE_builder_DisableAquifers                                = 110
	MinecraftMetascriptParserRULE_builder_LegacyRandomSource                             = 111
	MinecraftMetascriptParserRULE_builder_DefaultBlock                                   = 112
	MinecraftMetascriptParserRULE_builder_DefaultFluid                                   = 113
	MinecraftMetascriptParserRULE_builder_SpawnTarget                                    = 114
	MinecraftMetascriptParserRULE_builder_MinY                                           = 115
	MinecraftMetascriptParserRULE_builder_Height                                         = 116
	MinecraftMetascriptParserRULE_builder_SurfaceRule                                    = 117
	MinecraftMetascriptParserRULE_blockState                                             = 118
	MinecraftMetascriptParserRULE_blockState_Builder                                     = 119
)

// IScriptContext is an interface to support dynamic dispatch.
type IScriptContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode
	AllNamespace() []INamespaceContext
	Namespace(i int) INamespaceContext

	// IsScriptContext differentiates from other interfaces.
	IsScriptContext()
}

type ScriptContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyScriptContext() *ScriptContext {
	var p = new(ScriptContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_script
	return p
}

func InitEmptyScriptContext(p *ScriptContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_script
}

func (*ScriptContext) IsScriptContext() {}

func NewScriptContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ScriptContext {
	var p = new(ScriptContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_script

	return p
}

func (s *ScriptContext) GetParser() antlr.Parser { return s.parser }

func (s *ScriptContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *ScriptContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *ScriptContext) AllNamespace() []INamespaceContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INamespaceContext); ok {
			len++
		}
	}

	tst := make([]INamespaceContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INamespaceContext); ok {
			tst[i] = t.(INamespaceContext)
			i++
		}
	}

	return tst
}

func (s *ScriptContext) Namespace(i int) INamespaceContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INamespaceContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INamespaceContext)
}

func (s *ScriptContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ScriptContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ScriptContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterScript(s)
	}
}

func (s *ScriptContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitScript(s)
	}
}

func (p *MinecraftMetascriptParser) Script() (localctx IScriptContext) {
	localctx = NewScriptContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, MinecraftMetascriptParserRULE_script)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(243)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(240)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(245)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(255)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserT__0 {
		{
			p.SetState(246)
			p.Namespace()
		}
		p.SetState(250)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == MinecraftMetascriptParserNL {
			{
				p.SetState(247)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(252)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}

		p.SetState(257)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INamespaceDeclarationContext is an interface to support dynamic dispatch.
type INamespaceDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() antlr.TerminalNode

	// IsNamespaceDeclarationContext differentiates from other interfaces.
	IsNamespaceDeclarationContext()
}

type NamespaceDeclarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNamespaceDeclarationContext() *NamespaceDeclarationContext {
	var p = new(NamespaceDeclarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_namespaceDeclaration
	return p
}

func InitEmptyNamespaceDeclarationContext(p *NamespaceDeclarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_namespaceDeclaration
}

func (*NamespaceDeclarationContext) IsNamespaceDeclarationContext() {}

func NewNamespaceDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NamespaceDeclarationContext {
	var p = new(NamespaceDeclarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_namespaceDeclaration

	return p
}

func (s *NamespaceDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *NamespaceDeclarationContext) Identifier() antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserIdentifier, 0)
}

func (s *NamespaceDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NamespaceDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NamespaceDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterNamespaceDeclaration(s)
	}
}

func (s *NamespaceDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitNamespaceDeclaration(s)
	}
}

func (p *MinecraftMetascriptParser) NamespaceDeclaration() (localctx INamespaceDeclarationContext) {
	localctx = NewNamespaceDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, MinecraftMetascriptParserRULE_namespaceDeclaration)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(258)
		p.Match(MinecraftMetascriptParserT__0)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(259)
		p.Match(MinecraftMetascriptParserIdentifier)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INamespaceContext is an interface to support dynamic dispatch.
type INamespaceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	NamespaceDeclaration() INamespaceDeclarationContext
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode
	AllContentBlocks() []IContentBlocksContext
	ContentBlocks(i int) IContentBlocksContext

	// IsNamespaceContext differentiates from other interfaces.
	IsNamespaceContext()
}

type NamespaceContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNamespaceContext() *NamespaceContext {
	var p = new(NamespaceContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_namespace
	return p
}

func InitEmptyNamespaceContext(p *NamespaceContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_namespace
}

func (*NamespaceContext) IsNamespaceContext() {}

func NewNamespaceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NamespaceContext {
	var p = new(NamespaceContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_namespace

	return p
}

func (s *NamespaceContext) GetParser() antlr.Parser { return s.parser }

func (s *NamespaceContext) NamespaceDeclaration() INamespaceDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INamespaceDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INamespaceDeclarationContext)
}

func (s *NamespaceContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *NamespaceContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *NamespaceContext) AllContentBlocks() []IContentBlocksContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IContentBlocksContext); ok {
			len++
		}
	}

	tst := make([]IContentBlocksContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IContentBlocksContext); ok {
			tst[i] = t.(IContentBlocksContext)
			i++
		}
	}

	return tst
}

func (s *NamespaceContext) ContentBlocks(i int) IContentBlocksContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IContentBlocksContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IContentBlocksContext)
}

func (s *NamespaceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NamespaceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NamespaceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterNamespace(s)
	}
}

func (s *NamespaceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitNamespace(s)
	}
}

func (p *MinecraftMetascriptParser) Namespace() (localctx INamespaceContext) {
	localctx = NewNamespaceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, MinecraftMetascriptParserRULE_namespace)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(261)
		p.NamespaceDeclaration()
	}
	p.SetState(265)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(262)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(267)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(268)
		p.Match(MinecraftMetascriptParserT__1)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(272)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(269)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(274)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(284)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&6755399441055760) != 0) || _la == MinecraftMetascriptParserT__80 || _la == MinecraftMetascriptParserT__97 {
		{
			p.SetState(275)
			p.ContentBlocks()
		}
		p.SetState(279)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == MinecraftMetascriptParserNL {
			{
				p.SetState(276)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(281)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}

		p.SetState(286)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(287)
		p.Match(MinecraftMetascriptParserT__2)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IContentBlocksContext is an interface to support dynamic dispatch.
type IContentBlocksContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SurfaceBlock() ISurfaceBlockContext
	NoiseBlock() INoiseBlockContext
	DensityFnBlock() IDensityFnBlockContext
	NoiseRouterBlock() INoiseRouterBlockContext
	NoiseSettingsBlock() INoiseSettingsBlockContext

	// IsContentBlocksContext differentiates from other interfaces.
	IsContentBlocksContext()
}

type ContentBlocksContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyContentBlocksContext() *ContentBlocksContext {
	var p = new(ContentBlocksContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_contentBlocks
	return p
}

func InitEmptyContentBlocksContext(p *ContentBlocksContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_contentBlocks
}

func (*ContentBlocksContext) IsContentBlocksContext() {}

func NewContentBlocksContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ContentBlocksContext {
	var p = new(ContentBlocksContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_contentBlocks

	return p
}

func (s *ContentBlocksContext) GetParser() antlr.Parser { return s.parser }

func (s *ContentBlocksContext) SurfaceBlock() ISurfaceBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceBlockContext)
}

func (s *ContentBlocksContext) NoiseBlock() INoiseBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INoiseBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INoiseBlockContext)
}

func (s *ContentBlocksContext) DensityFnBlock() IDensityFnBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFnBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFnBlockContext)
}

func (s *ContentBlocksContext) NoiseRouterBlock() INoiseRouterBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INoiseRouterBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INoiseRouterBlockContext)
}

func (s *ContentBlocksContext) NoiseSettingsBlock() INoiseSettingsBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INoiseSettingsBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INoiseSettingsBlockContext)
}

func (s *ContentBlocksContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ContentBlocksContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ContentBlocksContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterContentBlocks(s)
	}
}

func (s *ContentBlocksContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitContentBlocks(s)
	}
}

func (p *MinecraftMetascriptParser) ContentBlocks() (localctx IContentBlocksContext) {
	localctx = NewContentBlocksContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, MinecraftMetascriptParserRULE_contentBlocks)
	p.SetState(294)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case MinecraftMetascriptParserT__3:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(289)
			p.SurfaceBlock()
		}

	case MinecraftMetascriptParserT__50:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(290)
			p.NoiseBlock()
		}

	case MinecraftMetascriptParserT__51:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(291)
			p.DensityFnBlock()
		}

	case MinecraftMetascriptParserT__80:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(292)
			p.NoiseRouterBlock()
		}

	case MinecraftMetascriptParserT__97:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(293)
			p.NoiseSettingsBlock()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISurfaceBlockContext is an interface to support dynamic dispatch.
type ISurfaceBlockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode
	AllSurfaceStatement() []ISurfaceStatementContext
	SurfaceStatement(i int) ISurfaceStatementContext

	// IsSurfaceBlockContext differentiates from other interfaces.
	IsSurfaceBlockContext()
}

type SurfaceBlockContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySurfaceBlockContext() *SurfaceBlockContext {
	var p = new(SurfaceBlockContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceBlock
	return p
}

func InitEmptySurfaceBlockContext(p *SurfaceBlockContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceBlock
}

func (*SurfaceBlockContext) IsSurfaceBlockContext() {}

func NewSurfaceBlockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SurfaceBlockContext {
	var p = new(SurfaceBlockContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceBlock

	return p
}

func (s *SurfaceBlockContext) GetParser() antlr.Parser { return s.parser }

func (s *SurfaceBlockContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *SurfaceBlockContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *SurfaceBlockContext) AllSurfaceStatement() []ISurfaceStatementContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISurfaceStatementContext); ok {
			len++
		}
	}

	tst := make([]ISurfaceStatementContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISurfaceStatementContext); ok {
			tst[i] = t.(ISurfaceStatementContext)
			i++
		}
	}

	return tst
}

func (s *SurfaceBlockContext) SurfaceStatement(i int) ISurfaceStatementContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceStatementContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceStatementContext)
}

func (s *SurfaceBlockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SurfaceBlockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SurfaceBlockContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterSurfaceBlock(s)
	}
}

func (s *SurfaceBlockContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitSurfaceBlock(s)
	}
}

func (p *MinecraftMetascriptParser) SurfaceBlock() (localctx ISurfaceBlockContext) {
	localctx = NewSurfaceBlockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, MinecraftMetascriptParserRULE_surfaceBlock)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(296)
		p.Match(MinecraftMetascriptParserT__3)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(300)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(297)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(302)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(303)
		p.Match(MinecraftMetascriptParserT__1)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(307)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 9, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(304)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(309)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 9, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(319)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserIdentifier {
		{
			p.SetState(310)
			p.SurfaceStatement()
		}
		p.SetState(314)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 10, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(311)
					p.Match(MinecraftMetascriptParserNL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(316)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 10, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}

		p.SetState(321)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(325)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(322)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(327)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(328)
		p.Match(MinecraftMetascriptParserT__2)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISurfaceStatementContext is an interface to support dynamic dispatch.
type ISurfaceStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	VerticalAnchorDeclaration() IVerticalAnchorDeclarationContext
	SurfaceConditionDeclaration() ISurfaceConditionDeclarationContext
	SurfaceRuleDeclaration() ISurfaceRuleDeclarationContext

	// IsSurfaceStatementContext differentiates from other interfaces.
	IsSurfaceStatementContext()
}

type SurfaceStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySurfaceStatementContext() *SurfaceStatementContext {
	var p = new(SurfaceStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceStatement
	return p
}

func InitEmptySurfaceStatementContext(p *SurfaceStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceStatement
}

func (*SurfaceStatementContext) IsSurfaceStatementContext() {}

func NewSurfaceStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SurfaceStatementContext {
	var p = new(SurfaceStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceStatement

	return p
}

func (s *SurfaceStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *SurfaceStatementContext) VerticalAnchorDeclaration() IVerticalAnchorDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVerticalAnchorDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVerticalAnchorDeclarationContext)
}

func (s *SurfaceStatementContext) SurfaceConditionDeclaration() ISurfaceConditionDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceConditionDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceConditionDeclarationContext)
}

func (s *SurfaceStatementContext) SurfaceRuleDeclaration() ISurfaceRuleDeclarationContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceRuleDeclarationContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceRuleDeclarationContext)
}

func (s *SurfaceStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SurfaceStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SurfaceStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterSurfaceStatement(s)
	}
}

func (s *SurfaceStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitSurfaceStatement(s)
	}
}

func (p *MinecraftMetascriptParser) SurfaceStatement() (localctx ISurfaceStatementContext) {
	localctx = NewSurfaceStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, MinecraftMetascriptParserRULE_surfaceStatement)
	p.SetState(333)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 13, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(330)
			p.VerticalAnchorDeclaration()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(331)
			p.SurfaceConditionDeclaration()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(332)
			p.SurfaceRuleDeclaration()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IVerticalAnchorContext is an interface to support dynamic dispatch.
type IVerticalAnchorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Int() antlr.TerminalNode
	Identifier() antlr.TerminalNode

	// IsVerticalAnchorContext differentiates from other interfaces.
	IsVerticalAnchorContext()
}

type VerticalAnchorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVerticalAnchorContext() *VerticalAnchorContext {
	var p = new(VerticalAnchorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_verticalAnchor
	return p
}

func InitEmptyVerticalAnchorContext(p *VerticalAnchorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_verticalAnchor
}

func (*VerticalAnchorContext) IsVerticalAnchorContext() {}

func NewVerticalAnchorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VerticalAnchorContext {
	var p = new(VerticalAnchorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_verticalAnchor

	return p
}

func (s *VerticalAnchorContext) GetParser() antlr.Parser { return s.parser }

func (s *VerticalAnchorContext) Int() antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserInt, 0)
}

func (s *VerticalAnchorContext) Identifier() antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserIdentifier, 0)
}

func (s *VerticalAnchorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VerticalAnchorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VerticalAnchorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterVerticalAnchor(s)
	}
}

func (s *VerticalAnchorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitVerticalAnchor(s)
	}
}

func (p *MinecraftMetascriptParser) VerticalAnchor() (localctx IVerticalAnchorContext) {
	localctx = NewVerticalAnchorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, MinecraftMetascriptParserRULE_verticalAnchor)
	var _la int

	p.SetState(340)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case MinecraftMetascriptParserT__4, MinecraftMetascriptParserInt:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(336)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == MinecraftMetascriptParserT__4 {
			{
				p.SetState(335)
				p.Match(MinecraftMetascriptParserT__4)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(338)
			p.Match(MinecraftMetascriptParserInt)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case MinecraftMetascriptParserIdentifier:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(339)
			p.Match(MinecraftMetascriptParserIdentifier)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IVerticalAnchorDeclarationContext is an interface to support dynamic dispatch.
type IVerticalAnchorDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Declare() IDeclareContext
	VerticalAnchor() IVerticalAnchorContext

	// IsVerticalAnchorDeclarationContext differentiates from other interfaces.
	IsVerticalAnchorDeclarationContext()
}

type VerticalAnchorDeclarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVerticalAnchorDeclarationContext() *VerticalAnchorDeclarationContext {
	var p = new(VerticalAnchorDeclarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_verticalAnchorDeclaration
	return p
}

func InitEmptyVerticalAnchorDeclarationContext(p *VerticalAnchorDeclarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_verticalAnchorDeclaration
}

func (*VerticalAnchorDeclarationContext) IsVerticalAnchorDeclarationContext() {}

func NewVerticalAnchorDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VerticalAnchorDeclarationContext {
	var p = new(VerticalAnchorDeclarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_verticalAnchorDeclaration

	return p
}

func (s *VerticalAnchorDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *VerticalAnchorDeclarationContext) Declare() IDeclareContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDeclareContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDeclareContext)
}

func (s *VerticalAnchorDeclarationContext) VerticalAnchor() IVerticalAnchorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVerticalAnchorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVerticalAnchorContext)
}

func (s *VerticalAnchorDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VerticalAnchorDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VerticalAnchorDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterVerticalAnchorDeclaration(s)
	}
}

func (s *VerticalAnchorDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitVerticalAnchorDeclaration(s)
	}
}

func (p *MinecraftMetascriptParser) VerticalAnchorDeclaration() (localctx IVerticalAnchorDeclarationContext) {
	localctx = NewVerticalAnchorDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, MinecraftMetascriptParserRULE_verticalAnchorDeclaration)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(342)
		p.Declare()
	}
	{
		p.SetState(343)
		p.VerticalAnchor()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISurfaceConditionContext is an interface to support dynamic dispatch.
type ISurfaceConditionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SurfaceCondition_Not() ISurfaceCondition_NotContext
	SurfaceCondition_AboveSurface() ISurfaceCondition_AboveSurfaceContext
	SurfaceCondition_Biome() ISurfaceCondition_BiomeContext
	SurfaceCondition_Hole() ISurfaceCondition_HoleContext
	SurfaceCondition_Steep() ISurfaceCondition_SteepContext
	SurfaceCondition_Freezing() ISurfaceCondition_FreezingContext
	SurfaceCondition_NoiseThreshold() ISurfaceCondition_NoiseThresholdContext
	SurfaceCondition_StoneDepth() ISurfaceCondition_StoneDepthContext
	SurfaceCondition_AboveWater() ISurfaceCondition_AboveWaterContext
	SurfaceCondition_YAbove() ISurfaceCondition_YAboveContext
	SurfaceCondition_Reference() ISurfaceCondition_ReferenceContext
	SurfaceCondition_And() ISurfaceCondition_AndContext
	SurfaceCondition_Or() ISurfaceCondition_OrContext
	SurfaceCondition_VerticalGradient() ISurfaceCondition_VerticalGradientContext

	// IsSurfaceConditionContext differentiates from other interfaces.
	IsSurfaceConditionContext()
}

type SurfaceConditionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySurfaceConditionContext() *SurfaceConditionContext {
	var p = new(SurfaceConditionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition
	return p
}

func InitEmptySurfaceConditionContext(p *SurfaceConditionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition
}

func (*SurfaceConditionContext) IsSurfaceConditionContext() {}

func NewSurfaceConditionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SurfaceConditionContext {
	var p = new(SurfaceConditionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition

	return p
}

func (s *SurfaceConditionContext) GetParser() antlr.Parser { return s.parser }

func (s *SurfaceConditionContext) SurfaceCondition_Not() ISurfaceCondition_NotContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceCondition_NotContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceCondition_NotContext)
}

func (s *SurfaceConditionContext) SurfaceCondition_AboveSurface() ISurfaceCondition_AboveSurfaceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceCondition_AboveSurfaceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceCondition_AboveSurfaceContext)
}

func (s *SurfaceConditionContext) SurfaceCondition_Biome() ISurfaceCondition_BiomeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceCondition_BiomeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceCondition_BiomeContext)
}

func (s *SurfaceConditionContext) SurfaceCondition_Hole() ISurfaceCondition_HoleContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceCondition_HoleContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceCondition_HoleContext)
}

func (s *SurfaceConditionContext) SurfaceCondition_Steep() ISurfaceCondition_SteepContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceCondition_SteepContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceCondition_SteepContext)
}

func (s *SurfaceConditionContext) SurfaceCondition_Freezing() ISurfaceCondition_FreezingContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceCondition_FreezingContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceCondition_FreezingContext)
}

func (s *SurfaceConditionContext) SurfaceCondition_NoiseThreshold() ISurfaceCondition_NoiseThresholdContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceCondition_NoiseThresholdContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceCondition_NoiseThresholdContext)
}

func (s *SurfaceConditionContext) SurfaceCondition_StoneDepth() ISurfaceCondition_StoneDepthContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceCondition_StoneDepthContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceCondition_StoneDepthContext)
}

func (s *SurfaceConditionContext) SurfaceCondition_AboveWater() ISurfaceCondition_AboveWaterContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceCondition_AboveWaterContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceCondition_AboveWaterContext)
}

func (s *SurfaceConditionContext) SurfaceCondition_YAbove() ISurfaceCondition_YAboveContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceCondition_YAboveContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceCondition_YAboveContext)
}

func (s *SurfaceConditionContext) SurfaceCondition_Reference() ISurfaceCondition_ReferenceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceCondition_ReferenceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceCondition_ReferenceContext)
}

func (s *SurfaceConditionContext) SurfaceCondition_And() ISurfaceCondition_AndContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceCondition_AndContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceCondition_AndContext)
}

func (s *SurfaceConditionContext) SurfaceCondition_Or() ISurfaceCondition_OrContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceCondition_OrContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceCondition_OrContext)
}

func (s *SurfaceConditionContext) SurfaceCondition_VerticalGradient() ISurfaceCondition_VerticalGradientContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceCondition_VerticalGradientContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceCondition_VerticalGradientContext)
}

func (s *SurfaceConditionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SurfaceConditionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SurfaceConditionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterSurfaceCondition(s)
	}
}

func (s *SurfaceConditionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitSurfaceCondition(s)
	}
}

func (p *MinecraftMetascriptParser) SurfaceCondition() (localctx ISurfaceConditionContext) {
	localctx = NewSurfaceConditionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, MinecraftMetascriptParserRULE_surfaceCondition)
	p.EnterOuterAlt(localctx, 1)
	p.SetState(359)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case MinecraftMetascriptParserT__5:
		{
			p.SetState(345)
			p.SurfaceCondition_Not()
		}

	case MinecraftMetascriptParserT__10:
		{
			p.SetState(346)
			p.SurfaceCondition_AboveSurface()
		}

	case MinecraftMetascriptParserT__11:
		{
			p.SetState(347)
			p.SurfaceCondition_Biome()
		}

	case MinecraftMetascriptParserT__13:
		{
			p.SetState(348)
			p.SurfaceCondition_Hole()
		}

	case MinecraftMetascriptParserT__14:
		{
			p.SetState(349)
			p.SurfaceCondition_Steep()
		}

	case MinecraftMetascriptParserT__15:
		{
			p.SetState(350)
			p.SurfaceCondition_Freezing()
		}

	case MinecraftMetascriptParserT__16:
		{
			p.SetState(351)
			p.SurfaceCondition_NoiseThreshold()
		}

	case MinecraftMetascriptParserT__17:
		{
			p.SetState(352)
			p.SurfaceCondition_StoneDepth()
		}

	case MinecraftMetascriptParserT__20:
		{
			p.SetState(353)
			p.SurfaceCondition_AboveWater()
		}

	case MinecraftMetascriptParserT__21:
		{
			p.SetState(354)
			p.SurfaceCondition_YAbove()
		}

	case MinecraftMetascriptParserIdentifier:
		{
			p.SetState(355)
			p.SurfaceCondition_Reference()
		}

	case MinecraftMetascriptParserT__6:
		{
			p.SetState(356)
			p.SurfaceCondition_And()
		}

	case MinecraftMetascriptParserT__9:
		{
			p.SetState(357)
			p.SurfaceCondition_Or()
		}

	case MinecraftMetascriptParserT__19:
		{
			p.SetState(358)
			p.SurfaceCondition_VerticalGradient()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISurfaceConditionDeclarationContext is an interface to support dynamic dispatch.
type ISurfaceConditionDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Declare() IDeclareContext
	SurfaceCondition() ISurfaceConditionContext

	// IsSurfaceConditionDeclarationContext differentiates from other interfaces.
	IsSurfaceConditionDeclarationContext()
}

type SurfaceConditionDeclarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySurfaceConditionDeclarationContext() *SurfaceConditionDeclarationContext {
	var p = new(SurfaceConditionDeclarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceConditionDeclaration
	return p
}

func InitEmptySurfaceConditionDeclarationContext(p *SurfaceConditionDeclarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceConditionDeclaration
}

func (*SurfaceConditionDeclarationContext) IsSurfaceConditionDeclarationContext() {}

func NewSurfaceConditionDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SurfaceConditionDeclarationContext {
	var p = new(SurfaceConditionDeclarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceConditionDeclaration

	return p
}

func (s *SurfaceConditionDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *SurfaceConditionDeclarationContext) Declare() IDeclareContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDeclareContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDeclareContext)
}

func (s *SurfaceConditionDeclarationContext) SurfaceCondition() ISurfaceConditionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceConditionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceConditionContext)
}

func (s *SurfaceConditionDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SurfaceConditionDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SurfaceConditionDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterSurfaceConditionDeclaration(s)
	}
}

func (s *SurfaceConditionDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitSurfaceConditionDeclaration(s)
	}
}

func (p *MinecraftMetascriptParser) SurfaceConditionDeclaration() (localctx ISurfaceConditionDeclarationContext) {
	localctx = NewSurfaceConditionDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, MinecraftMetascriptParserRULE_surfaceConditionDeclaration)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(361)
		p.Declare()
	}
	{
		p.SetState(362)
		p.SurfaceCondition()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISurfaceCondition_NotContext is an interface to support dynamic dispatch.
type ISurfaceCondition_NotContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SurfaceCondition() ISurfaceConditionContext

	// IsSurfaceCondition_NotContext differentiates from other interfaces.
	IsSurfaceCondition_NotContext()
}

type SurfaceCondition_NotContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySurfaceCondition_NotContext() *SurfaceCondition_NotContext {
	var p = new(SurfaceCondition_NotContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_Not
	return p
}

func InitEmptySurfaceCondition_NotContext(p *SurfaceCondition_NotContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_Not
}

func (*SurfaceCondition_NotContext) IsSurfaceCondition_NotContext() {}

func NewSurfaceCondition_NotContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SurfaceCondition_NotContext {
	var p = new(SurfaceCondition_NotContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_Not

	return p
}

func (s *SurfaceCondition_NotContext) GetParser() antlr.Parser { return s.parser }

func (s *SurfaceCondition_NotContext) SurfaceCondition() ISurfaceConditionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceConditionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceConditionContext)
}

func (s *SurfaceCondition_NotContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SurfaceCondition_NotContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SurfaceCondition_NotContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterSurfaceCondition_Not(s)
	}
}

func (s *SurfaceCondition_NotContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitSurfaceCondition_Not(s)
	}
}

func (p *MinecraftMetascriptParser) SurfaceCondition_Not() (localctx ISurfaceCondition_NotContext) {
	localctx = NewSurfaceCondition_NotContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, MinecraftMetascriptParserRULE_surfaceCondition_Not)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(364)
		p.Match(MinecraftMetascriptParserT__5)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(365)
		p.SurfaceCondition()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISurfaceCondition_AndContext is an interface to support dynamic dispatch.
type ISurfaceCondition_AndContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllSurfaceCondition() []ISurfaceConditionContext
	SurfaceCondition(i int) ISurfaceConditionContext
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode

	// IsSurfaceCondition_AndContext differentiates from other interfaces.
	IsSurfaceCondition_AndContext()
}

type SurfaceCondition_AndContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySurfaceCondition_AndContext() *SurfaceCondition_AndContext {
	var p = new(SurfaceCondition_AndContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_And
	return p
}

func InitEmptySurfaceCondition_AndContext(p *SurfaceCondition_AndContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_And
}

func (*SurfaceCondition_AndContext) IsSurfaceCondition_AndContext() {}

func NewSurfaceCondition_AndContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SurfaceCondition_AndContext {
	var p = new(SurfaceCondition_AndContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_And

	return p
}

func (s *SurfaceCondition_AndContext) GetParser() antlr.Parser { return s.parser }

func (s *SurfaceCondition_AndContext) AllSurfaceCondition() []ISurfaceConditionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISurfaceConditionContext); ok {
			len++
		}
	}

	tst := make([]ISurfaceConditionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISurfaceConditionContext); ok {
			tst[i] = t.(ISurfaceConditionContext)
			i++
		}
	}

	return tst
}

func (s *SurfaceCondition_AndContext) SurfaceCondition(i int) ISurfaceConditionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceConditionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceConditionContext)
}

func (s *SurfaceCondition_AndContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *SurfaceCondition_AndContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *SurfaceCondition_AndContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SurfaceCondition_AndContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SurfaceCondition_AndContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterSurfaceCondition_And(s)
	}
}

func (s *SurfaceCondition_AndContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitSurfaceCondition_And(s)
	}
}

func (p *MinecraftMetascriptParser) SurfaceCondition_And() (localctx ISurfaceCondition_AndContext) {
	localctx = NewSurfaceCondition_AndContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, MinecraftMetascriptParserRULE_surfaceCondition_And)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(367)
		p.Match(MinecraftMetascriptParserT__6)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(371)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(368)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(373)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(374)
		p.Match(MinecraftMetascriptParserT__7)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(378)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(375)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(380)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(390)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 20, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(381)
				p.SurfaceCondition()
			}
			p.SetState(385)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			for _la == MinecraftMetascriptParserNL {
				{
					p.SetState(382)
					p.Match(MinecraftMetascriptParserNL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

				p.SetState(387)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)
			}

		}
		p.SetState(392)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 20, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	{
		p.SetState(393)
		p.SurfaceCondition()
	}
	p.SetState(397)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(394)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(399)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(400)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISurfaceCondition_OrContext is an interface to support dynamic dispatch.
type ISurfaceCondition_OrContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllSurfaceCondition() []ISurfaceConditionContext
	SurfaceCondition(i int) ISurfaceConditionContext
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode

	// IsSurfaceCondition_OrContext differentiates from other interfaces.
	IsSurfaceCondition_OrContext()
}

type SurfaceCondition_OrContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySurfaceCondition_OrContext() *SurfaceCondition_OrContext {
	var p = new(SurfaceCondition_OrContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_Or
	return p
}

func InitEmptySurfaceCondition_OrContext(p *SurfaceCondition_OrContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_Or
}

func (*SurfaceCondition_OrContext) IsSurfaceCondition_OrContext() {}

func NewSurfaceCondition_OrContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SurfaceCondition_OrContext {
	var p = new(SurfaceCondition_OrContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_Or

	return p
}

func (s *SurfaceCondition_OrContext) GetParser() antlr.Parser { return s.parser }

func (s *SurfaceCondition_OrContext) AllSurfaceCondition() []ISurfaceConditionContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISurfaceConditionContext); ok {
			len++
		}
	}

	tst := make([]ISurfaceConditionContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISurfaceConditionContext); ok {
			tst[i] = t.(ISurfaceConditionContext)
			i++
		}
	}

	return tst
}

func (s *SurfaceCondition_OrContext) SurfaceCondition(i int) ISurfaceConditionContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceConditionContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceConditionContext)
}

func (s *SurfaceCondition_OrContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *SurfaceCondition_OrContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *SurfaceCondition_OrContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SurfaceCondition_OrContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SurfaceCondition_OrContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterSurfaceCondition_Or(s)
	}
}

func (s *SurfaceCondition_OrContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitSurfaceCondition_Or(s)
	}
}

func (p *MinecraftMetascriptParser) SurfaceCondition_Or() (localctx ISurfaceCondition_OrContext) {
	localctx = NewSurfaceCondition_OrContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, MinecraftMetascriptParserRULE_surfaceCondition_Or)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(402)
		p.Match(MinecraftMetascriptParserT__9)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(406)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(403)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(408)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(409)
		p.Match(MinecraftMetascriptParserT__7)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(413)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(410)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(415)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(425)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 25, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(416)
				p.SurfaceCondition()
			}
			p.SetState(420)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			for _la == MinecraftMetascriptParserNL {
				{
					p.SetState(417)
					p.Match(MinecraftMetascriptParserNL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

				p.SetState(422)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)
			}

		}
		p.SetState(427)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 25, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	{
		p.SetState(428)
		p.SurfaceCondition()
	}
	p.SetState(432)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(429)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(434)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(435)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISurfaceCondition_ReferenceContext is an interface to support dynamic dispatch.
type ISurfaceCondition_ReferenceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ResourceReference() IResourceReferenceContext

	// IsSurfaceCondition_ReferenceContext differentiates from other interfaces.
	IsSurfaceCondition_ReferenceContext()
}

type SurfaceCondition_ReferenceContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySurfaceCondition_ReferenceContext() *SurfaceCondition_ReferenceContext {
	var p = new(SurfaceCondition_ReferenceContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_Reference
	return p
}

func InitEmptySurfaceCondition_ReferenceContext(p *SurfaceCondition_ReferenceContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_Reference
}

func (*SurfaceCondition_ReferenceContext) IsSurfaceCondition_ReferenceContext() {}

func NewSurfaceCondition_ReferenceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SurfaceCondition_ReferenceContext {
	var p = new(SurfaceCondition_ReferenceContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_Reference

	return p
}

func (s *SurfaceCondition_ReferenceContext) GetParser() antlr.Parser { return s.parser }

func (s *SurfaceCondition_ReferenceContext) ResourceReference() IResourceReferenceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IResourceReferenceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IResourceReferenceContext)
}

func (s *SurfaceCondition_ReferenceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SurfaceCondition_ReferenceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SurfaceCondition_ReferenceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterSurfaceCondition_Reference(s)
	}
}

func (s *SurfaceCondition_ReferenceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitSurfaceCondition_Reference(s)
	}
}

func (p *MinecraftMetascriptParser) SurfaceCondition_Reference() (localctx ISurfaceCondition_ReferenceContext) {
	localctx = NewSurfaceCondition_ReferenceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, MinecraftMetascriptParserRULE_surfaceCondition_Reference)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(437)
		p.ResourceReference()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISurfaceCondition_AboveSurfaceContext is an interface to support dynamic dispatch.
type ISurfaceCondition_AboveSurfaceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsSurfaceCondition_AboveSurfaceContext differentiates from other interfaces.
	IsSurfaceCondition_AboveSurfaceContext()
}

type SurfaceCondition_AboveSurfaceContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySurfaceCondition_AboveSurfaceContext() *SurfaceCondition_AboveSurfaceContext {
	var p = new(SurfaceCondition_AboveSurfaceContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_AboveSurface
	return p
}

func InitEmptySurfaceCondition_AboveSurfaceContext(p *SurfaceCondition_AboveSurfaceContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_AboveSurface
}

func (*SurfaceCondition_AboveSurfaceContext) IsSurfaceCondition_AboveSurfaceContext() {}

func NewSurfaceCondition_AboveSurfaceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SurfaceCondition_AboveSurfaceContext {
	var p = new(SurfaceCondition_AboveSurfaceContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_AboveSurface

	return p
}

func (s *SurfaceCondition_AboveSurfaceContext) GetParser() antlr.Parser { return s.parser }
func (s *SurfaceCondition_AboveSurfaceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SurfaceCondition_AboveSurfaceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SurfaceCondition_AboveSurfaceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterSurfaceCondition_AboveSurface(s)
	}
}

func (s *SurfaceCondition_AboveSurfaceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitSurfaceCondition_AboveSurface(s)
	}
}

func (p *MinecraftMetascriptParser) SurfaceCondition_AboveSurface() (localctx ISurfaceCondition_AboveSurfaceContext) {
	localctx = NewSurfaceCondition_AboveSurfaceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, MinecraftMetascriptParserRULE_surfaceCondition_AboveSurface)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(439)
		p.Match(MinecraftMetascriptParserT__10)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISurfaceCondition_BiomeContext is an interface to support dynamic dispatch.
type ISurfaceCondition_BiomeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllResourceReference() []IResourceReferenceContext
	ResourceReference(i int) IResourceReferenceContext
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode

	// IsSurfaceCondition_BiomeContext differentiates from other interfaces.
	IsSurfaceCondition_BiomeContext()
}

type SurfaceCondition_BiomeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySurfaceCondition_BiomeContext() *SurfaceCondition_BiomeContext {
	var p = new(SurfaceCondition_BiomeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_Biome
	return p
}

func InitEmptySurfaceCondition_BiomeContext(p *SurfaceCondition_BiomeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_Biome
}

func (*SurfaceCondition_BiomeContext) IsSurfaceCondition_BiomeContext() {}

func NewSurfaceCondition_BiomeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SurfaceCondition_BiomeContext {
	var p = new(SurfaceCondition_BiomeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_Biome

	return p
}

func (s *SurfaceCondition_BiomeContext) GetParser() antlr.Parser { return s.parser }

func (s *SurfaceCondition_BiomeContext) AllResourceReference() []IResourceReferenceContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IResourceReferenceContext); ok {
			len++
		}
	}

	tst := make([]IResourceReferenceContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IResourceReferenceContext); ok {
			tst[i] = t.(IResourceReferenceContext)
			i++
		}
	}

	return tst
}

func (s *SurfaceCondition_BiomeContext) ResourceReference(i int) IResourceReferenceContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IResourceReferenceContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IResourceReferenceContext)
}

func (s *SurfaceCondition_BiomeContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *SurfaceCondition_BiomeContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *SurfaceCondition_BiomeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SurfaceCondition_BiomeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SurfaceCondition_BiomeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterSurfaceCondition_Biome(s)
	}
}

func (s *SurfaceCondition_BiomeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitSurfaceCondition_Biome(s)
	}
}

func (p *MinecraftMetascriptParser) SurfaceCondition_Biome() (localctx ISurfaceCondition_BiomeContext) {
	localctx = NewSurfaceCondition_BiomeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, MinecraftMetascriptParserRULE_surfaceCondition_Biome)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(441)
		p.Match(MinecraftMetascriptParserT__11)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(442)
		p.Match(MinecraftMetascriptParserT__7)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(446)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 27, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(443)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(448)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 27, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(459)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 29, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(449)
				p.ResourceReference()
			}
			{
				p.SetState(450)
				p.Match(MinecraftMetascriptParserT__12)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			p.SetState(454)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 28, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(451)
						p.Match(MinecraftMetascriptParserNL)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				}
				p.SetState(456)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 28, p.GetParserRuleContext())
				if p.HasError() {
					goto errorExit
				}
			}

		}
		p.SetState(461)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 29, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(465)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(462)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(467)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(468)
		p.ResourceReference()
	}
	p.SetState(472)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(469)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(474)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(475)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISurfaceCondition_HoleContext is an interface to support dynamic dispatch.
type ISurfaceCondition_HoleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsSurfaceCondition_HoleContext differentiates from other interfaces.
	IsSurfaceCondition_HoleContext()
}

type SurfaceCondition_HoleContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySurfaceCondition_HoleContext() *SurfaceCondition_HoleContext {
	var p = new(SurfaceCondition_HoleContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_Hole
	return p
}

func InitEmptySurfaceCondition_HoleContext(p *SurfaceCondition_HoleContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_Hole
}

func (*SurfaceCondition_HoleContext) IsSurfaceCondition_HoleContext() {}

func NewSurfaceCondition_HoleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SurfaceCondition_HoleContext {
	var p = new(SurfaceCondition_HoleContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_Hole

	return p
}

func (s *SurfaceCondition_HoleContext) GetParser() antlr.Parser { return s.parser }
func (s *SurfaceCondition_HoleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SurfaceCondition_HoleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SurfaceCondition_HoleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterSurfaceCondition_Hole(s)
	}
}

func (s *SurfaceCondition_HoleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitSurfaceCondition_Hole(s)
	}
}

func (p *MinecraftMetascriptParser) SurfaceCondition_Hole() (localctx ISurfaceCondition_HoleContext) {
	localctx = NewSurfaceCondition_HoleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, MinecraftMetascriptParserRULE_surfaceCondition_Hole)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(477)
		p.Match(MinecraftMetascriptParserT__13)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(478)
		p.Match(MinecraftMetascriptParserT__7)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(479)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISurfaceCondition_SteepContext is an interface to support dynamic dispatch.
type ISurfaceCondition_SteepContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsSurfaceCondition_SteepContext differentiates from other interfaces.
	IsSurfaceCondition_SteepContext()
}

type SurfaceCondition_SteepContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySurfaceCondition_SteepContext() *SurfaceCondition_SteepContext {
	var p = new(SurfaceCondition_SteepContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_Steep
	return p
}

func InitEmptySurfaceCondition_SteepContext(p *SurfaceCondition_SteepContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_Steep
}

func (*SurfaceCondition_SteepContext) IsSurfaceCondition_SteepContext() {}

func NewSurfaceCondition_SteepContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SurfaceCondition_SteepContext {
	var p = new(SurfaceCondition_SteepContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_Steep

	return p
}

func (s *SurfaceCondition_SteepContext) GetParser() antlr.Parser { return s.parser }
func (s *SurfaceCondition_SteepContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SurfaceCondition_SteepContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SurfaceCondition_SteepContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterSurfaceCondition_Steep(s)
	}
}

func (s *SurfaceCondition_SteepContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitSurfaceCondition_Steep(s)
	}
}

func (p *MinecraftMetascriptParser) SurfaceCondition_Steep() (localctx ISurfaceCondition_SteepContext) {
	localctx = NewSurfaceCondition_SteepContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, MinecraftMetascriptParserRULE_surfaceCondition_Steep)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(481)
		p.Match(MinecraftMetascriptParserT__14)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(482)
		p.Match(MinecraftMetascriptParserT__7)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(483)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISurfaceCondition_FreezingContext is an interface to support dynamic dispatch.
type ISurfaceCondition_FreezingContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsSurfaceCondition_FreezingContext differentiates from other interfaces.
	IsSurfaceCondition_FreezingContext()
}

type SurfaceCondition_FreezingContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySurfaceCondition_FreezingContext() *SurfaceCondition_FreezingContext {
	var p = new(SurfaceCondition_FreezingContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_Freezing
	return p
}

func InitEmptySurfaceCondition_FreezingContext(p *SurfaceCondition_FreezingContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_Freezing
}

func (*SurfaceCondition_FreezingContext) IsSurfaceCondition_FreezingContext() {}

func NewSurfaceCondition_FreezingContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SurfaceCondition_FreezingContext {
	var p = new(SurfaceCondition_FreezingContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_Freezing

	return p
}

func (s *SurfaceCondition_FreezingContext) GetParser() antlr.Parser { return s.parser }
func (s *SurfaceCondition_FreezingContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SurfaceCondition_FreezingContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SurfaceCondition_FreezingContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterSurfaceCondition_Freezing(s)
	}
}

func (s *SurfaceCondition_FreezingContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitSurfaceCondition_Freezing(s)
	}
}

func (p *MinecraftMetascriptParser) SurfaceCondition_Freezing() (localctx ISurfaceCondition_FreezingContext) {
	localctx = NewSurfaceCondition_FreezingContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, MinecraftMetascriptParserRULE_surfaceCondition_Freezing)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(485)
		p.Match(MinecraftMetascriptParserT__15)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(486)
		p.Match(MinecraftMetascriptParserT__7)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(487)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISurfaceCondition_NoiseThresholdBuilderContext is an interface to support dynamic dispatch.
type ISurfaceCondition_NoiseThresholdBuilderContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Builder_Max() IBuilder_MaxContext
	Builder_Min() IBuilder_MinContext

	// IsSurfaceCondition_NoiseThresholdBuilderContext differentiates from other interfaces.
	IsSurfaceCondition_NoiseThresholdBuilderContext()
}

type SurfaceCondition_NoiseThresholdBuilderContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySurfaceCondition_NoiseThresholdBuilderContext() *SurfaceCondition_NoiseThresholdBuilderContext {
	var p = new(SurfaceCondition_NoiseThresholdBuilderContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_NoiseThresholdBuilder
	return p
}

func InitEmptySurfaceCondition_NoiseThresholdBuilderContext(p *SurfaceCondition_NoiseThresholdBuilderContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_NoiseThresholdBuilder
}

func (*SurfaceCondition_NoiseThresholdBuilderContext) IsSurfaceCondition_NoiseThresholdBuilderContext() {
}

func NewSurfaceCondition_NoiseThresholdBuilderContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SurfaceCondition_NoiseThresholdBuilderContext {
	var p = new(SurfaceCondition_NoiseThresholdBuilderContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_NoiseThresholdBuilder

	return p
}

func (s *SurfaceCondition_NoiseThresholdBuilderContext) GetParser() antlr.Parser { return s.parser }

func (s *SurfaceCondition_NoiseThresholdBuilderContext) Builder_Max() IBuilder_MaxContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_MaxContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_MaxContext)
}

func (s *SurfaceCondition_NoiseThresholdBuilderContext) Builder_Min() IBuilder_MinContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_MinContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_MinContext)
}

func (s *SurfaceCondition_NoiseThresholdBuilderContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SurfaceCondition_NoiseThresholdBuilderContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SurfaceCondition_NoiseThresholdBuilderContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterSurfaceCondition_NoiseThresholdBuilder(s)
	}
}

func (s *SurfaceCondition_NoiseThresholdBuilderContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitSurfaceCondition_NoiseThresholdBuilder(s)
	}
}

func (p *MinecraftMetascriptParser) SurfaceCondition_NoiseThresholdBuilder() (localctx ISurfaceCondition_NoiseThresholdBuilderContext) {
	localctx = NewSurfaceCondition_NoiseThresholdBuilderContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, MinecraftMetascriptParserRULE_surfaceCondition_NoiseThresholdBuilder)
	p.SetState(491)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case MinecraftMetascriptParserT__44:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(489)
			p.Builder_Max()
		}

	case MinecraftMetascriptParserT__43:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(490)
			p.Builder_Min()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISurfaceCondition_NoiseThresholdContext is an interface to support dynamic dispatch.
type ISurfaceCondition_NoiseThresholdContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ResourceReference() IResourceReferenceContext
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode
	AllSurfaceCondition_NoiseThresholdBuilder() []ISurfaceCondition_NoiseThresholdBuilderContext
	SurfaceCondition_NoiseThresholdBuilder(i int) ISurfaceCondition_NoiseThresholdBuilderContext

	// IsSurfaceCondition_NoiseThresholdContext differentiates from other interfaces.
	IsSurfaceCondition_NoiseThresholdContext()
}

type SurfaceCondition_NoiseThresholdContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySurfaceCondition_NoiseThresholdContext() *SurfaceCondition_NoiseThresholdContext {
	var p = new(SurfaceCondition_NoiseThresholdContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_NoiseThreshold
	return p
}

func InitEmptySurfaceCondition_NoiseThresholdContext(p *SurfaceCondition_NoiseThresholdContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_NoiseThreshold
}

func (*SurfaceCondition_NoiseThresholdContext) IsSurfaceCondition_NoiseThresholdContext() {}

func NewSurfaceCondition_NoiseThresholdContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SurfaceCondition_NoiseThresholdContext {
	var p = new(SurfaceCondition_NoiseThresholdContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_NoiseThreshold

	return p
}

func (s *SurfaceCondition_NoiseThresholdContext) GetParser() antlr.Parser { return s.parser }

func (s *SurfaceCondition_NoiseThresholdContext) ResourceReference() IResourceReferenceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IResourceReferenceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IResourceReferenceContext)
}

func (s *SurfaceCondition_NoiseThresholdContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *SurfaceCondition_NoiseThresholdContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *SurfaceCondition_NoiseThresholdContext) AllSurfaceCondition_NoiseThresholdBuilder() []ISurfaceCondition_NoiseThresholdBuilderContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISurfaceCondition_NoiseThresholdBuilderContext); ok {
			len++
		}
	}

	tst := make([]ISurfaceCondition_NoiseThresholdBuilderContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISurfaceCondition_NoiseThresholdBuilderContext); ok {
			tst[i] = t.(ISurfaceCondition_NoiseThresholdBuilderContext)
			i++
		}
	}

	return tst
}

func (s *SurfaceCondition_NoiseThresholdContext) SurfaceCondition_NoiseThresholdBuilder(i int) ISurfaceCondition_NoiseThresholdBuilderContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceCondition_NoiseThresholdBuilderContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceCondition_NoiseThresholdBuilderContext)
}

func (s *SurfaceCondition_NoiseThresholdContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SurfaceCondition_NoiseThresholdContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SurfaceCondition_NoiseThresholdContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterSurfaceCondition_NoiseThreshold(s)
	}
}

func (s *SurfaceCondition_NoiseThresholdContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitSurfaceCondition_NoiseThreshold(s)
	}
}

func (p *MinecraftMetascriptParser) SurfaceCondition_NoiseThreshold() (localctx ISurfaceCondition_NoiseThresholdContext) {
	localctx = NewSurfaceCondition_NoiseThresholdContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, MinecraftMetascriptParserRULE_surfaceCondition_NoiseThreshold)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(493)
		p.Match(MinecraftMetascriptParserT__16)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(494)
		p.Match(MinecraftMetascriptParserT__7)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(495)
		p.ResourceReference()
	}
	{
		p.SetState(496)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(500)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 33, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(497)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(502)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 33, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(512)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserT__43 || _la == MinecraftMetascriptParserT__44 {
		{
			p.SetState(503)
			p.SurfaceCondition_NoiseThresholdBuilder()
		}
		p.SetState(507)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 34, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(504)
					p.Match(MinecraftMetascriptParserNL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(509)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 34, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}

		p.SetState(514)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISurfaceCondition_StoneDepthContext is an interface to support dynamic dispatch.
type ISurfaceCondition_StoneDepthContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	StoneDepthMode() antlr.TerminalNode
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode
	AllSurfaceCondition_StoneDepthBuilder() []ISurfaceCondition_StoneDepthBuilderContext
	SurfaceCondition_StoneDepthBuilder(i int) ISurfaceCondition_StoneDepthBuilderContext

	// IsSurfaceCondition_StoneDepthContext differentiates from other interfaces.
	IsSurfaceCondition_StoneDepthContext()
}

type SurfaceCondition_StoneDepthContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySurfaceCondition_StoneDepthContext() *SurfaceCondition_StoneDepthContext {
	var p = new(SurfaceCondition_StoneDepthContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_StoneDepth
	return p
}

func InitEmptySurfaceCondition_StoneDepthContext(p *SurfaceCondition_StoneDepthContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_StoneDepth
}

func (*SurfaceCondition_StoneDepthContext) IsSurfaceCondition_StoneDepthContext() {}

func NewSurfaceCondition_StoneDepthContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SurfaceCondition_StoneDepthContext {
	var p = new(SurfaceCondition_StoneDepthContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_StoneDepth

	return p
}

func (s *SurfaceCondition_StoneDepthContext) GetParser() antlr.Parser { return s.parser }

func (s *SurfaceCondition_StoneDepthContext) StoneDepthMode() antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserStoneDepthMode, 0)
}

func (s *SurfaceCondition_StoneDepthContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *SurfaceCondition_StoneDepthContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *SurfaceCondition_StoneDepthContext) AllSurfaceCondition_StoneDepthBuilder() []ISurfaceCondition_StoneDepthBuilderContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISurfaceCondition_StoneDepthBuilderContext); ok {
			len++
		}
	}

	tst := make([]ISurfaceCondition_StoneDepthBuilderContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISurfaceCondition_StoneDepthBuilderContext); ok {
			tst[i] = t.(ISurfaceCondition_StoneDepthBuilderContext)
			i++
		}
	}

	return tst
}

func (s *SurfaceCondition_StoneDepthContext) SurfaceCondition_StoneDepthBuilder(i int) ISurfaceCondition_StoneDepthBuilderContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceCondition_StoneDepthBuilderContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceCondition_StoneDepthBuilderContext)
}

func (s *SurfaceCondition_StoneDepthContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SurfaceCondition_StoneDepthContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SurfaceCondition_StoneDepthContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterSurfaceCondition_StoneDepth(s)
	}
}

func (s *SurfaceCondition_StoneDepthContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitSurfaceCondition_StoneDepth(s)
	}
}

func (p *MinecraftMetascriptParser) SurfaceCondition_StoneDepth() (localctx ISurfaceCondition_StoneDepthContext) {
	localctx = NewSurfaceCondition_StoneDepthContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, MinecraftMetascriptParserRULE_surfaceCondition_StoneDepth)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(515)
		p.Match(MinecraftMetascriptParserT__17)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(516)
		p.Match(MinecraftMetascriptParserStoneDepthMode)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(517)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(521)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 36, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(518)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(523)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 36, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(533)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&6597070290944) != 0 {
		{
			p.SetState(524)
			p.SurfaceCondition_StoneDepthBuilder()
		}
		p.SetState(528)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 37, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(525)
					p.Match(MinecraftMetascriptParserNL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(530)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 37, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}

		p.SetState(535)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISurfaceCondition_StoneDepthBuilderContext is an interface to support dynamic dispatch.
type ISurfaceCondition_StoneDepthBuilderContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Builder_Offset() IBuilder_OffsetContext
	Builder_Add() IBuilder_AddContext
	SurfaceCondition_StoneDepthBuilder_SecondaryDepthRange() ISurfaceCondition_StoneDepthBuilder_SecondaryDepthRangeContext

	// IsSurfaceCondition_StoneDepthBuilderContext differentiates from other interfaces.
	IsSurfaceCondition_StoneDepthBuilderContext()
}

type SurfaceCondition_StoneDepthBuilderContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySurfaceCondition_StoneDepthBuilderContext() *SurfaceCondition_StoneDepthBuilderContext {
	var p = new(SurfaceCondition_StoneDepthBuilderContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_StoneDepthBuilder
	return p
}

func InitEmptySurfaceCondition_StoneDepthBuilderContext(p *SurfaceCondition_StoneDepthBuilderContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_StoneDepthBuilder
}

func (*SurfaceCondition_StoneDepthBuilderContext) IsSurfaceCondition_StoneDepthBuilderContext() {}

func NewSurfaceCondition_StoneDepthBuilderContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SurfaceCondition_StoneDepthBuilderContext {
	var p = new(SurfaceCondition_StoneDepthBuilderContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_StoneDepthBuilder

	return p
}

func (s *SurfaceCondition_StoneDepthBuilderContext) GetParser() antlr.Parser { return s.parser }

func (s *SurfaceCondition_StoneDepthBuilderContext) Builder_Offset() IBuilder_OffsetContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_OffsetContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_OffsetContext)
}

func (s *SurfaceCondition_StoneDepthBuilderContext) Builder_Add() IBuilder_AddContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_AddContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_AddContext)
}

func (s *SurfaceCondition_StoneDepthBuilderContext) SurfaceCondition_StoneDepthBuilder_SecondaryDepthRange() ISurfaceCondition_StoneDepthBuilder_SecondaryDepthRangeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceCondition_StoneDepthBuilder_SecondaryDepthRangeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceCondition_StoneDepthBuilder_SecondaryDepthRangeContext)
}

func (s *SurfaceCondition_StoneDepthBuilderContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SurfaceCondition_StoneDepthBuilderContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SurfaceCondition_StoneDepthBuilderContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterSurfaceCondition_StoneDepthBuilder(s)
	}
}

func (s *SurfaceCondition_StoneDepthBuilderContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitSurfaceCondition_StoneDepthBuilder(s)
	}
}

func (p *MinecraftMetascriptParser) SurfaceCondition_StoneDepthBuilder() (localctx ISurfaceCondition_StoneDepthBuilderContext) {
	localctx = NewSurfaceCondition_StoneDepthBuilderContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, MinecraftMetascriptParserRULE_surfaceCondition_StoneDepthBuilder)
	p.SetState(539)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case MinecraftMetascriptParserT__40:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(536)
			p.Builder_Offset()
		}

	case MinecraftMetascriptParserT__41:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(537)
			p.Builder_Add()
		}

	case MinecraftMetascriptParserT__18:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(538)
			p.SurfaceCondition_StoneDepthBuilder_SecondaryDepthRange()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISurfaceCondition_StoneDepthBuilder_SecondaryDepthRangeContext is an interface to support dynamic dispatch.
type ISurfaceCondition_StoneDepthBuilder_SecondaryDepthRangeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Int() antlr.TerminalNode

	// IsSurfaceCondition_StoneDepthBuilder_SecondaryDepthRangeContext differentiates from other interfaces.
	IsSurfaceCondition_StoneDepthBuilder_SecondaryDepthRangeContext()
}

type SurfaceCondition_StoneDepthBuilder_SecondaryDepthRangeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySurfaceCondition_StoneDepthBuilder_SecondaryDepthRangeContext() *SurfaceCondition_StoneDepthBuilder_SecondaryDepthRangeContext {
	var p = new(SurfaceCondition_StoneDepthBuilder_SecondaryDepthRangeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_StoneDepthBuilder_SecondaryDepthRange
	return p
}

func InitEmptySurfaceCondition_StoneDepthBuilder_SecondaryDepthRangeContext(p *SurfaceCondition_StoneDepthBuilder_SecondaryDepthRangeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_StoneDepthBuilder_SecondaryDepthRange
}

func (*SurfaceCondition_StoneDepthBuilder_SecondaryDepthRangeContext) IsSurfaceCondition_StoneDepthBuilder_SecondaryDepthRangeContext() {
}

func NewSurfaceCondition_StoneDepthBuilder_SecondaryDepthRangeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SurfaceCondition_StoneDepthBuilder_SecondaryDepthRangeContext {
	var p = new(SurfaceCondition_StoneDepthBuilder_SecondaryDepthRangeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_StoneDepthBuilder_SecondaryDepthRange

	return p
}

func (s *SurfaceCondition_StoneDepthBuilder_SecondaryDepthRangeContext) GetParser() antlr.Parser {
	return s.parser
}

func (s *SurfaceCondition_StoneDepthBuilder_SecondaryDepthRangeContext) Int() antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserInt, 0)
}

func (s *SurfaceCondition_StoneDepthBuilder_SecondaryDepthRangeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SurfaceCondition_StoneDepthBuilder_SecondaryDepthRangeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SurfaceCondition_StoneDepthBuilder_SecondaryDepthRangeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterSurfaceCondition_StoneDepthBuilder_SecondaryDepthRange(s)
	}
}

func (s *SurfaceCondition_StoneDepthBuilder_SecondaryDepthRangeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitSurfaceCondition_StoneDepthBuilder_SecondaryDepthRange(s)
	}
}

func (p *MinecraftMetascriptParser) SurfaceCondition_StoneDepthBuilder_SecondaryDepthRange() (localctx ISurfaceCondition_StoneDepthBuilder_SecondaryDepthRangeContext) {
	localctx = NewSurfaceCondition_StoneDepthBuilder_SecondaryDepthRangeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, MinecraftMetascriptParserRULE_surfaceCondition_StoneDepthBuilder_SecondaryDepthRange)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(541)
		p.Match(MinecraftMetascriptParserT__18)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(542)
		p.Match(MinecraftMetascriptParserInt)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(543)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISurfaceCondition_VerticalGradientContext is an interface to support dynamic dispatch.
type ISurfaceCondition_VerticalGradientContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	String_() antlr.TerminalNode
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode
	AllSurfaceCondition_VerticalGradientBuilder() []ISurfaceCondition_VerticalGradientBuilderContext
	SurfaceCondition_VerticalGradientBuilder(i int) ISurfaceCondition_VerticalGradientBuilderContext

	// IsSurfaceCondition_VerticalGradientContext differentiates from other interfaces.
	IsSurfaceCondition_VerticalGradientContext()
}

type SurfaceCondition_VerticalGradientContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySurfaceCondition_VerticalGradientContext() *SurfaceCondition_VerticalGradientContext {
	var p = new(SurfaceCondition_VerticalGradientContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_VerticalGradient
	return p
}

func InitEmptySurfaceCondition_VerticalGradientContext(p *SurfaceCondition_VerticalGradientContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_VerticalGradient
}

func (*SurfaceCondition_VerticalGradientContext) IsSurfaceCondition_VerticalGradientContext() {}

func NewSurfaceCondition_VerticalGradientContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SurfaceCondition_VerticalGradientContext {
	var p = new(SurfaceCondition_VerticalGradientContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_VerticalGradient

	return p
}

func (s *SurfaceCondition_VerticalGradientContext) GetParser() antlr.Parser { return s.parser }

func (s *SurfaceCondition_VerticalGradientContext) String_() antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserString_, 0)
}

func (s *SurfaceCondition_VerticalGradientContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *SurfaceCondition_VerticalGradientContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *SurfaceCondition_VerticalGradientContext) AllSurfaceCondition_VerticalGradientBuilder() []ISurfaceCondition_VerticalGradientBuilderContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISurfaceCondition_VerticalGradientBuilderContext); ok {
			len++
		}
	}

	tst := make([]ISurfaceCondition_VerticalGradientBuilderContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISurfaceCondition_VerticalGradientBuilderContext); ok {
			tst[i] = t.(ISurfaceCondition_VerticalGradientBuilderContext)
			i++
		}
	}

	return tst
}

func (s *SurfaceCondition_VerticalGradientContext) SurfaceCondition_VerticalGradientBuilder(i int) ISurfaceCondition_VerticalGradientBuilderContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceCondition_VerticalGradientBuilderContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceCondition_VerticalGradientBuilderContext)
}

func (s *SurfaceCondition_VerticalGradientContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SurfaceCondition_VerticalGradientContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SurfaceCondition_VerticalGradientContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterSurfaceCondition_VerticalGradient(s)
	}
}

func (s *SurfaceCondition_VerticalGradientContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitSurfaceCondition_VerticalGradient(s)
	}
}

func (p *MinecraftMetascriptParser) SurfaceCondition_VerticalGradient() (localctx ISurfaceCondition_VerticalGradientContext) {
	localctx = NewSurfaceCondition_VerticalGradientContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, MinecraftMetascriptParserRULE_surfaceCondition_VerticalGradient)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(545)
		p.Match(MinecraftMetascriptParserT__19)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(546)
		p.Match(MinecraftMetascriptParserT__7)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(547)
		p.Match(MinecraftMetascriptParserString_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(548)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(552)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 40, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(549)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(554)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 40, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(564)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserT__45 || _la == MinecraftMetascriptParserT__46 {
		{
			p.SetState(555)
			p.SurfaceCondition_VerticalGradientBuilder()
		}
		p.SetState(559)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 41, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(556)
					p.Match(MinecraftMetascriptParserNL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(561)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 41, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}

		p.SetState(566)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISurfaceCondition_VerticalGradientBuilderContext is an interface to support dynamic dispatch.
type ISurfaceCondition_VerticalGradientBuilderContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Builder_Top() IBuilder_TopContext
	Builder_Bottom() IBuilder_BottomContext

	// IsSurfaceCondition_VerticalGradientBuilderContext differentiates from other interfaces.
	IsSurfaceCondition_VerticalGradientBuilderContext()
}

type SurfaceCondition_VerticalGradientBuilderContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySurfaceCondition_VerticalGradientBuilderContext() *SurfaceCondition_VerticalGradientBuilderContext {
	var p = new(SurfaceCondition_VerticalGradientBuilderContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_VerticalGradientBuilder
	return p
}

func InitEmptySurfaceCondition_VerticalGradientBuilderContext(p *SurfaceCondition_VerticalGradientBuilderContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_VerticalGradientBuilder
}

func (*SurfaceCondition_VerticalGradientBuilderContext) IsSurfaceCondition_VerticalGradientBuilderContext() {
}

func NewSurfaceCondition_VerticalGradientBuilderContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SurfaceCondition_VerticalGradientBuilderContext {
	var p = new(SurfaceCondition_VerticalGradientBuilderContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_VerticalGradientBuilder

	return p
}

func (s *SurfaceCondition_VerticalGradientBuilderContext) GetParser() antlr.Parser { return s.parser }

func (s *SurfaceCondition_VerticalGradientBuilderContext) Builder_Top() IBuilder_TopContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_TopContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_TopContext)
}

func (s *SurfaceCondition_VerticalGradientBuilderContext) Builder_Bottom() IBuilder_BottomContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_BottomContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_BottomContext)
}

func (s *SurfaceCondition_VerticalGradientBuilderContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SurfaceCondition_VerticalGradientBuilderContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SurfaceCondition_VerticalGradientBuilderContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterSurfaceCondition_VerticalGradientBuilder(s)
	}
}

func (s *SurfaceCondition_VerticalGradientBuilderContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitSurfaceCondition_VerticalGradientBuilder(s)
	}
}

func (p *MinecraftMetascriptParser) SurfaceCondition_VerticalGradientBuilder() (localctx ISurfaceCondition_VerticalGradientBuilderContext) {
	localctx = NewSurfaceCondition_VerticalGradientBuilderContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, MinecraftMetascriptParserRULE_surfaceCondition_VerticalGradientBuilder)
	p.SetState(569)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case MinecraftMetascriptParserT__45:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(567)
			p.Builder_Top()
		}

	case MinecraftMetascriptParserT__46:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(568)
			p.Builder_Bottom()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISurfaceCondition_AboveWaterContext is an interface to support dynamic dispatch.
type ISurfaceCondition_AboveWaterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode
	AllSurfaceCondition_AboveWaterBuilder() []ISurfaceCondition_AboveWaterBuilderContext
	SurfaceCondition_AboveWaterBuilder(i int) ISurfaceCondition_AboveWaterBuilderContext

	// IsSurfaceCondition_AboveWaterContext differentiates from other interfaces.
	IsSurfaceCondition_AboveWaterContext()
}

type SurfaceCondition_AboveWaterContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySurfaceCondition_AboveWaterContext() *SurfaceCondition_AboveWaterContext {
	var p = new(SurfaceCondition_AboveWaterContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_AboveWater
	return p
}

func InitEmptySurfaceCondition_AboveWaterContext(p *SurfaceCondition_AboveWaterContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_AboveWater
}

func (*SurfaceCondition_AboveWaterContext) IsSurfaceCondition_AboveWaterContext() {}

func NewSurfaceCondition_AboveWaterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SurfaceCondition_AboveWaterContext {
	var p = new(SurfaceCondition_AboveWaterContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_AboveWater

	return p
}

func (s *SurfaceCondition_AboveWaterContext) GetParser() antlr.Parser { return s.parser }

func (s *SurfaceCondition_AboveWaterContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *SurfaceCondition_AboveWaterContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *SurfaceCondition_AboveWaterContext) AllSurfaceCondition_AboveWaterBuilder() []ISurfaceCondition_AboveWaterBuilderContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISurfaceCondition_AboveWaterBuilderContext); ok {
			len++
		}
	}

	tst := make([]ISurfaceCondition_AboveWaterBuilderContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISurfaceCondition_AboveWaterBuilderContext); ok {
			tst[i] = t.(ISurfaceCondition_AboveWaterBuilderContext)
			i++
		}
	}

	return tst
}

func (s *SurfaceCondition_AboveWaterContext) SurfaceCondition_AboveWaterBuilder(i int) ISurfaceCondition_AboveWaterBuilderContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceCondition_AboveWaterBuilderContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceCondition_AboveWaterBuilderContext)
}

func (s *SurfaceCondition_AboveWaterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SurfaceCondition_AboveWaterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SurfaceCondition_AboveWaterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterSurfaceCondition_AboveWater(s)
	}
}

func (s *SurfaceCondition_AboveWaterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitSurfaceCondition_AboveWater(s)
	}
}

func (p *MinecraftMetascriptParser) SurfaceCondition_AboveWater() (localctx ISurfaceCondition_AboveWaterContext) {
	localctx = NewSurfaceCondition_AboveWaterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, MinecraftMetascriptParserRULE_surfaceCondition_AboveWater)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(571)
		p.Match(MinecraftMetascriptParserT__20)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(572)
		p.Match(MinecraftMetascriptParserT__7)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(573)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(577)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 44, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(574)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(579)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 44, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(589)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&15393162788864) != 0 {
		{
			p.SetState(580)
			p.SurfaceCondition_AboveWaterBuilder()
		}
		p.SetState(584)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 45, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(581)
					p.Match(MinecraftMetascriptParserNL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(586)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 45, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}

		p.SetState(591)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISurfaceCondition_AboveWaterBuilderContext is an interface to support dynamic dispatch.
type ISurfaceCondition_AboveWaterBuilderContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Builder_Offset() IBuilder_OffsetContext
	Builder_Add() IBuilder_AddContext
	Builder_Mul() IBuilder_MulContext

	// IsSurfaceCondition_AboveWaterBuilderContext differentiates from other interfaces.
	IsSurfaceCondition_AboveWaterBuilderContext()
}

type SurfaceCondition_AboveWaterBuilderContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySurfaceCondition_AboveWaterBuilderContext() *SurfaceCondition_AboveWaterBuilderContext {
	var p = new(SurfaceCondition_AboveWaterBuilderContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_AboveWaterBuilder
	return p
}

func InitEmptySurfaceCondition_AboveWaterBuilderContext(p *SurfaceCondition_AboveWaterBuilderContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_AboveWaterBuilder
}

func (*SurfaceCondition_AboveWaterBuilderContext) IsSurfaceCondition_AboveWaterBuilderContext() {}

func NewSurfaceCondition_AboveWaterBuilderContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SurfaceCondition_AboveWaterBuilderContext {
	var p = new(SurfaceCondition_AboveWaterBuilderContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_AboveWaterBuilder

	return p
}

func (s *SurfaceCondition_AboveWaterBuilderContext) GetParser() antlr.Parser { return s.parser }

func (s *SurfaceCondition_AboveWaterBuilderContext) Builder_Offset() IBuilder_OffsetContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_OffsetContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_OffsetContext)
}

func (s *SurfaceCondition_AboveWaterBuilderContext) Builder_Add() IBuilder_AddContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_AddContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_AddContext)
}

func (s *SurfaceCondition_AboveWaterBuilderContext) Builder_Mul() IBuilder_MulContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_MulContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_MulContext)
}

func (s *SurfaceCondition_AboveWaterBuilderContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SurfaceCondition_AboveWaterBuilderContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SurfaceCondition_AboveWaterBuilderContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterSurfaceCondition_AboveWaterBuilder(s)
	}
}

func (s *SurfaceCondition_AboveWaterBuilderContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitSurfaceCondition_AboveWaterBuilder(s)
	}
}

func (p *MinecraftMetascriptParser) SurfaceCondition_AboveWaterBuilder() (localctx ISurfaceCondition_AboveWaterBuilderContext) {
	localctx = NewSurfaceCondition_AboveWaterBuilderContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, MinecraftMetascriptParserRULE_surfaceCondition_AboveWaterBuilder)
	p.SetState(595)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case MinecraftMetascriptParserT__40:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(592)
			p.Builder_Offset()
		}

	case MinecraftMetascriptParserT__41:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(593)
			p.Builder_Add()
		}

	case MinecraftMetascriptParserT__42:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(594)
			p.Builder_Mul()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISurfaceCondition_YAboveContext is an interface to support dynamic dispatch.
type ISurfaceCondition_YAboveContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	VerticalAnchor() IVerticalAnchorContext
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode
	AllSurfaceCondition_YAboveBuilder() []ISurfaceCondition_YAboveBuilderContext
	SurfaceCondition_YAboveBuilder(i int) ISurfaceCondition_YAboveBuilderContext

	// IsSurfaceCondition_YAboveContext differentiates from other interfaces.
	IsSurfaceCondition_YAboveContext()
}

type SurfaceCondition_YAboveContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySurfaceCondition_YAboveContext() *SurfaceCondition_YAboveContext {
	var p = new(SurfaceCondition_YAboveContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_YAbove
	return p
}

func InitEmptySurfaceCondition_YAboveContext(p *SurfaceCondition_YAboveContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_YAbove
}

func (*SurfaceCondition_YAboveContext) IsSurfaceCondition_YAboveContext() {}

func NewSurfaceCondition_YAboveContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SurfaceCondition_YAboveContext {
	var p = new(SurfaceCondition_YAboveContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_YAbove

	return p
}

func (s *SurfaceCondition_YAboveContext) GetParser() antlr.Parser { return s.parser }

func (s *SurfaceCondition_YAboveContext) VerticalAnchor() IVerticalAnchorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVerticalAnchorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVerticalAnchorContext)
}

func (s *SurfaceCondition_YAboveContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *SurfaceCondition_YAboveContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *SurfaceCondition_YAboveContext) AllSurfaceCondition_YAboveBuilder() []ISurfaceCondition_YAboveBuilderContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISurfaceCondition_YAboveBuilderContext); ok {
			len++
		}
	}

	tst := make([]ISurfaceCondition_YAboveBuilderContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISurfaceCondition_YAboveBuilderContext); ok {
			tst[i] = t.(ISurfaceCondition_YAboveBuilderContext)
			i++
		}
	}

	return tst
}

func (s *SurfaceCondition_YAboveContext) SurfaceCondition_YAboveBuilder(i int) ISurfaceCondition_YAboveBuilderContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceCondition_YAboveBuilderContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceCondition_YAboveBuilderContext)
}

func (s *SurfaceCondition_YAboveContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SurfaceCondition_YAboveContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SurfaceCondition_YAboveContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterSurfaceCondition_YAbove(s)
	}
}

func (s *SurfaceCondition_YAboveContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitSurfaceCondition_YAbove(s)
	}
}

func (p *MinecraftMetascriptParser) SurfaceCondition_YAbove() (localctx ISurfaceCondition_YAboveContext) {
	localctx = NewSurfaceCondition_YAboveContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, MinecraftMetascriptParserRULE_surfaceCondition_YAbove)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(597)
		p.Match(MinecraftMetascriptParserT__21)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(598)
		p.Match(MinecraftMetascriptParserT__7)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(599)
		p.VerticalAnchor()
	}
	{
		p.SetState(600)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(604)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 48, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(601)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(606)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 48, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(616)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserT__41 || _la == MinecraftMetascriptParserT__42 {
		{
			p.SetState(607)
			p.SurfaceCondition_YAboveBuilder()
		}
		p.SetState(611)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 49, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(608)
					p.Match(MinecraftMetascriptParserNL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(613)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 49, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}

		p.SetState(618)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISurfaceCondition_YAboveBuilderContext is an interface to support dynamic dispatch.
type ISurfaceCondition_YAboveBuilderContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Builder_MulInt() IBuilder_MulIntContext
	Builder_Add() IBuilder_AddContext

	// IsSurfaceCondition_YAboveBuilderContext differentiates from other interfaces.
	IsSurfaceCondition_YAboveBuilderContext()
}

type SurfaceCondition_YAboveBuilderContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySurfaceCondition_YAboveBuilderContext() *SurfaceCondition_YAboveBuilderContext {
	var p = new(SurfaceCondition_YAboveBuilderContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_YAboveBuilder
	return p
}

func InitEmptySurfaceCondition_YAboveBuilderContext(p *SurfaceCondition_YAboveBuilderContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_YAboveBuilder
}

func (*SurfaceCondition_YAboveBuilderContext) IsSurfaceCondition_YAboveBuilderContext() {}

func NewSurfaceCondition_YAboveBuilderContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SurfaceCondition_YAboveBuilderContext {
	var p = new(SurfaceCondition_YAboveBuilderContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceCondition_YAboveBuilder

	return p
}

func (s *SurfaceCondition_YAboveBuilderContext) GetParser() antlr.Parser { return s.parser }

func (s *SurfaceCondition_YAboveBuilderContext) Builder_MulInt() IBuilder_MulIntContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_MulIntContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_MulIntContext)
}

func (s *SurfaceCondition_YAboveBuilderContext) Builder_Add() IBuilder_AddContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_AddContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_AddContext)
}

func (s *SurfaceCondition_YAboveBuilderContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SurfaceCondition_YAboveBuilderContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SurfaceCondition_YAboveBuilderContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterSurfaceCondition_YAboveBuilder(s)
	}
}

func (s *SurfaceCondition_YAboveBuilderContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitSurfaceCondition_YAboveBuilder(s)
	}
}

func (p *MinecraftMetascriptParser) SurfaceCondition_YAboveBuilder() (localctx ISurfaceCondition_YAboveBuilderContext) {
	localctx = NewSurfaceCondition_YAboveBuilderContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, MinecraftMetascriptParserRULE_surfaceCondition_YAboveBuilder)
	p.SetState(621)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case MinecraftMetascriptParserT__42:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(619)
			p.Builder_MulInt()
		}

	case MinecraftMetascriptParserT__41:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(620)
			p.Builder_Add()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISurfaceRuleDeclarationContext is an interface to support dynamic dispatch.
type ISurfaceRuleDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Declare() IDeclareContext
	SurfaceRule() ISurfaceRuleContext

	// IsSurfaceRuleDeclarationContext differentiates from other interfaces.
	IsSurfaceRuleDeclarationContext()
}

type SurfaceRuleDeclarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySurfaceRuleDeclarationContext() *SurfaceRuleDeclarationContext {
	var p = new(SurfaceRuleDeclarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceRuleDeclaration
	return p
}

func InitEmptySurfaceRuleDeclarationContext(p *SurfaceRuleDeclarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceRuleDeclaration
}

func (*SurfaceRuleDeclarationContext) IsSurfaceRuleDeclarationContext() {}

func NewSurfaceRuleDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SurfaceRuleDeclarationContext {
	var p = new(SurfaceRuleDeclarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceRuleDeclaration

	return p
}

func (s *SurfaceRuleDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *SurfaceRuleDeclarationContext) Declare() IDeclareContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDeclareContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDeclareContext)
}

func (s *SurfaceRuleDeclarationContext) SurfaceRule() ISurfaceRuleContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceRuleContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceRuleContext)
}

func (s *SurfaceRuleDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SurfaceRuleDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SurfaceRuleDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterSurfaceRuleDeclaration(s)
	}
}

func (s *SurfaceRuleDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitSurfaceRuleDeclaration(s)
	}
}

func (p *MinecraftMetascriptParser) SurfaceRuleDeclaration() (localctx ISurfaceRuleDeclarationContext) {
	localctx = NewSurfaceRuleDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, MinecraftMetascriptParserRULE_surfaceRuleDeclaration)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(623)
		p.Declare()
	}
	{
		p.SetState(624)
		p.SurfaceRule()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISurfaceRuleContext is an interface to support dynamic dispatch.
type ISurfaceRuleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SurfaceRule_Block() ISurfaceRule_BlockContext
	SurfaceRule_Sequence() ISurfaceRule_SequenceContext
	SurfaceRule_Reference() ISurfaceRule_ReferenceContext
	SurfaceRule_If() ISurfaceRule_IfContext
	SurfaceRule_Bandlands() ISurfaceRule_BandlandsContext

	// IsSurfaceRuleContext differentiates from other interfaces.
	IsSurfaceRuleContext()
}

type SurfaceRuleContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySurfaceRuleContext() *SurfaceRuleContext {
	var p = new(SurfaceRuleContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceRule
	return p
}

func InitEmptySurfaceRuleContext(p *SurfaceRuleContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceRule
}

func (*SurfaceRuleContext) IsSurfaceRuleContext() {}

func NewSurfaceRuleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SurfaceRuleContext {
	var p = new(SurfaceRuleContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceRule

	return p
}

func (s *SurfaceRuleContext) GetParser() antlr.Parser { return s.parser }

func (s *SurfaceRuleContext) SurfaceRule_Block() ISurfaceRule_BlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceRule_BlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceRule_BlockContext)
}

func (s *SurfaceRuleContext) SurfaceRule_Sequence() ISurfaceRule_SequenceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceRule_SequenceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceRule_SequenceContext)
}

func (s *SurfaceRuleContext) SurfaceRule_Reference() ISurfaceRule_ReferenceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceRule_ReferenceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceRule_ReferenceContext)
}

func (s *SurfaceRuleContext) SurfaceRule_If() ISurfaceRule_IfContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceRule_IfContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceRule_IfContext)
}

func (s *SurfaceRuleContext) SurfaceRule_Bandlands() ISurfaceRule_BandlandsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceRule_BandlandsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceRule_BandlandsContext)
}

func (s *SurfaceRuleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SurfaceRuleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SurfaceRuleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterSurfaceRule(s)
	}
}

func (s *SurfaceRuleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitSurfaceRule(s)
	}
}

func (p *MinecraftMetascriptParser) SurfaceRule() (localctx ISurfaceRuleContext) {
	localctx = NewSurfaceRuleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, MinecraftMetascriptParserRULE_surfaceRule)
	p.SetState(631)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case MinecraftMetascriptParserT__22:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(626)
			p.SurfaceRule_Block()
		}

	case MinecraftMetascriptParserT__23:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(627)
			p.SurfaceRule_Sequence()
		}

	case MinecraftMetascriptParserIdentifier:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(628)
			p.SurfaceRule_Reference()
		}

	case MinecraftMetascriptParserT__26:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(629)
			p.SurfaceRule_If()
		}

	case MinecraftMetascriptParserT__25:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(630)
			p.SurfaceRule_Bandlands()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISurfaceRule_ReferenceContext is an interface to support dynamic dispatch.
type ISurfaceRule_ReferenceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ResourceReference() IResourceReferenceContext

	// IsSurfaceRule_ReferenceContext differentiates from other interfaces.
	IsSurfaceRule_ReferenceContext()
}

type SurfaceRule_ReferenceContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySurfaceRule_ReferenceContext() *SurfaceRule_ReferenceContext {
	var p = new(SurfaceRule_ReferenceContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceRule_Reference
	return p
}

func InitEmptySurfaceRule_ReferenceContext(p *SurfaceRule_ReferenceContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceRule_Reference
}

func (*SurfaceRule_ReferenceContext) IsSurfaceRule_ReferenceContext() {}

func NewSurfaceRule_ReferenceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SurfaceRule_ReferenceContext {
	var p = new(SurfaceRule_ReferenceContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceRule_Reference

	return p
}

func (s *SurfaceRule_ReferenceContext) GetParser() antlr.Parser { return s.parser }

func (s *SurfaceRule_ReferenceContext) ResourceReference() IResourceReferenceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IResourceReferenceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IResourceReferenceContext)
}

func (s *SurfaceRule_ReferenceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SurfaceRule_ReferenceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SurfaceRule_ReferenceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterSurfaceRule_Reference(s)
	}
}

func (s *SurfaceRule_ReferenceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitSurfaceRule_Reference(s)
	}
}

func (p *MinecraftMetascriptParser) SurfaceRule_Reference() (localctx ISurfaceRule_ReferenceContext) {
	localctx = NewSurfaceRule_ReferenceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, MinecraftMetascriptParserRULE_surfaceRule_Reference)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(633)
		p.ResourceReference()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISurfaceRule_BlockContext is an interface to support dynamic dispatch.
type ISurfaceRule_BlockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ResourceReference() IResourceReferenceContext

	// IsSurfaceRule_BlockContext differentiates from other interfaces.
	IsSurfaceRule_BlockContext()
}

type SurfaceRule_BlockContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySurfaceRule_BlockContext() *SurfaceRule_BlockContext {
	var p = new(SurfaceRule_BlockContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceRule_Block
	return p
}

func InitEmptySurfaceRule_BlockContext(p *SurfaceRule_BlockContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceRule_Block
}

func (*SurfaceRule_BlockContext) IsSurfaceRule_BlockContext() {}

func NewSurfaceRule_BlockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SurfaceRule_BlockContext {
	var p = new(SurfaceRule_BlockContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceRule_Block

	return p
}

func (s *SurfaceRule_BlockContext) GetParser() antlr.Parser { return s.parser }

func (s *SurfaceRule_BlockContext) ResourceReference() IResourceReferenceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IResourceReferenceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IResourceReferenceContext)
}

func (s *SurfaceRule_BlockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SurfaceRule_BlockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SurfaceRule_BlockContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterSurfaceRule_Block(s)
	}
}

func (s *SurfaceRule_BlockContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitSurfaceRule_Block(s)
	}
}

func (p *MinecraftMetascriptParser) SurfaceRule_Block() (localctx ISurfaceRule_BlockContext) {
	localctx = NewSurfaceRule_BlockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, MinecraftMetascriptParserRULE_surfaceRule_Block)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(635)
		p.Match(MinecraftMetascriptParserT__22)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(636)
		p.Match(MinecraftMetascriptParserT__7)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(637)
		p.ResourceReference()
	}
	{
		p.SetState(638)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISurfaceRule_SequenceContext is an interface to support dynamic dispatch.
type ISurfaceRule_SequenceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode
	AllSurfaceRule() []ISurfaceRuleContext
	SurfaceRule(i int) ISurfaceRuleContext

	// IsSurfaceRule_SequenceContext differentiates from other interfaces.
	IsSurfaceRule_SequenceContext()
}

type SurfaceRule_SequenceContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySurfaceRule_SequenceContext() *SurfaceRule_SequenceContext {
	var p = new(SurfaceRule_SequenceContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceRule_Sequence
	return p
}

func InitEmptySurfaceRule_SequenceContext(p *SurfaceRule_SequenceContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceRule_Sequence
}

func (*SurfaceRule_SequenceContext) IsSurfaceRule_SequenceContext() {}

func NewSurfaceRule_SequenceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SurfaceRule_SequenceContext {
	var p = new(SurfaceRule_SequenceContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceRule_Sequence

	return p
}

func (s *SurfaceRule_SequenceContext) GetParser() antlr.Parser { return s.parser }

func (s *SurfaceRule_SequenceContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *SurfaceRule_SequenceContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *SurfaceRule_SequenceContext) AllSurfaceRule() []ISurfaceRuleContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ISurfaceRuleContext); ok {
			len++
		}
	}

	tst := make([]ISurfaceRuleContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ISurfaceRuleContext); ok {
			tst[i] = t.(ISurfaceRuleContext)
			i++
		}
	}

	return tst
}

func (s *SurfaceRule_SequenceContext) SurfaceRule(i int) ISurfaceRuleContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceRuleContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceRuleContext)
}

func (s *SurfaceRule_SequenceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SurfaceRule_SequenceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SurfaceRule_SequenceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterSurfaceRule_Sequence(s)
	}
}

func (s *SurfaceRule_SequenceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitSurfaceRule_Sequence(s)
	}
}

func (p *MinecraftMetascriptParser) SurfaceRule_Sequence() (localctx ISurfaceRule_SequenceContext) {
	localctx = NewSurfaceRule_SequenceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, MinecraftMetascriptParserRULE_surfaceRule_Sequence)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(640)
		p.Match(MinecraftMetascriptParserT__23)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(644)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 53, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(641)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(646)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 53, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(656)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&226492416) != 0) || _la == MinecraftMetascriptParserIdentifier {
		{
			p.SetState(647)
			p.SurfaceRule()
		}
		p.SetState(651)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 54, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(648)
					p.Match(MinecraftMetascriptParserNL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(653)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 54, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}

		p.SetState(658)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(662)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(659)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(664)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(665)
		p.Match(MinecraftMetascriptParserT__24)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISurfaceRule_BandlandsContext is an interface to support dynamic dispatch.
type ISurfaceRule_BandlandsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsSurfaceRule_BandlandsContext differentiates from other interfaces.
	IsSurfaceRule_BandlandsContext()
}

type SurfaceRule_BandlandsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySurfaceRule_BandlandsContext() *SurfaceRule_BandlandsContext {
	var p = new(SurfaceRule_BandlandsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceRule_Bandlands
	return p
}

func InitEmptySurfaceRule_BandlandsContext(p *SurfaceRule_BandlandsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceRule_Bandlands
}

func (*SurfaceRule_BandlandsContext) IsSurfaceRule_BandlandsContext() {}

func NewSurfaceRule_BandlandsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SurfaceRule_BandlandsContext {
	var p = new(SurfaceRule_BandlandsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceRule_Bandlands

	return p
}

func (s *SurfaceRule_BandlandsContext) GetParser() antlr.Parser { return s.parser }
func (s *SurfaceRule_BandlandsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SurfaceRule_BandlandsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SurfaceRule_BandlandsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterSurfaceRule_Bandlands(s)
	}
}

func (s *SurfaceRule_BandlandsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitSurfaceRule_Bandlands(s)
	}
}

func (p *MinecraftMetascriptParser) SurfaceRule_Bandlands() (localctx ISurfaceRule_BandlandsContext) {
	localctx = NewSurfaceRule_BandlandsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, MinecraftMetascriptParserRULE_surfaceRule_Bandlands)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(667)
		p.Match(MinecraftMetascriptParserT__25)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(668)
		p.Match(MinecraftMetascriptParserT__7)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(669)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISurfaceRule_IfContext is an interface to support dynamic dispatch.
type ISurfaceRule_IfContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SurfaceCondition() ISurfaceConditionContext
	SurfaceRule() ISurfaceRuleContext
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode

	// IsSurfaceRule_IfContext differentiates from other interfaces.
	IsSurfaceRule_IfContext()
}

type SurfaceRule_IfContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySurfaceRule_IfContext() *SurfaceRule_IfContext {
	var p = new(SurfaceRule_IfContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceRule_If
	return p
}

func InitEmptySurfaceRule_IfContext(p *SurfaceRule_IfContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceRule_If
}

func (*SurfaceRule_IfContext) IsSurfaceRule_IfContext() {}

func NewSurfaceRule_IfContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SurfaceRule_IfContext {
	var p = new(SurfaceRule_IfContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_surfaceRule_If

	return p
}

func (s *SurfaceRule_IfContext) GetParser() antlr.Parser { return s.parser }

func (s *SurfaceRule_IfContext) SurfaceCondition() ISurfaceConditionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceConditionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceConditionContext)
}

func (s *SurfaceRule_IfContext) SurfaceRule() ISurfaceRuleContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceRuleContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceRuleContext)
}

func (s *SurfaceRule_IfContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *SurfaceRule_IfContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *SurfaceRule_IfContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SurfaceRule_IfContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SurfaceRule_IfContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterSurfaceRule_If(s)
	}
}

func (s *SurfaceRule_IfContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitSurfaceRule_If(s)
	}
}

func (p *MinecraftMetascriptParser) SurfaceRule_If() (localctx ISurfaceRule_IfContext) {
	localctx = NewSurfaceRule_IfContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, MinecraftMetascriptParserRULE_surfaceRule_If)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(671)
		p.Match(MinecraftMetascriptParserT__26)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(675)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(672)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(677)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(678)
		p.Match(MinecraftMetascriptParserT__7)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(682)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(679)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(684)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(685)
		p.SurfaceCondition()
	}
	p.SetState(689)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(686)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(691)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(692)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(696)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(693)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(698)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(699)
		p.SurfaceRule()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDeclareContext is an interface to support dynamic dispatch.
type IDeclareContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() antlr.TerminalNode
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode

	// IsDeclareContext differentiates from other interfaces.
	IsDeclareContext()
}

type DeclareContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclareContext() *DeclareContext {
	var p = new(DeclareContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_declare
	return p
}

func InitEmptyDeclareContext(p *DeclareContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_declare
}

func (*DeclareContext) IsDeclareContext() {}

func NewDeclareContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclareContext {
	var p = new(DeclareContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_declare

	return p
}

func (s *DeclareContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclareContext) Identifier() antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserIdentifier, 0)
}

func (s *DeclareContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *DeclareContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *DeclareContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclareContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeclareContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterDeclare(s)
	}
}

func (s *DeclareContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitDeclare(s)
	}
}

func (p *MinecraftMetascriptParser) Declare() (localctx IDeclareContext) {
	localctx = NewDeclareContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, MinecraftMetascriptParserRULE_declare)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(701)
		p.Match(MinecraftMetascriptParserIdentifier)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(705)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(702)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(707)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(708)
		p.Match(MinecraftMetascriptParserT__27)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(712)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 62, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(709)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(714)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 62, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBuilder_XZScaleContext is an interface to support dynamic dispatch.
type IBuilder_XZScaleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Number() INumberContext
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode

	// IsBuilder_XZScaleContext differentiates from other interfaces.
	IsBuilder_XZScaleContext()
}

type Builder_XZScaleContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBuilder_XZScaleContext() *Builder_XZScaleContext {
	var p = new(Builder_XZScaleContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_XZScale
	return p
}

func InitEmptyBuilder_XZScaleContext(p *Builder_XZScaleContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_XZScale
}

func (*Builder_XZScaleContext) IsBuilder_XZScaleContext() {}

func NewBuilder_XZScaleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Builder_XZScaleContext {
	var p = new(Builder_XZScaleContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_XZScale

	return p
}

func (s *Builder_XZScaleContext) GetParser() antlr.Parser { return s.parser }

func (s *Builder_XZScaleContext) Number() INumberContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumberContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumberContext)
}

func (s *Builder_XZScaleContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *Builder_XZScaleContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *Builder_XZScaleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Builder_XZScaleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Builder_XZScaleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterBuilder_XZScale(s)
	}
}

func (s *Builder_XZScaleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitBuilder_XZScale(s)
	}
}

func (p *MinecraftMetascriptParser) Builder_XZScale() (localctx IBuilder_XZScaleContext) {
	localctx = NewBuilder_XZScaleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, MinecraftMetascriptParserRULE_builder_XZScale)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(715)
		p.Match(MinecraftMetascriptParserT__28)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(719)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(716)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(721)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(722)
		p.Number()
	}
	p.SetState(726)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(723)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(728)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(729)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBuilder_YScaleContext is an interface to support dynamic dispatch.
type IBuilder_YScaleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Number() INumberContext
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode

	// IsBuilder_YScaleContext differentiates from other interfaces.
	IsBuilder_YScaleContext()
}

type Builder_YScaleContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBuilder_YScaleContext() *Builder_YScaleContext {
	var p = new(Builder_YScaleContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_YScale
	return p
}

func InitEmptyBuilder_YScaleContext(p *Builder_YScaleContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_YScale
}

func (*Builder_YScaleContext) IsBuilder_YScaleContext() {}

func NewBuilder_YScaleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Builder_YScaleContext {
	var p = new(Builder_YScaleContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_YScale

	return p
}

func (s *Builder_YScaleContext) GetParser() antlr.Parser { return s.parser }

func (s *Builder_YScaleContext) Number() INumberContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumberContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumberContext)
}

func (s *Builder_YScaleContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *Builder_YScaleContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *Builder_YScaleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Builder_YScaleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Builder_YScaleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterBuilder_YScale(s)
	}
}

func (s *Builder_YScaleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitBuilder_YScale(s)
	}
}

func (p *MinecraftMetascriptParser) Builder_YScale() (localctx IBuilder_YScaleContext) {
	localctx = NewBuilder_YScaleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, MinecraftMetascriptParserRULE_builder_YScale)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(731)
		p.Match(MinecraftMetascriptParserT__29)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(735)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(732)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(737)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(738)
		p.Number()
	}
	p.SetState(742)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(739)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(744)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(745)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBuilder_XZFactorContext is an interface to support dynamic dispatch.
type IBuilder_XZFactorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Number() INumberContext
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode

	// IsBuilder_XZFactorContext differentiates from other interfaces.
	IsBuilder_XZFactorContext()
}

type Builder_XZFactorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBuilder_XZFactorContext() *Builder_XZFactorContext {
	var p = new(Builder_XZFactorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_XZFactor
	return p
}

func InitEmptyBuilder_XZFactorContext(p *Builder_XZFactorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_XZFactor
}

func (*Builder_XZFactorContext) IsBuilder_XZFactorContext() {}

func NewBuilder_XZFactorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Builder_XZFactorContext {
	var p = new(Builder_XZFactorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_XZFactor

	return p
}

func (s *Builder_XZFactorContext) GetParser() antlr.Parser { return s.parser }

func (s *Builder_XZFactorContext) Number() INumberContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumberContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumberContext)
}

func (s *Builder_XZFactorContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *Builder_XZFactorContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *Builder_XZFactorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Builder_XZFactorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Builder_XZFactorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterBuilder_XZFactor(s)
	}
}

func (s *Builder_XZFactorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitBuilder_XZFactor(s)
	}
}

func (p *MinecraftMetascriptParser) Builder_XZFactor() (localctx IBuilder_XZFactorContext) {
	localctx = NewBuilder_XZFactorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, MinecraftMetascriptParserRULE_builder_XZFactor)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(747)
		p.Match(MinecraftMetascriptParserT__30)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(751)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(748)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(753)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(754)
		p.Number()
	}
	p.SetState(758)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(755)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(760)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(761)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBuilder_YFactorContext is an interface to support dynamic dispatch.
type IBuilder_YFactorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Number() INumberContext
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode

	// IsBuilder_YFactorContext differentiates from other interfaces.
	IsBuilder_YFactorContext()
}

type Builder_YFactorContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBuilder_YFactorContext() *Builder_YFactorContext {
	var p = new(Builder_YFactorContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_YFactor
	return p
}

func InitEmptyBuilder_YFactorContext(p *Builder_YFactorContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_YFactor
}

func (*Builder_YFactorContext) IsBuilder_YFactorContext() {}

func NewBuilder_YFactorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Builder_YFactorContext {
	var p = new(Builder_YFactorContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_YFactor

	return p
}

func (s *Builder_YFactorContext) GetParser() antlr.Parser { return s.parser }

func (s *Builder_YFactorContext) Number() INumberContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumberContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumberContext)
}

func (s *Builder_YFactorContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *Builder_YFactorContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *Builder_YFactorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Builder_YFactorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Builder_YFactorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterBuilder_YFactor(s)
	}
}

func (s *Builder_YFactorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitBuilder_YFactor(s)
	}
}

func (p *MinecraftMetascriptParser) Builder_YFactor() (localctx IBuilder_YFactorContext) {
	localctx = NewBuilder_YFactorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, MinecraftMetascriptParserRULE_builder_YFactor)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(763)
		p.Match(MinecraftMetascriptParserT__31)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(767)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(764)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(769)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(770)
		p.Number()
	}
	p.SetState(774)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(771)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(776)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(777)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBuilder_NoiseContext is an interface to support dynamic dispatch.
type IBuilder_NoiseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	NoiseDefinition() INoiseDefinitionContext
	ResourceReference() IResourceReferenceContext
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode

	// IsBuilder_NoiseContext differentiates from other interfaces.
	IsBuilder_NoiseContext()
}

type Builder_NoiseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBuilder_NoiseContext() *Builder_NoiseContext {
	var p = new(Builder_NoiseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Noise
	return p
}

func InitEmptyBuilder_NoiseContext(p *Builder_NoiseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Noise
}

func (*Builder_NoiseContext) IsBuilder_NoiseContext() {}

func NewBuilder_NoiseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Builder_NoiseContext {
	var p = new(Builder_NoiseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Noise

	return p
}

func (s *Builder_NoiseContext) GetParser() antlr.Parser { return s.parser }

func (s *Builder_NoiseContext) NoiseDefinition() INoiseDefinitionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INoiseDefinitionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INoiseDefinitionContext)
}

func (s *Builder_NoiseContext) ResourceReference() IResourceReferenceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IResourceReferenceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IResourceReferenceContext)
}

func (s *Builder_NoiseContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *Builder_NoiseContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *Builder_NoiseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Builder_NoiseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Builder_NoiseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterBuilder_Noise(s)
	}
}

func (s *Builder_NoiseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitBuilder_Noise(s)
	}
}

func (p *MinecraftMetascriptParser) Builder_Noise() (localctx IBuilder_NoiseContext) {
	localctx = NewBuilder_NoiseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, MinecraftMetascriptParserRULE_builder_Noise)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(779)
		p.Match(MinecraftMetascriptParserT__32)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(797)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 73, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(780)
			p.NoiseDefinition()
		}

	case 2:
		{
			p.SetState(781)
			p.Match(MinecraftMetascriptParserT__7)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(785)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == MinecraftMetascriptParserNL {
			{
				p.SetState(782)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(787)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(788)
			p.ResourceReference()
		}
		p.SetState(792)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == MinecraftMetascriptParserNL {
			{
				p.SetState(789)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(794)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(795)
			p.Match(MinecraftMetascriptParserT__8)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBuilder_SmearContext is an interface to support dynamic dispatch.
type IBuilder_SmearContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Number() INumberContext
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode

	// IsBuilder_SmearContext differentiates from other interfaces.
	IsBuilder_SmearContext()
}

type Builder_SmearContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBuilder_SmearContext() *Builder_SmearContext {
	var p = new(Builder_SmearContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Smear
	return p
}

func InitEmptyBuilder_SmearContext(p *Builder_SmearContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Smear
}

func (*Builder_SmearContext) IsBuilder_SmearContext() {}

func NewBuilder_SmearContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Builder_SmearContext {
	var p = new(Builder_SmearContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Smear

	return p
}

func (s *Builder_SmearContext) GetParser() antlr.Parser { return s.parser }

func (s *Builder_SmearContext) Number() INumberContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumberContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumberContext)
}

func (s *Builder_SmearContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *Builder_SmearContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *Builder_SmearContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Builder_SmearContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Builder_SmearContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterBuilder_Smear(s)
	}
}

func (s *Builder_SmearContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitBuilder_Smear(s)
	}
}

func (p *MinecraftMetascriptParser) Builder_Smear() (localctx IBuilder_SmearContext) {
	localctx = NewBuilder_SmearContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, MinecraftMetascriptParserRULE_builder_Smear)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(799)
		p.Match(MinecraftMetascriptParserT__33)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(800)
		p.Match(MinecraftMetascriptParserT__7)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(804)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(801)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(806)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(807)
		p.Number()
	}
	p.SetState(811)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(808)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(813)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(814)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBuilder_Type1Context is an interface to support dynamic dispatch.
type IBuilder_Type1Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsBuilder_Type1Context differentiates from other interfaces.
	IsBuilder_Type1Context()
}

type Builder_Type1Context struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBuilder_Type1Context() *Builder_Type1Context {
	var p = new(Builder_Type1Context)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Type1
	return p
}

func InitEmptyBuilder_Type1Context(p *Builder_Type1Context) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Type1
}

func (*Builder_Type1Context) IsBuilder_Type1Context() {}

func NewBuilder_Type1Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Builder_Type1Context {
	var p = new(Builder_Type1Context)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Type1

	return p
}

func (s *Builder_Type1Context) GetParser() antlr.Parser { return s.parser }
func (s *Builder_Type1Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Builder_Type1Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Builder_Type1Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterBuilder_Type1(s)
	}
}

func (s *Builder_Type1Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitBuilder_Type1(s)
	}
}

func (p *MinecraftMetascriptParser) Builder_Type1() (localctx IBuilder_Type1Context) {
	localctx = NewBuilder_Type1Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, MinecraftMetascriptParserRULE_builder_Type1)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(816)
		p.Match(MinecraftMetascriptParserT__34)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(817)
		p.Match(MinecraftMetascriptParserT__7)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(818)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBuilder_Type2Context is an interface to support dynamic dispatch.
type IBuilder_Type2Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsBuilder_Type2Context differentiates from other interfaces.
	IsBuilder_Type2Context()
}

type Builder_Type2Context struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBuilder_Type2Context() *Builder_Type2Context {
	var p = new(Builder_Type2Context)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Type2
	return p
}

func InitEmptyBuilder_Type2Context(p *Builder_Type2Context) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Type2
}

func (*Builder_Type2Context) IsBuilder_Type2Context() {}

func NewBuilder_Type2Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Builder_Type2Context {
	var p = new(Builder_Type2Context)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Type2

	return p
}

func (s *Builder_Type2Context) GetParser() antlr.Parser { return s.parser }
func (s *Builder_Type2Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Builder_Type2Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Builder_Type2Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterBuilder_Type2(s)
	}
}

func (s *Builder_Type2Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitBuilder_Type2(s)
	}
}

func (p *MinecraftMetascriptParser) Builder_Type2() (localctx IBuilder_Type2Context) {
	localctx = NewBuilder_Type2Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, MinecraftMetascriptParserRULE_builder_Type2)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(820)
		p.Match(MinecraftMetascriptParserT__35)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(821)
		p.Match(MinecraftMetascriptParserT__7)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(822)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBuilder_ShiftXContext is an interface to support dynamic dispatch.
type IBuilder_ShiftXContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DensityFn() IDensityFnContext
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode

	// IsBuilder_ShiftXContext differentiates from other interfaces.
	IsBuilder_ShiftXContext()
}

type Builder_ShiftXContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBuilder_ShiftXContext() *Builder_ShiftXContext {
	var p = new(Builder_ShiftXContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_ShiftX
	return p
}

func InitEmptyBuilder_ShiftXContext(p *Builder_ShiftXContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_ShiftX
}

func (*Builder_ShiftXContext) IsBuilder_ShiftXContext() {}

func NewBuilder_ShiftXContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Builder_ShiftXContext {
	var p = new(Builder_ShiftXContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_ShiftX

	return p
}

func (s *Builder_ShiftXContext) GetParser() antlr.Parser { return s.parser }

func (s *Builder_ShiftXContext) DensityFn() IDensityFnContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFnContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFnContext)
}

func (s *Builder_ShiftXContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *Builder_ShiftXContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *Builder_ShiftXContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Builder_ShiftXContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Builder_ShiftXContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterBuilder_ShiftX(s)
	}
}

func (s *Builder_ShiftXContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitBuilder_ShiftX(s)
	}
}

func (p *MinecraftMetascriptParser) Builder_ShiftX() (localctx IBuilder_ShiftXContext) {
	localctx = NewBuilder_ShiftXContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, MinecraftMetascriptParserRULE_builder_ShiftX)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(824)
		p.Match(MinecraftMetascriptParserT__36)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(825)
		p.Match(MinecraftMetascriptParserT__7)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(829)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 76, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(826)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(831)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 76, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	{
		p.SetState(832)
		p.DensityFn()
	}
	p.SetState(836)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(833)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(838)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(839)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBuilder_ShiftYContext is an interface to support dynamic dispatch.
type IBuilder_ShiftYContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DensityFn() IDensityFnContext
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode

	// IsBuilder_ShiftYContext differentiates from other interfaces.
	IsBuilder_ShiftYContext()
}

type Builder_ShiftYContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBuilder_ShiftYContext() *Builder_ShiftYContext {
	var p = new(Builder_ShiftYContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_ShiftY
	return p
}

func InitEmptyBuilder_ShiftYContext(p *Builder_ShiftYContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_ShiftY
}

func (*Builder_ShiftYContext) IsBuilder_ShiftYContext() {}

func NewBuilder_ShiftYContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Builder_ShiftYContext {
	var p = new(Builder_ShiftYContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_ShiftY

	return p
}

func (s *Builder_ShiftYContext) GetParser() antlr.Parser { return s.parser }

func (s *Builder_ShiftYContext) DensityFn() IDensityFnContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFnContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFnContext)
}

func (s *Builder_ShiftYContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *Builder_ShiftYContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *Builder_ShiftYContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Builder_ShiftYContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Builder_ShiftYContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterBuilder_ShiftY(s)
	}
}

func (s *Builder_ShiftYContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitBuilder_ShiftY(s)
	}
}

func (p *MinecraftMetascriptParser) Builder_ShiftY() (localctx IBuilder_ShiftYContext) {
	localctx = NewBuilder_ShiftYContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, MinecraftMetascriptParserRULE_builder_ShiftY)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(841)
		p.Match(MinecraftMetascriptParserT__37)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(842)
		p.Match(MinecraftMetascriptParserT__7)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(846)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 78, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(843)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(848)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 78, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	{
		p.SetState(849)
		p.DensityFn()
	}
	p.SetState(853)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(850)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(855)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(856)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBuilder_ShiftZContext is an interface to support dynamic dispatch.
type IBuilder_ShiftZContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DensityFn() IDensityFnContext
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode

	// IsBuilder_ShiftZContext differentiates from other interfaces.
	IsBuilder_ShiftZContext()
}

type Builder_ShiftZContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBuilder_ShiftZContext() *Builder_ShiftZContext {
	var p = new(Builder_ShiftZContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_ShiftZ
	return p
}

func InitEmptyBuilder_ShiftZContext(p *Builder_ShiftZContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_ShiftZ
}

func (*Builder_ShiftZContext) IsBuilder_ShiftZContext() {}

func NewBuilder_ShiftZContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Builder_ShiftZContext {
	var p = new(Builder_ShiftZContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_ShiftZ

	return p
}

func (s *Builder_ShiftZContext) GetParser() antlr.Parser { return s.parser }

func (s *Builder_ShiftZContext) DensityFn() IDensityFnContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFnContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFnContext)
}

func (s *Builder_ShiftZContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *Builder_ShiftZContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *Builder_ShiftZContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Builder_ShiftZContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Builder_ShiftZContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterBuilder_ShiftZ(s)
	}
}

func (s *Builder_ShiftZContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitBuilder_ShiftZ(s)
	}
}

func (p *MinecraftMetascriptParser) Builder_ShiftZ() (localctx IBuilder_ShiftZContext) {
	localctx = NewBuilder_ShiftZContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, MinecraftMetascriptParserRULE_builder_ShiftZ)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(858)
		p.Match(MinecraftMetascriptParserT__38)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(859)
		p.Match(MinecraftMetascriptParserT__7)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(863)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 80, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(860)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(865)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 80, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	{
		p.SetState(866)
		p.DensityFn()
	}
	p.SetState(870)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(867)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(872)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(873)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBuilder_AmplitudesContext is an interface to support dynamic dispatch.
type IBuilder_AmplitudesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllNumber() []INumberContext
	Number(i int) INumberContext

	// IsBuilder_AmplitudesContext differentiates from other interfaces.
	IsBuilder_AmplitudesContext()
}

type Builder_AmplitudesContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBuilder_AmplitudesContext() *Builder_AmplitudesContext {
	var p = new(Builder_AmplitudesContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Amplitudes
	return p
}

func InitEmptyBuilder_AmplitudesContext(p *Builder_AmplitudesContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Amplitudes
}

func (*Builder_AmplitudesContext) IsBuilder_AmplitudesContext() {}

func NewBuilder_AmplitudesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Builder_AmplitudesContext {
	var p = new(Builder_AmplitudesContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Amplitudes

	return p
}

func (s *Builder_AmplitudesContext) GetParser() antlr.Parser { return s.parser }

func (s *Builder_AmplitudesContext) AllNumber() []INumberContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INumberContext); ok {
			len++
		}
	}

	tst := make([]INumberContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INumberContext); ok {
			tst[i] = t.(INumberContext)
			i++
		}
	}

	return tst
}

func (s *Builder_AmplitudesContext) Number(i int) INumberContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumberContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumberContext)
}

func (s *Builder_AmplitudesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Builder_AmplitudesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Builder_AmplitudesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterBuilder_Amplitudes(s)
	}
}

func (s *Builder_AmplitudesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitBuilder_Amplitudes(s)
	}
}

func (p *MinecraftMetascriptParser) Builder_Amplitudes() (localctx IBuilder_AmplitudesContext) {
	localctx = NewBuilder_AmplitudesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, MinecraftMetascriptParserRULE_builder_Amplitudes)
	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(875)
		p.Match(MinecraftMetascriptParserT__39)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(876)
		p.Match(MinecraftMetascriptParserT__7)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(882)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 82, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(877)
				p.Number()
			}
			{
				p.SetState(878)
				p.Match(MinecraftMetascriptParserT__12)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(884)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 82, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	{
		p.SetState(885)
		p.Number()
	}
	{
		p.SetState(886)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBuilder_OffsetContext is an interface to support dynamic dispatch.
type IBuilder_OffsetContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Int() antlr.TerminalNode
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode

	// IsBuilder_OffsetContext differentiates from other interfaces.
	IsBuilder_OffsetContext()
}

type Builder_OffsetContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBuilder_OffsetContext() *Builder_OffsetContext {
	var p = new(Builder_OffsetContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Offset
	return p
}

func InitEmptyBuilder_OffsetContext(p *Builder_OffsetContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Offset
}

func (*Builder_OffsetContext) IsBuilder_OffsetContext() {}

func NewBuilder_OffsetContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Builder_OffsetContext {
	var p = new(Builder_OffsetContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Offset

	return p
}

func (s *Builder_OffsetContext) GetParser() antlr.Parser { return s.parser }

func (s *Builder_OffsetContext) Int() antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserInt, 0)
}

func (s *Builder_OffsetContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *Builder_OffsetContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *Builder_OffsetContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Builder_OffsetContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Builder_OffsetContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterBuilder_Offset(s)
	}
}

func (s *Builder_OffsetContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitBuilder_Offset(s)
	}
}

func (p *MinecraftMetascriptParser) Builder_Offset() (localctx IBuilder_OffsetContext) {
	localctx = NewBuilder_OffsetContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, MinecraftMetascriptParserRULE_builder_Offset)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(888)
		p.Match(MinecraftMetascriptParserT__40)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(889)
		p.Match(MinecraftMetascriptParserT__7)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(893)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(890)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(895)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(896)
		p.Match(MinecraftMetascriptParserInt)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(900)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(897)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(902)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(903)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBuilder_AddContext is an interface to support dynamic dispatch.
type IBuilder_AddContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsBuilder_AddContext differentiates from other interfaces.
	IsBuilder_AddContext()
}

type Builder_AddContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBuilder_AddContext() *Builder_AddContext {
	var p = new(Builder_AddContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Add
	return p
}

func InitEmptyBuilder_AddContext(p *Builder_AddContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Add
}

func (*Builder_AddContext) IsBuilder_AddContext() {}

func NewBuilder_AddContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Builder_AddContext {
	var p = new(Builder_AddContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Add

	return p
}

func (s *Builder_AddContext) GetParser() antlr.Parser { return s.parser }
func (s *Builder_AddContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Builder_AddContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Builder_AddContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterBuilder_Add(s)
	}
}

func (s *Builder_AddContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitBuilder_Add(s)
	}
}

func (p *MinecraftMetascriptParser) Builder_Add() (localctx IBuilder_AddContext) {
	localctx = NewBuilder_AddContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, MinecraftMetascriptParserRULE_builder_Add)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(905)
		p.Match(MinecraftMetascriptParserT__41)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(906)
		p.Match(MinecraftMetascriptParserT__7)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(907)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBuilder_MulContext is an interface to support dynamic dispatch.
type IBuilder_MulContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Number() INumberContext
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode

	// IsBuilder_MulContext differentiates from other interfaces.
	IsBuilder_MulContext()
}

type Builder_MulContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBuilder_MulContext() *Builder_MulContext {
	var p = new(Builder_MulContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Mul
	return p
}

func InitEmptyBuilder_MulContext(p *Builder_MulContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Mul
}

func (*Builder_MulContext) IsBuilder_MulContext() {}

func NewBuilder_MulContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Builder_MulContext {
	var p = new(Builder_MulContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Mul

	return p
}

func (s *Builder_MulContext) GetParser() antlr.Parser { return s.parser }

func (s *Builder_MulContext) Number() INumberContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumberContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumberContext)
}

func (s *Builder_MulContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *Builder_MulContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *Builder_MulContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Builder_MulContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Builder_MulContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterBuilder_Mul(s)
	}
}

func (s *Builder_MulContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitBuilder_Mul(s)
	}
}

func (p *MinecraftMetascriptParser) Builder_Mul() (localctx IBuilder_MulContext) {
	localctx = NewBuilder_MulContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, MinecraftMetascriptParserRULE_builder_Mul)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(909)
		p.Match(MinecraftMetascriptParserT__42)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(913)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(910)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(915)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(916)
		p.Number()
	}
	p.SetState(920)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(917)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(922)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(923)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBuilder_MulIntContext is an interface to support dynamic dispatch.
type IBuilder_MulIntContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Int() antlr.TerminalNode
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode

	// IsBuilder_MulIntContext differentiates from other interfaces.
	IsBuilder_MulIntContext()
}

type Builder_MulIntContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBuilder_MulIntContext() *Builder_MulIntContext {
	var p = new(Builder_MulIntContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_MulInt
	return p
}

func InitEmptyBuilder_MulIntContext(p *Builder_MulIntContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_MulInt
}

func (*Builder_MulIntContext) IsBuilder_MulIntContext() {}

func NewBuilder_MulIntContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Builder_MulIntContext {
	var p = new(Builder_MulIntContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_MulInt

	return p
}

func (s *Builder_MulIntContext) GetParser() antlr.Parser { return s.parser }

func (s *Builder_MulIntContext) Int() antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserInt, 0)
}

func (s *Builder_MulIntContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *Builder_MulIntContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *Builder_MulIntContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Builder_MulIntContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Builder_MulIntContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterBuilder_MulInt(s)
	}
}

func (s *Builder_MulIntContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitBuilder_MulInt(s)
	}
}

func (p *MinecraftMetascriptParser) Builder_MulInt() (localctx IBuilder_MulIntContext) {
	localctx = NewBuilder_MulIntContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, MinecraftMetascriptParserRULE_builder_MulInt)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(925)
		p.Match(MinecraftMetascriptParserT__42)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(929)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(926)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(931)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(932)
		p.Match(MinecraftMetascriptParserInt)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(936)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(933)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(938)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(939)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBuilder_MinContext is an interface to support dynamic dispatch.
type IBuilder_MinContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Number() INumberContext
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode

	// IsBuilder_MinContext differentiates from other interfaces.
	IsBuilder_MinContext()
}

type Builder_MinContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBuilder_MinContext() *Builder_MinContext {
	var p = new(Builder_MinContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Min
	return p
}

func InitEmptyBuilder_MinContext(p *Builder_MinContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Min
}

func (*Builder_MinContext) IsBuilder_MinContext() {}

func NewBuilder_MinContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Builder_MinContext {
	var p = new(Builder_MinContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Min

	return p
}

func (s *Builder_MinContext) GetParser() antlr.Parser { return s.parser }

func (s *Builder_MinContext) Number() INumberContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumberContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumberContext)
}

func (s *Builder_MinContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *Builder_MinContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *Builder_MinContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Builder_MinContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Builder_MinContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterBuilder_Min(s)
	}
}

func (s *Builder_MinContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitBuilder_Min(s)
	}
}

func (p *MinecraftMetascriptParser) Builder_Min() (localctx IBuilder_MinContext) {
	localctx = NewBuilder_MinContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, MinecraftMetascriptParserRULE_builder_Min)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(941)
		p.Match(MinecraftMetascriptParserT__43)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(945)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(942)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(947)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(948)
		p.Number()
	}
	p.SetState(952)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(949)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(954)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(955)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBuilder_MaxContext is an interface to support dynamic dispatch.
type IBuilder_MaxContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Number() INumberContext
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode

	// IsBuilder_MaxContext differentiates from other interfaces.
	IsBuilder_MaxContext()
}

type Builder_MaxContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBuilder_MaxContext() *Builder_MaxContext {
	var p = new(Builder_MaxContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Max
	return p
}

func InitEmptyBuilder_MaxContext(p *Builder_MaxContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Max
}

func (*Builder_MaxContext) IsBuilder_MaxContext() {}

func NewBuilder_MaxContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Builder_MaxContext {
	var p = new(Builder_MaxContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Max

	return p
}

func (s *Builder_MaxContext) GetParser() antlr.Parser { return s.parser }

func (s *Builder_MaxContext) Number() INumberContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumberContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumberContext)
}

func (s *Builder_MaxContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *Builder_MaxContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *Builder_MaxContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Builder_MaxContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Builder_MaxContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterBuilder_Max(s)
	}
}

func (s *Builder_MaxContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitBuilder_Max(s)
	}
}

func (p *MinecraftMetascriptParser) Builder_Max() (localctx IBuilder_MaxContext) {
	localctx = NewBuilder_MaxContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, MinecraftMetascriptParserRULE_builder_Max)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(957)
		p.Match(MinecraftMetascriptParserT__44)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(961)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(958)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(963)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(964)
		p.Number()
	}
	p.SetState(968)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(965)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(970)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(971)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBuilder_TopContext is an interface to support dynamic dispatch.
type IBuilder_TopContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	VerticalAnchor() IVerticalAnchorContext
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode

	// IsBuilder_TopContext differentiates from other interfaces.
	IsBuilder_TopContext()
}

type Builder_TopContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBuilder_TopContext() *Builder_TopContext {
	var p = new(Builder_TopContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Top
	return p
}

func InitEmptyBuilder_TopContext(p *Builder_TopContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Top
}

func (*Builder_TopContext) IsBuilder_TopContext() {}

func NewBuilder_TopContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Builder_TopContext {
	var p = new(Builder_TopContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Top

	return p
}

func (s *Builder_TopContext) GetParser() antlr.Parser { return s.parser }

func (s *Builder_TopContext) VerticalAnchor() IVerticalAnchorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVerticalAnchorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVerticalAnchorContext)
}

func (s *Builder_TopContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *Builder_TopContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *Builder_TopContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Builder_TopContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Builder_TopContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterBuilder_Top(s)
	}
}

func (s *Builder_TopContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitBuilder_Top(s)
	}
}

func (p *MinecraftMetascriptParser) Builder_Top() (localctx IBuilder_TopContext) {
	localctx = NewBuilder_TopContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, MinecraftMetascriptParserRULE_builder_Top)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(973)
		p.Match(MinecraftMetascriptParserT__45)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(974)
		p.Match(MinecraftMetascriptParserT__7)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(978)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(975)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(980)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(981)
		p.VerticalAnchor()
	}
	p.SetState(985)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(982)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(987)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(988)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBuilder_TopLiteralContext is an interface to support dynamic dispatch.
type IBuilder_TopLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Int() antlr.TerminalNode

	// IsBuilder_TopLiteralContext differentiates from other interfaces.
	IsBuilder_TopLiteralContext()
}

type Builder_TopLiteralContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBuilder_TopLiteralContext() *Builder_TopLiteralContext {
	var p = new(Builder_TopLiteralContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_TopLiteral
	return p
}

func InitEmptyBuilder_TopLiteralContext(p *Builder_TopLiteralContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_TopLiteral
}

func (*Builder_TopLiteralContext) IsBuilder_TopLiteralContext() {}

func NewBuilder_TopLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Builder_TopLiteralContext {
	var p = new(Builder_TopLiteralContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_TopLiteral

	return p
}

func (s *Builder_TopLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *Builder_TopLiteralContext) Int() antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserInt, 0)
}

func (s *Builder_TopLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Builder_TopLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Builder_TopLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterBuilder_TopLiteral(s)
	}
}

func (s *Builder_TopLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitBuilder_TopLiteral(s)
	}
}

func (p *MinecraftMetascriptParser) Builder_TopLiteral() (localctx IBuilder_TopLiteralContext) {
	localctx = NewBuilder_TopLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, MinecraftMetascriptParserRULE_builder_TopLiteral)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(990)
		p.Match(MinecraftMetascriptParserT__45)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(991)
		p.Match(MinecraftMetascriptParserT__7)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(992)
		p.Match(MinecraftMetascriptParserInt)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(993)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBuilder_BottomContext is an interface to support dynamic dispatch.
type IBuilder_BottomContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	VerticalAnchor() IVerticalAnchorContext
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode

	// IsBuilder_BottomContext differentiates from other interfaces.
	IsBuilder_BottomContext()
}

type Builder_BottomContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBuilder_BottomContext() *Builder_BottomContext {
	var p = new(Builder_BottomContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Bottom
	return p
}

func InitEmptyBuilder_BottomContext(p *Builder_BottomContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Bottom
}

func (*Builder_BottomContext) IsBuilder_BottomContext() {}

func NewBuilder_BottomContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Builder_BottomContext {
	var p = new(Builder_BottomContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Bottom

	return p
}

func (s *Builder_BottomContext) GetParser() antlr.Parser { return s.parser }

func (s *Builder_BottomContext) VerticalAnchor() IVerticalAnchorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVerticalAnchorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVerticalAnchorContext)
}

func (s *Builder_BottomContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *Builder_BottomContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *Builder_BottomContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Builder_BottomContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Builder_BottomContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterBuilder_Bottom(s)
	}
}

func (s *Builder_BottomContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitBuilder_Bottom(s)
	}
}

func (p *MinecraftMetascriptParser) Builder_Bottom() (localctx IBuilder_BottomContext) {
	localctx = NewBuilder_BottomContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, MinecraftMetascriptParserRULE_builder_Bottom)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(995)
		p.Match(MinecraftMetascriptParserT__46)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(996)
		p.Match(MinecraftMetascriptParserT__7)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1000)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(997)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1002)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1003)
		p.VerticalAnchor()
	}
	p.SetState(1007)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(1004)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1009)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1010)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBuilder_BottomLiteralContext is an interface to support dynamic dispatch.
type IBuilder_BottomLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Int() antlr.TerminalNode
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode

	// IsBuilder_BottomLiteralContext differentiates from other interfaces.
	IsBuilder_BottomLiteralContext()
}

type Builder_BottomLiteralContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBuilder_BottomLiteralContext() *Builder_BottomLiteralContext {
	var p = new(Builder_BottomLiteralContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_BottomLiteral
	return p
}

func InitEmptyBuilder_BottomLiteralContext(p *Builder_BottomLiteralContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_BottomLiteral
}

func (*Builder_BottomLiteralContext) IsBuilder_BottomLiteralContext() {}

func NewBuilder_BottomLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Builder_BottomLiteralContext {
	var p = new(Builder_BottomLiteralContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_BottomLiteral

	return p
}

func (s *Builder_BottomLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *Builder_BottomLiteralContext) Int() antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserInt, 0)
}

func (s *Builder_BottomLiteralContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *Builder_BottomLiteralContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *Builder_BottomLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Builder_BottomLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Builder_BottomLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterBuilder_BottomLiteral(s)
	}
}

func (s *Builder_BottomLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitBuilder_BottomLiteral(s)
	}
}

func (p *MinecraftMetascriptParser) Builder_BottomLiteral() (localctx IBuilder_BottomLiteralContext) {
	localctx = NewBuilder_BottomLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 118, MinecraftMetascriptParserRULE_builder_BottomLiteral)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1012)
		p.Match(MinecraftMetascriptParserT__46)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1013)
		p.Match(MinecraftMetascriptParserT__7)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1017)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(1014)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1019)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1020)
		p.Match(MinecraftMetascriptParserInt)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1024)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(1021)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1026)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1027)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBuilder_InRangeContext is an interface to support dynamic dispatch.
type IBuilder_InRangeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DensityFn() IDensityFnContext
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode

	// IsBuilder_InRangeContext differentiates from other interfaces.
	IsBuilder_InRangeContext()
}

type Builder_InRangeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBuilder_InRangeContext() *Builder_InRangeContext {
	var p = new(Builder_InRangeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_InRange
	return p
}

func InitEmptyBuilder_InRangeContext(p *Builder_InRangeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_InRange
}

func (*Builder_InRangeContext) IsBuilder_InRangeContext() {}

func NewBuilder_InRangeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Builder_InRangeContext {
	var p = new(Builder_InRangeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_InRange

	return p
}

func (s *Builder_InRangeContext) GetParser() antlr.Parser { return s.parser }

func (s *Builder_InRangeContext) DensityFn() IDensityFnContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFnContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFnContext)
}

func (s *Builder_InRangeContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *Builder_InRangeContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *Builder_InRangeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Builder_InRangeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Builder_InRangeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterBuilder_InRange(s)
	}
}

func (s *Builder_InRangeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitBuilder_InRange(s)
	}
}

func (p *MinecraftMetascriptParser) Builder_InRange() (localctx IBuilder_InRangeContext) {
	localctx = NewBuilder_InRangeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 120, MinecraftMetascriptParserRULE_builder_InRange)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1029)
		p.Match(MinecraftMetascriptParserT__47)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1030)
		p.Match(MinecraftMetascriptParserT__7)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1034)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 99, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1031)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1036)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 99, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	{
		p.SetState(1037)
		p.DensityFn()
	}
	p.SetState(1041)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(1038)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1043)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1044)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBuilder_OutRangeContext is an interface to support dynamic dispatch.
type IBuilder_OutRangeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DensityFn() IDensityFnContext
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode

	// IsBuilder_OutRangeContext differentiates from other interfaces.
	IsBuilder_OutRangeContext()
}

type Builder_OutRangeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBuilder_OutRangeContext() *Builder_OutRangeContext {
	var p = new(Builder_OutRangeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_OutRange
	return p
}

func InitEmptyBuilder_OutRangeContext(p *Builder_OutRangeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_OutRange
}

func (*Builder_OutRangeContext) IsBuilder_OutRangeContext() {}

func NewBuilder_OutRangeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Builder_OutRangeContext {
	var p = new(Builder_OutRangeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_OutRange

	return p
}

func (s *Builder_OutRangeContext) GetParser() antlr.Parser { return s.parser }

func (s *Builder_OutRangeContext) DensityFn() IDensityFnContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFnContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFnContext)
}

func (s *Builder_OutRangeContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *Builder_OutRangeContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *Builder_OutRangeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Builder_OutRangeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Builder_OutRangeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterBuilder_OutRange(s)
	}
}

func (s *Builder_OutRangeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitBuilder_OutRange(s)
	}
}

func (p *MinecraftMetascriptParser) Builder_OutRange() (localctx IBuilder_OutRangeContext) {
	localctx = NewBuilder_OutRangeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 122, MinecraftMetascriptParserRULE_builder_OutRange)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1046)
		p.Match(MinecraftMetascriptParserT__48)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1047)
		p.Match(MinecraftMetascriptParserT__7)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1051)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 101, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1048)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1053)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 101, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	{
		p.SetState(1054)
		p.DensityFn()
	}
	p.SetState(1058)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(1055)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1060)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1061)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IResourceReferenceContext is an interface to support dynamic dispatch.
type IResourceReferenceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllIdentifier() []antlr.TerminalNode
	Identifier(i int) antlr.TerminalNode

	// IsResourceReferenceContext differentiates from other interfaces.
	IsResourceReferenceContext()
}

type ResourceReferenceContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyResourceReferenceContext() *ResourceReferenceContext {
	var p = new(ResourceReferenceContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_resourceReference
	return p
}

func InitEmptyResourceReferenceContext(p *ResourceReferenceContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_resourceReference
}

func (*ResourceReferenceContext) IsResourceReferenceContext() {}

func NewResourceReferenceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ResourceReferenceContext {
	var p = new(ResourceReferenceContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_resourceReference

	return p
}

func (s *ResourceReferenceContext) GetParser() antlr.Parser { return s.parser }

func (s *ResourceReferenceContext) AllIdentifier() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserIdentifier)
}

func (s *ResourceReferenceContext) Identifier(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserIdentifier, i)
}

func (s *ResourceReferenceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ResourceReferenceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ResourceReferenceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterResourceReference(s)
	}
}

func (s *ResourceReferenceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitResourceReference(s)
	}
}

func (p *MinecraftMetascriptParser) ResourceReference() (localctx IResourceReferenceContext) {
	localctx = NewResourceReferenceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 124, MinecraftMetascriptParserRULE_resourceReference)
	p.EnterOuterAlt(localctx, 1)
	p.SetState(1065)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 103, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1063)
			p.Match(MinecraftMetascriptParserIdentifier)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1064)
			p.Match(MinecraftMetascriptParserT__49)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(1067)
		p.Match(MinecraftMetascriptParserIdentifier)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INumberContext is an interface to support dynamic dispatch.
type INumberContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Int() antlr.TerminalNode
	Float() antlr.TerminalNode

	// IsNumberContext differentiates from other interfaces.
	IsNumberContext()
}

type NumberContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNumberContext() *NumberContext {
	var p = new(NumberContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_number
	return p
}

func InitEmptyNumberContext(p *NumberContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_number
}

func (*NumberContext) IsNumberContext() {}

func NewNumberContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NumberContext {
	var p = new(NumberContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_number

	return p
}

func (s *NumberContext) GetParser() antlr.Parser { return s.parser }

func (s *NumberContext) Int() antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserInt, 0)
}

func (s *NumberContext) Float() antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserFloat, 0)
}

func (s *NumberContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NumberContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NumberContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterNumber(s)
	}
}

func (s *NumberContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitNumber(s)
	}
}

func (p *MinecraftMetascriptParser) Number() (localctx INumberContext) {
	localctx = NewNumberContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 126, MinecraftMetascriptParserRULE_number)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1069)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MinecraftMetascriptParserInt || _la == MinecraftMetascriptParserFloat) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INoiseBlockContext is an interface to support dynamic dispatch.
type INoiseBlockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode
	AllNoiseDeclaration() []INoiseDeclarationContext
	NoiseDeclaration(i int) INoiseDeclarationContext

	// IsNoiseBlockContext differentiates from other interfaces.
	IsNoiseBlockContext()
}

type NoiseBlockContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNoiseBlockContext() *NoiseBlockContext {
	var p = new(NoiseBlockContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_noiseBlock
	return p
}

func InitEmptyNoiseBlockContext(p *NoiseBlockContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_noiseBlock
}

func (*NoiseBlockContext) IsNoiseBlockContext() {}

func NewNoiseBlockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NoiseBlockContext {
	var p = new(NoiseBlockContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_noiseBlock

	return p
}

func (s *NoiseBlockContext) GetParser() antlr.Parser { return s.parser }

func (s *NoiseBlockContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *NoiseBlockContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *NoiseBlockContext) AllNoiseDeclaration() []INoiseDeclarationContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INoiseDeclarationContext); ok {
			len++
		}
	}

	tst := make([]INoiseDeclarationContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INoiseDeclarationContext); ok {
			tst[i] = t.(INoiseDeclarationContext)
			i++
		}
	}

	return tst
}

func (s *NoiseBlockContext) NoiseDeclaration(i int) INoiseDeclarationContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INoiseDeclarationContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INoiseDeclarationContext)
}

func (s *NoiseBlockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NoiseBlockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NoiseBlockContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterNoiseBlock(s)
	}
}

func (s *NoiseBlockContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitNoiseBlock(s)
	}
}

func (p *MinecraftMetascriptParser) NoiseBlock() (localctx INoiseBlockContext) {
	localctx = NewNoiseBlockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 128, MinecraftMetascriptParserRULE_noiseBlock)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1071)
		p.Match(MinecraftMetascriptParserT__50)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1075)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(1072)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1077)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1078)
		p.Match(MinecraftMetascriptParserT__1)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1082)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 105, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1079)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1084)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 105, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1094)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserIdentifier {
		{
			p.SetState(1085)
			p.NoiseDeclaration()
		}
		p.SetState(1089)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 106, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1086)
					p.Match(MinecraftMetascriptParserNL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(1091)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 106, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}

		p.SetState(1096)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(1100)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(1097)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1102)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1103)
		p.Match(MinecraftMetascriptParserT__2)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INoiseDeclarationContext is an interface to support dynamic dispatch.
type INoiseDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Declare() IDeclareContext
	Noise() INoiseContext

	// IsNoiseDeclarationContext differentiates from other interfaces.
	IsNoiseDeclarationContext()
}

type NoiseDeclarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNoiseDeclarationContext() *NoiseDeclarationContext {
	var p = new(NoiseDeclarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_noiseDeclaration
	return p
}

func InitEmptyNoiseDeclarationContext(p *NoiseDeclarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_noiseDeclaration
}

func (*NoiseDeclarationContext) IsNoiseDeclarationContext() {}

func NewNoiseDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NoiseDeclarationContext {
	var p = new(NoiseDeclarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_noiseDeclaration

	return p
}

func (s *NoiseDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *NoiseDeclarationContext) Declare() IDeclareContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDeclareContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDeclareContext)
}

func (s *NoiseDeclarationContext) Noise() INoiseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INoiseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INoiseContext)
}

func (s *NoiseDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NoiseDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NoiseDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterNoiseDeclaration(s)
	}
}

func (s *NoiseDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitNoiseDeclaration(s)
	}
}

func (p *MinecraftMetascriptParser) NoiseDeclaration() (localctx INoiseDeclarationContext) {
	localctx = NewNoiseDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 130, MinecraftMetascriptParserRULE_noiseDeclaration)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1105)
		p.Declare()
	}
	{
		p.SetState(1106)
		p.Noise()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INoiseContext is an interface to support dynamic dispatch.
type INoiseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	NoiseDefinition() INoiseDefinitionContext

	// IsNoiseContext differentiates from other interfaces.
	IsNoiseContext()
}

type NoiseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNoiseContext() *NoiseContext {
	var p = new(NoiseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_noise
	return p
}

func InitEmptyNoiseContext(p *NoiseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_noise
}

func (*NoiseContext) IsNoiseContext() {}

func NewNoiseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NoiseContext {
	var p = new(NoiseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_noise

	return p
}

func (s *NoiseContext) GetParser() antlr.Parser { return s.parser }

func (s *NoiseContext) NoiseDefinition() INoiseDefinitionContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INoiseDefinitionContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INoiseDefinitionContext)
}

func (s *NoiseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NoiseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NoiseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterNoise(s)
	}
}

func (s *NoiseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitNoise(s)
	}
}

func (p *MinecraftMetascriptParser) Noise() (localctx INoiseContext) {
	localctx = NewNoiseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 132, MinecraftMetascriptParserRULE_noise)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1108)
		p.Match(MinecraftMetascriptParserT__50)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1109)
		p.NoiseDefinition()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INoiseDefinitionContext is an interface to support dynamic dispatch.
type INoiseDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Int() antlr.TerminalNode
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode
	AllNoise_Builder() []INoise_BuilderContext
	Noise_Builder(i int) INoise_BuilderContext

	// IsNoiseDefinitionContext differentiates from other interfaces.
	IsNoiseDefinitionContext()
}

type NoiseDefinitionContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNoiseDefinitionContext() *NoiseDefinitionContext {
	var p = new(NoiseDefinitionContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_noiseDefinition
	return p
}

func InitEmptyNoiseDefinitionContext(p *NoiseDefinitionContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_noiseDefinition
}

func (*NoiseDefinitionContext) IsNoiseDefinitionContext() {}

func NewNoiseDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NoiseDefinitionContext {
	var p = new(NoiseDefinitionContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_noiseDefinition

	return p
}

func (s *NoiseDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *NoiseDefinitionContext) Int() antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserInt, 0)
}

func (s *NoiseDefinitionContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *NoiseDefinitionContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *NoiseDefinitionContext) AllNoise_Builder() []INoise_BuilderContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INoise_BuilderContext); ok {
			len++
		}
	}

	tst := make([]INoise_BuilderContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INoise_BuilderContext); ok {
			tst[i] = t.(INoise_BuilderContext)
			i++
		}
	}

	return tst
}

func (s *NoiseDefinitionContext) Noise_Builder(i int) INoise_BuilderContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INoise_BuilderContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INoise_BuilderContext)
}

func (s *NoiseDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NoiseDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NoiseDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterNoiseDefinition(s)
	}
}

func (s *NoiseDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitNoiseDefinition(s)
	}
}

func (p *MinecraftMetascriptParser) NoiseDefinition() (localctx INoiseDefinitionContext) {
	localctx = NewNoiseDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 134, MinecraftMetascriptParserRULE_noiseDefinition)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1111)
		p.Match(MinecraftMetascriptParserT__7)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1115)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(1112)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1117)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1118)
		p.Match(MinecraftMetascriptParserInt)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1122)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(1119)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1124)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1125)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1129)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 111, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1126)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1131)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 111, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1141)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserT__39 {
		{
			p.SetState(1132)
			p.Noise_Builder()
		}
		p.SetState(1136)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 112, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1133)
					p.Match(MinecraftMetascriptParserNL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(1138)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 112, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}

		p.SetState(1143)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INoise_BuilderContext is an interface to support dynamic dispatch.
type INoise_BuilderContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Builder_Amplitudes() IBuilder_AmplitudesContext

	// IsNoise_BuilderContext differentiates from other interfaces.
	IsNoise_BuilderContext()
}

type Noise_BuilderContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNoise_BuilderContext() *Noise_BuilderContext {
	var p = new(Noise_BuilderContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_noise_Builder
	return p
}

func InitEmptyNoise_BuilderContext(p *Noise_BuilderContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_noise_Builder
}

func (*Noise_BuilderContext) IsNoise_BuilderContext() {}

func NewNoise_BuilderContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Noise_BuilderContext {
	var p = new(Noise_BuilderContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_noise_Builder

	return p
}

func (s *Noise_BuilderContext) GetParser() antlr.Parser { return s.parser }

func (s *Noise_BuilderContext) Builder_Amplitudes() IBuilder_AmplitudesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_AmplitudesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_AmplitudesContext)
}

func (s *Noise_BuilderContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Noise_BuilderContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Noise_BuilderContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterNoise_Builder(s)
	}
}

func (s *Noise_BuilderContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitNoise_Builder(s)
	}
}

func (p *MinecraftMetascriptParser) Noise_Builder() (localctx INoise_BuilderContext) {
	localctx = NewNoise_BuilderContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 136, MinecraftMetascriptParserRULE_noise_Builder)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1144)
		p.Builder_Amplitudes()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDensityFnBlockContext is an interface to support dynamic dispatch.
type IDensityFnBlockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode
	AllDensityFnDeclaration() []IDensityFnDeclarationContext
	DensityFnDeclaration(i int) IDensityFnDeclarationContext

	// IsDensityFnBlockContext differentiates from other interfaces.
	IsDensityFnBlockContext()
}

type DensityFnBlockContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDensityFnBlockContext() *DensityFnBlockContext {
	var p = new(DensityFnBlockContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFnBlock
	return p
}

func InitEmptyDensityFnBlockContext(p *DensityFnBlockContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFnBlock
}

func (*DensityFnBlockContext) IsDensityFnBlockContext() {}

func NewDensityFnBlockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DensityFnBlockContext {
	var p = new(DensityFnBlockContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFnBlock

	return p
}

func (s *DensityFnBlockContext) GetParser() antlr.Parser { return s.parser }

func (s *DensityFnBlockContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *DensityFnBlockContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *DensityFnBlockContext) AllDensityFnDeclaration() []IDensityFnDeclarationContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDensityFnDeclarationContext); ok {
			len++
		}
	}

	tst := make([]IDensityFnDeclarationContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDensityFnDeclarationContext); ok {
			tst[i] = t.(IDensityFnDeclarationContext)
			i++
		}
	}

	return tst
}

func (s *DensityFnBlockContext) DensityFnDeclaration(i int) IDensityFnDeclarationContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFnDeclarationContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFnDeclarationContext)
}

func (s *DensityFnBlockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DensityFnBlockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DensityFnBlockContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterDensityFnBlock(s)
	}
}

func (s *DensityFnBlockContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitDensityFnBlock(s)
	}
}

func (p *MinecraftMetascriptParser) DensityFnBlock() (localctx IDensityFnBlockContext) {
	localctx = NewDensityFnBlockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 138, MinecraftMetascriptParserRULE_densityFnBlock)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1146)
		p.Match(MinecraftMetascriptParserT__51)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1150)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(1147)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1152)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1153)
		p.Match(MinecraftMetascriptParserT__1)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1157)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 115, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1154)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1159)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 115, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1169)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserIdentifier {
		{
			p.SetState(1160)
			p.DensityFnDeclaration()
		}
		p.SetState(1164)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 116, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1161)
					p.Match(MinecraftMetascriptParserNL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(1166)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 116, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}

		p.SetState(1171)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(1175)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(1172)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1177)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1178)
		p.Match(MinecraftMetascriptParserT__2)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDensityFnDeclarationContext is an interface to support dynamic dispatch.
type IDensityFnDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Declare() IDeclareContext
	DensityFn() IDensityFnContext

	// IsDensityFnDeclarationContext differentiates from other interfaces.
	IsDensityFnDeclarationContext()
}

type DensityFnDeclarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDensityFnDeclarationContext() *DensityFnDeclarationContext {
	var p = new(DensityFnDeclarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFnDeclaration
	return p
}

func InitEmptyDensityFnDeclarationContext(p *DensityFnDeclarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFnDeclaration
}

func (*DensityFnDeclarationContext) IsDensityFnDeclarationContext() {}

func NewDensityFnDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DensityFnDeclarationContext {
	var p = new(DensityFnDeclarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFnDeclaration

	return p
}

func (s *DensityFnDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *DensityFnDeclarationContext) Declare() IDeclareContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDeclareContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDeclareContext)
}

func (s *DensityFnDeclarationContext) DensityFn() IDensityFnContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFnContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFnContext)
}

func (s *DensityFnDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DensityFnDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DensityFnDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterDensityFnDeclaration(s)
	}
}

func (s *DensityFnDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitDensityFnDeclaration(s)
	}
}

func (p *MinecraftMetascriptParser) DensityFnDeclaration() (localctx IDensityFnDeclarationContext) {
	localctx = NewDensityFnDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 140, MinecraftMetascriptParserRULE_densityFnDeclaration)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1180)
		p.Declare()
	}
	{
		p.SetState(1181)
		p.DensityFn()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDensityFnContext is an interface to support dynamic dispatch.
type IDensityFnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DensityFn_SingleInput() IDensityFn_SingleInputContext
	DensityFn_Cache() IDensityFn_CacheContext
	DensityFn_DualInput() IDensityFn_DualInputContext
	DensityFn_Constant() IDensityFn_ConstantContext
	DensityFn_Noise() IDensityFn_NoiseContext
	DensityFn_NoInput() IDensityFn_NoInputContext
	DensityFn_OldBlendedNoise() IDensityFn_OldBlendedNoiseContext
	DensityFn_WierdScaledSampler() IDensityFn_WierdScaledSamplerContext
	DensityFn_ShiftedNoise() IDensityFn_ShiftedNoiseContext
	DensityFn_RangeChoice() IDensityFn_RangeChoiceContext
	DensityFn_Clamp() IDensityFn_ClampContext
	DensityFn_YClampedGradient() IDensityFn_YClampedGradientContext
	DensityFn_SplineFn() IDensityFn_SplineFnContext
	DensityFn_Reference() IDensityFn_ReferenceContext
	DensityFn_Math() IDensityFn_MathContext

	// IsDensityFnContext differentiates from other interfaces.
	IsDensityFnContext()
}

type DensityFnContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDensityFnContext() *DensityFnContext {
	var p = new(DensityFnContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn
	return p
}

func InitEmptyDensityFnContext(p *DensityFnContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn
}

func (*DensityFnContext) IsDensityFnContext() {}

func NewDensityFnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DensityFnContext {
	var p = new(DensityFnContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn

	return p
}

func (s *DensityFnContext) GetParser() antlr.Parser { return s.parser }

func (s *DensityFnContext) DensityFn_SingleInput() IDensityFn_SingleInputContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFn_SingleInputContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFn_SingleInputContext)
}

func (s *DensityFnContext) DensityFn_Cache() IDensityFn_CacheContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFn_CacheContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFn_CacheContext)
}

func (s *DensityFnContext) DensityFn_DualInput() IDensityFn_DualInputContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFn_DualInputContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFn_DualInputContext)
}

func (s *DensityFnContext) DensityFn_Constant() IDensityFn_ConstantContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFn_ConstantContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFn_ConstantContext)
}

func (s *DensityFnContext) DensityFn_Noise() IDensityFn_NoiseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFn_NoiseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFn_NoiseContext)
}

func (s *DensityFnContext) DensityFn_NoInput() IDensityFn_NoInputContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFn_NoInputContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFn_NoInputContext)
}

func (s *DensityFnContext) DensityFn_OldBlendedNoise() IDensityFn_OldBlendedNoiseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFn_OldBlendedNoiseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFn_OldBlendedNoiseContext)
}

func (s *DensityFnContext) DensityFn_WierdScaledSampler() IDensityFn_WierdScaledSamplerContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFn_WierdScaledSamplerContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFn_WierdScaledSamplerContext)
}

func (s *DensityFnContext) DensityFn_ShiftedNoise() IDensityFn_ShiftedNoiseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFn_ShiftedNoiseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFn_ShiftedNoiseContext)
}

func (s *DensityFnContext) DensityFn_RangeChoice() IDensityFn_RangeChoiceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFn_RangeChoiceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFn_RangeChoiceContext)
}

func (s *DensityFnContext) DensityFn_Clamp() IDensityFn_ClampContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFn_ClampContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFn_ClampContext)
}

func (s *DensityFnContext) DensityFn_YClampedGradient() IDensityFn_YClampedGradientContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFn_YClampedGradientContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFn_YClampedGradientContext)
}

func (s *DensityFnContext) DensityFn_SplineFn() IDensityFn_SplineFnContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFn_SplineFnContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFn_SplineFnContext)
}

func (s *DensityFnContext) DensityFn_Reference() IDensityFn_ReferenceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFn_ReferenceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFn_ReferenceContext)
}

func (s *DensityFnContext) DensityFn_Math() IDensityFn_MathContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFn_MathContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFn_MathContext)
}

func (s *DensityFnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DensityFnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DensityFnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterDensityFn(s)
	}
}

func (s *DensityFnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitDensityFn(s)
	}
}

func (p *MinecraftMetascriptParser) DensityFn() (localctx IDensityFnContext) {
	localctx = NewDensityFnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 142, MinecraftMetascriptParserRULE_densityFn)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1197)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case MinecraftMetascriptParserT__55, MinecraftMetascriptParserT__56, MinecraftMetascriptParserT__57, MinecraftMetascriptParserT__58, MinecraftMetascriptParserT__59, MinecraftMetascriptParserT__60, MinecraftMetascriptParserT__61, MinecraftMetascriptParserT__62, MinecraftMetascriptParserT__63, MinecraftMetascriptParserT__64, MinecraftMetascriptParserT__65, MinecraftMetascriptParserT__66:
		{
			p.SetState(1183)
			p.DensityFn_SingleInput()
		}

	case MinecraftMetascriptParserT__67:
		{
			p.SetState(1184)
			p.DensityFn_Cache()
		}

	case MinecraftMetascriptParserT__7, MinecraftMetascriptParserT__68, MinecraftMetascriptParserT__69, MinecraftMetascriptParserNL:
		{
			p.SetState(1185)
			p.DensityFn_DualInput()
		}

	case MinecraftMetascriptParserInt, MinecraftMetascriptParserFloat:
		{
			p.SetState(1186)
			p.DensityFn_Constant()
		}

	case MinecraftMetascriptParserT__50:
		{
			p.SetState(1187)
			p.DensityFn_Noise()
		}

	case MinecraftMetascriptParserT__52, MinecraftMetascriptParserT__53, MinecraftMetascriptParserT__54:
		{
			p.SetState(1188)
			p.DensityFn_NoInput()
		}

	case MinecraftMetascriptParserT__70:
		{
			p.SetState(1189)
			p.DensityFn_OldBlendedNoise()
		}

	case MinecraftMetascriptParserT__71:
		{
			p.SetState(1190)
			p.DensityFn_WierdScaledSampler()
		}

	case MinecraftMetascriptParserT__72:
		{
			p.SetState(1191)
			p.DensityFn_ShiftedNoise()
		}

	case MinecraftMetascriptParserT__73:
		{
			p.SetState(1192)
			p.DensityFn_RangeChoice()
		}

	case MinecraftMetascriptParserT__74:
		{
			p.SetState(1193)
			p.DensityFn_Clamp()
		}

	case MinecraftMetascriptParserT__75:
		{
			p.SetState(1194)
			p.DensityFn_YClampedGradient()
		}

	case MinecraftMetascriptParserT__76:
		{
			p.SetState(1195)
			p.DensityFn_SplineFn()
		}

	case MinecraftMetascriptParserIdentifier:
		{
			p.SetState(1196)
			p.DensityFn_Reference()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}
	p.SetState(1200)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == MinecraftMetascriptParserT__78 || _la == MinecraftMetascriptParserT__79 {
		{
			p.SetState(1199)
			p.DensityFn_Math()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDensityFn_NoInputContext is an interface to support dynamic dispatch.
type IDensityFn_NoInputContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser
	// IsDensityFn_NoInputContext differentiates from other interfaces.
	IsDensityFn_NoInputContext()
}

type DensityFn_NoInputContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDensityFn_NoInputContext() *DensityFn_NoInputContext {
	var p = new(DensityFn_NoInputContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_NoInput
	return p
}

func InitEmptyDensityFn_NoInputContext(p *DensityFn_NoInputContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_NoInput
}

func (*DensityFn_NoInputContext) IsDensityFn_NoInputContext() {}

func NewDensityFn_NoInputContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DensityFn_NoInputContext {
	var p = new(DensityFn_NoInputContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_NoInput

	return p
}

func (s *DensityFn_NoInputContext) GetParser() antlr.Parser { return s.parser }
func (s *DensityFn_NoInputContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DensityFn_NoInputContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DensityFn_NoInputContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterDensityFn_NoInput(s)
	}
}

func (s *DensityFn_NoInputContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitDensityFn_NoInput(s)
	}
}

func (p *MinecraftMetascriptParser) DensityFn_NoInput() (localctx IDensityFn_NoInputContext) {
	localctx = NewDensityFn_NoInputContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 144, MinecraftMetascriptParserRULE_densityFn_NoInput)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1202)
		_la = p.GetTokenStream().LA(1)

		if !((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&63050394783186944) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDensityFn_SingleInputContext is an interface to support dynamic dispatch.
type IDensityFn_SingleInputContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DensityFn() IDensityFnContext
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode

	// IsDensityFn_SingleInputContext differentiates from other interfaces.
	IsDensityFn_SingleInputContext()
}

type DensityFn_SingleInputContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDensityFn_SingleInputContext() *DensityFn_SingleInputContext {
	var p = new(DensityFn_SingleInputContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_SingleInput
	return p
}

func InitEmptyDensityFn_SingleInputContext(p *DensityFn_SingleInputContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_SingleInput
}

func (*DensityFn_SingleInputContext) IsDensityFn_SingleInputContext() {}

func NewDensityFn_SingleInputContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DensityFn_SingleInputContext {
	var p = new(DensityFn_SingleInputContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_SingleInput

	return p
}

func (s *DensityFn_SingleInputContext) GetParser() antlr.Parser { return s.parser }

func (s *DensityFn_SingleInputContext) DensityFn() IDensityFnContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFnContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFnContext)
}

func (s *DensityFn_SingleInputContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *DensityFn_SingleInputContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *DensityFn_SingleInputContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DensityFn_SingleInputContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DensityFn_SingleInputContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterDensityFn_SingleInput(s)
	}
}

func (s *DensityFn_SingleInputContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitDensityFn_SingleInput(s)
	}
}

func (p *MinecraftMetascriptParser) DensityFn_SingleInput() (localctx IDensityFn_SingleInputContext) {
	localctx = NewDensityFn_SingleInputContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 146, MinecraftMetascriptParserRULE_densityFn_SingleInput)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1204)
		_la = p.GetTokenStream().LA(1)

		if !((int64((_la-56)) & ^0x3f) == 0 && ((int64(1)<<(_la-56))&4095) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(1208)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(1205)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1210)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1211)
		p.Match(MinecraftMetascriptParserT__7)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1215)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 122, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1212)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1217)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 122, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	{
		p.SetState(1218)
		p.DensityFn()
	}
	p.SetState(1222)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(1219)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1224)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1225)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDensityFn_InlineNoiseContext is an interface to support dynamic dispatch.
type IDensityFn_InlineNoiseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Noise() INoiseContext

	// IsDensityFn_InlineNoiseContext differentiates from other interfaces.
	IsDensityFn_InlineNoiseContext()
}

type DensityFn_InlineNoiseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDensityFn_InlineNoiseContext() *DensityFn_InlineNoiseContext {
	var p = new(DensityFn_InlineNoiseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_InlineNoise
	return p
}

func InitEmptyDensityFn_InlineNoiseContext(p *DensityFn_InlineNoiseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_InlineNoise
}

func (*DensityFn_InlineNoiseContext) IsDensityFn_InlineNoiseContext() {}

func NewDensityFn_InlineNoiseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DensityFn_InlineNoiseContext {
	var p = new(DensityFn_InlineNoiseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_InlineNoise

	return p
}

func (s *DensityFn_InlineNoiseContext) GetParser() antlr.Parser { return s.parser }

func (s *DensityFn_InlineNoiseContext) Noise() INoiseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INoiseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INoiseContext)
}

func (s *DensityFn_InlineNoiseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DensityFn_InlineNoiseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DensityFn_InlineNoiseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterDensityFn_InlineNoise(s)
	}
}

func (s *DensityFn_InlineNoiseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitDensityFn_InlineNoise(s)
	}
}

func (p *MinecraftMetascriptParser) DensityFn_InlineNoise() (localctx IDensityFn_InlineNoiseContext) {
	localctx = NewDensityFn_InlineNoiseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 148, MinecraftMetascriptParserRULE_densityFn_InlineNoise)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1227)
		p.Noise()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDensityFn_NoiseContext is an interface to support dynamic dispatch.
type IDensityFn_NoiseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DensityFn_InlineNoise() IDensityFn_InlineNoiseContext
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode
	AllDensityFn_NoiseBuilder() []IDensityFn_NoiseBuilderContext
	DensityFn_NoiseBuilder(i int) IDensityFn_NoiseBuilderContext
	ResourceReference() IResourceReferenceContext

	// IsDensityFn_NoiseContext differentiates from other interfaces.
	IsDensityFn_NoiseContext()
}

type DensityFn_NoiseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDensityFn_NoiseContext() *DensityFn_NoiseContext {
	var p = new(DensityFn_NoiseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_Noise
	return p
}

func InitEmptyDensityFn_NoiseContext(p *DensityFn_NoiseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_Noise
}

func (*DensityFn_NoiseContext) IsDensityFn_NoiseContext() {}

func NewDensityFn_NoiseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DensityFn_NoiseContext {
	var p = new(DensityFn_NoiseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_Noise

	return p
}

func (s *DensityFn_NoiseContext) GetParser() antlr.Parser { return s.parser }

func (s *DensityFn_NoiseContext) DensityFn_InlineNoise() IDensityFn_InlineNoiseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFn_InlineNoiseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFn_InlineNoiseContext)
}

func (s *DensityFn_NoiseContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *DensityFn_NoiseContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *DensityFn_NoiseContext) AllDensityFn_NoiseBuilder() []IDensityFn_NoiseBuilderContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDensityFn_NoiseBuilderContext); ok {
			len++
		}
	}

	tst := make([]IDensityFn_NoiseBuilderContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDensityFn_NoiseBuilderContext); ok {
			tst[i] = t.(IDensityFn_NoiseBuilderContext)
			i++
		}
	}

	return tst
}

func (s *DensityFn_NoiseContext) DensityFn_NoiseBuilder(i int) IDensityFn_NoiseBuilderContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFn_NoiseBuilderContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFn_NoiseBuilderContext)
}

func (s *DensityFn_NoiseContext) ResourceReference() IResourceReferenceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IResourceReferenceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IResourceReferenceContext)
}

func (s *DensityFn_NoiseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DensityFn_NoiseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DensityFn_NoiseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterDensityFn_Noise(s)
	}
}

func (s *DensityFn_NoiseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitDensityFn_Noise(s)
	}
}

func (p *MinecraftMetascriptParser) DensityFn_Noise() (localctx IDensityFn_NoiseContext) {
	localctx = NewDensityFn_NoiseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 150, MinecraftMetascriptParserRULE_densityFn_Noise)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1253)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 127, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1229)
			p.Match(MinecraftMetascriptParserT__50)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1233)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == MinecraftMetascriptParserNL {
			{
				p.SetState(1230)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(1235)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1236)
			p.Match(MinecraftMetascriptParserT__7)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1240)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == MinecraftMetascriptParserNL {
			{
				p.SetState(1237)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(1242)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}

		{
			p.SetState(1243)
			p.ResourceReference()
		}

		p.SetState(1247)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == MinecraftMetascriptParserNL {
			{
				p.SetState(1244)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(1249)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1250)
			p.Match(MinecraftMetascriptParserT__8)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		{
			p.SetState(1252)
			p.DensityFn_InlineNoise()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	p.SetState(1258)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 128, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1255)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1260)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 128, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1270)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserT__28 || _la == MinecraftMetascriptParserT__29 {
		{
			p.SetState(1261)
			p.DensityFn_NoiseBuilder()
		}
		p.SetState(1265)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 129, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1262)
					p.Match(MinecraftMetascriptParserNL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(1267)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 129, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}

		p.SetState(1272)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDensityFn_NoiseBuilderContext is an interface to support dynamic dispatch.
type IDensityFn_NoiseBuilderContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Builder_XZScale() IBuilder_XZScaleContext
	Builder_YScale() IBuilder_YScaleContext

	// IsDensityFn_NoiseBuilderContext differentiates from other interfaces.
	IsDensityFn_NoiseBuilderContext()
}

type DensityFn_NoiseBuilderContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDensityFn_NoiseBuilderContext() *DensityFn_NoiseBuilderContext {
	var p = new(DensityFn_NoiseBuilderContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_NoiseBuilder
	return p
}

func InitEmptyDensityFn_NoiseBuilderContext(p *DensityFn_NoiseBuilderContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_NoiseBuilder
}

func (*DensityFn_NoiseBuilderContext) IsDensityFn_NoiseBuilderContext() {}

func NewDensityFn_NoiseBuilderContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DensityFn_NoiseBuilderContext {
	var p = new(DensityFn_NoiseBuilderContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_NoiseBuilder

	return p
}

func (s *DensityFn_NoiseBuilderContext) GetParser() antlr.Parser { return s.parser }

func (s *DensityFn_NoiseBuilderContext) Builder_XZScale() IBuilder_XZScaleContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_XZScaleContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_XZScaleContext)
}

func (s *DensityFn_NoiseBuilderContext) Builder_YScale() IBuilder_YScaleContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_YScaleContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_YScaleContext)
}

func (s *DensityFn_NoiseBuilderContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DensityFn_NoiseBuilderContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DensityFn_NoiseBuilderContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterDensityFn_NoiseBuilder(s)
	}
}

func (s *DensityFn_NoiseBuilderContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitDensityFn_NoiseBuilder(s)
	}
}

func (p *MinecraftMetascriptParser) DensityFn_NoiseBuilder() (localctx IDensityFn_NoiseBuilderContext) {
	localctx = NewDensityFn_NoiseBuilderContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 152, MinecraftMetascriptParserRULE_densityFn_NoiseBuilder)
	p.SetState(1275)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case MinecraftMetascriptParserT__28:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1273)
			p.Builder_XZScale()
		}

	case MinecraftMetascriptParserT__29:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1274)
			p.Builder_YScale()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDensityFn_CacheContext is an interface to support dynamic dispatch.
type IDensityFn_CacheContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DensityFn_CacheKind() antlr.TerminalNode
	DensityFn() IDensityFnContext
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode

	// IsDensityFn_CacheContext differentiates from other interfaces.
	IsDensityFn_CacheContext()
}

type DensityFn_CacheContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDensityFn_CacheContext() *DensityFn_CacheContext {
	var p = new(DensityFn_CacheContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_Cache
	return p
}

func InitEmptyDensityFn_CacheContext(p *DensityFn_CacheContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_Cache
}

func (*DensityFn_CacheContext) IsDensityFn_CacheContext() {}

func NewDensityFn_CacheContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DensityFn_CacheContext {
	var p = new(DensityFn_CacheContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_Cache

	return p
}

func (s *DensityFn_CacheContext) GetParser() antlr.Parser { return s.parser }

func (s *DensityFn_CacheContext) DensityFn_CacheKind() antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserDensityFn_CacheKind, 0)
}

func (s *DensityFn_CacheContext) DensityFn() IDensityFnContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFnContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFnContext)
}

func (s *DensityFn_CacheContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *DensityFn_CacheContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *DensityFn_CacheContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DensityFn_CacheContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DensityFn_CacheContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterDensityFn_Cache(s)
	}
}

func (s *DensityFn_CacheContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitDensityFn_Cache(s)
	}
}

func (p *MinecraftMetascriptParser) DensityFn_Cache() (localctx IDensityFn_CacheContext) {
	localctx = NewDensityFn_CacheContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 154, MinecraftMetascriptParserRULE_densityFn_Cache)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1277)
		p.Match(MinecraftMetascriptParserT__67)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1281)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(1278)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1283)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1284)
		p.Match(MinecraftMetascriptParserT__7)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1288)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(1285)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1290)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1291)
		p.Match(MinecraftMetascriptParserDensityFn_CacheKind)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1295)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(1292)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1297)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1298)
		p.Match(MinecraftMetascriptParserT__12)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1302)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 135, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1299)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1304)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 135, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	{
		p.SetState(1305)
		p.DensityFn()
	}
	p.SetState(1309)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(1306)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1311)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1312)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDensityFn_DualInputContext is an interface to support dynamic dispatch.
type IDensityFn_DualInputContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllDensityFn() []IDensityFnContext
	DensityFn(i int) IDensityFnContext
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode

	// IsDensityFn_DualInputContext differentiates from other interfaces.
	IsDensityFn_DualInputContext()
}

type DensityFn_DualInputContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDensityFn_DualInputContext() *DensityFn_DualInputContext {
	var p = new(DensityFn_DualInputContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_DualInput
	return p
}

func InitEmptyDensityFn_DualInputContext(p *DensityFn_DualInputContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_DualInput
}

func (*DensityFn_DualInputContext) IsDensityFn_DualInputContext() {}

func NewDensityFn_DualInputContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DensityFn_DualInputContext {
	var p = new(DensityFn_DualInputContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_DualInput

	return p
}

func (s *DensityFn_DualInputContext) GetParser() antlr.Parser { return s.parser }

func (s *DensityFn_DualInputContext) AllDensityFn() []IDensityFnContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDensityFnContext); ok {
			len++
		}
	}

	tst := make([]IDensityFnContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDensityFnContext); ok {
			tst[i] = t.(IDensityFnContext)
			i++
		}
	}

	return tst
}

func (s *DensityFn_DualInputContext) DensityFn(i int) IDensityFnContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFnContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFnContext)
}

func (s *DensityFn_DualInputContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *DensityFn_DualInputContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *DensityFn_DualInputContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DensityFn_DualInputContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DensityFn_DualInputContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterDensityFn_DualInput(s)
	}
}

func (s *DensityFn_DualInputContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitDensityFn_DualInput(s)
	}
}

func (p *MinecraftMetascriptParser) DensityFn_DualInput() (localctx IDensityFn_DualInputContext) {
	localctx = NewDensityFn_DualInputContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 156, MinecraftMetascriptParserRULE_densityFn_DualInput)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1317)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case MinecraftMetascriptParserT__7, MinecraftMetascriptParserNL:

	case MinecraftMetascriptParserT__68:
		{
			p.SetState(1315)
			p.Match(MinecraftMetascriptParserT__68)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case MinecraftMetascriptParserT__69:
		{
			p.SetState(1316)
			p.Match(MinecraftMetascriptParserT__69)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}
	p.SetState(1322)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(1319)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1324)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1325)
		p.Match(MinecraftMetascriptParserT__7)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1329)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 139, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1326)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1331)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 139, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	{
		p.SetState(1332)
		p.DensityFn()
	}
	{
		p.SetState(1333)
		p.Match(MinecraftMetascriptParserT__12)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1337)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 140, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1334)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1339)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 140, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	{
		p.SetState(1340)
		p.DensityFn()
	}
	p.SetState(1344)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(1341)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1346)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1347)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDensityFn_OldBlendedNoiseContext is an interface to support dynamic dispatch.
type IDensityFn_OldBlendedNoiseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode
	AllDensityFn_OldBlendedNoiseBuilder() []IDensityFn_OldBlendedNoiseBuilderContext
	DensityFn_OldBlendedNoiseBuilder(i int) IDensityFn_OldBlendedNoiseBuilderContext

	// IsDensityFn_OldBlendedNoiseContext differentiates from other interfaces.
	IsDensityFn_OldBlendedNoiseContext()
}

type DensityFn_OldBlendedNoiseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDensityFn_OldBlendedNoiseContext() *DensityFn_OldBlendedNoiseContext {
	var p = new(DensityFn_OldBlendedNoiseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_OldBlendedNoise
	return p
}

func InitEmptyDensityFn_OldBlendedNoiseContext(p *DensityFn_OldBlendedNoiseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_OldBlendedNoise
}

func (*DensityFn_OldBlendedNoiseContext) IsDensityFn_OldBlendedNoiseContext() {}

func NewDensityFn_OldBlendedNoiseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DensityFn_OldBlendedNoiseContext {
	var p = new(DensityFn_OldBlendedNoiseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_OldBlendedNoise

	return p
}

func (s *DensityFn_OldBlendedNoiseContext) GetParser() antlr.Parser { return s.parser }

func (s *DensityFn_OldBlendedNoiseContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *DensityFn_OldBlendedNoiseContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *DensityFn_OldBlendedNoiseContext) AllDensityFn_OldBlendedNoiseBuilder() []IDensityFn_OldBlendedNoiseBuilderContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDensityFn_OldBlendedNoiseBuilderContext); ok {
			len++
		}
	}

	tst := make([]IDensityFn_OldBlendedNoiseBuilderContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDensityFn_OldBlendedNoiseBuilderContext); ok {
			tst[i] = t.(IDensityFn_OldBlendedNoiseBuilderContext)
			i++
		}
	}

	return tst
}

func (s *DensityFn_OldBlendedNoiseContext) DensityFn_OldBlendedNoiseBuilder(i int) IDensityFn_OldBlendedNoiseBuilderContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFn_OldBlendedNoiseBuilderContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFn_OldBlendedNoiseBuilderContext)
}

func (s *DensityFn_OldBlendedNoiseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DensityFn_OldBlendedNoiseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DensityFn_OldBlendedNoiseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterDensityFn_OldBlendedNoise(s)
	}
}

func (s *DensityFn_OldBlendedNoiseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitDensityFn_OldBlendedNoise(s)
	}
}

func (p *MinecraftMetascriptParser) DensityFn_OldBlendedNoise() (localctx IDensityFn_OldBlendedNoiseContext) {
	localctx = NewDensityFn_OldBlendedNoiseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 158, MinecraftMetascriptParserRULE_densityFn_OldBlendedNoise)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1349)
		p.Match(MinecraftMetascriptParserT__70)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1353)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(1350)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1355)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1356)
		p.Match(MinecraftMetascriptParserT__7)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1360)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(1357)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1362)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1363)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1367)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 144, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1364)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1369)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 144, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1379)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&25232932864) != 0 {
		{
			p.SetState(1370)
			p.DensityFn_OldBlendedNoiseBuilder()
		}
		p.SetState(1374)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 145, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1371)
					p.Match(MinecraftMetascriptParserNL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(1376)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 145, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}

		p.SetState(1381)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDensityFn_OldBlendedNoiseBuilderContext is an interface to support dynamic dispatch.
type IDensityFn_OldBlendedNoiseBuilderContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Builder_XZScale() IBuilder_XZScaleContext
	Builder_YScale() IBuilder_YScaleContext
	Builder_XZFactor() IBuilder_XZFactorContext
	Builder_YFactor() IBuilder_YFactorContext
	Builder_Smear() IBuilder_SmearContext

	// IsDensityFn_OldBlendedNoiseBuilderContext differentiates from other interfaces.
	IsDensityFn_OldBlendedNoiseBuilderContext()
}

type DensityFn_OldBlendedNoiseBuilderContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDensityFn_OldBlendedNoiseBuilderContext() *DensityFn_OldBlendedNoiseBuilderContext {
	var p = new(DensityFn_OldBlendedNoiseBuilderContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_OldBlendedNoiseBuilder
	return p
}

func InitEmptyDensityFn_OldBlendedNoiseBuilderContext(p *DensityFn_OldBlendedNoiseBuilderContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_OldBlendedNoiseBuilder
}

func (*DensityFn_OldBlendedNoiseBuilderContext) IsDensityFn_OldBlendedNoiseBuilderContext() {}

func NewDensityFn_OldBlendedNoiseBuilderContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DensityFn_OldBlendedNoiseBuilderContext {
	var p = new(DensityFn_OldBlendedNoiseBuilderContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_OldBlendedNoiseBuilder

	return p
}

func (s *DensityFn_OldBlendedNoiseBuilderContext) GetParser() antlr.Parser { return s.parser }

func (s *DensityFn_OldBlendedNoiseBuilderContext) Builder_XZScale() IBuilder_XZScaleContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_XZScaleContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_XZScaleContext)
}

func (s *DensityFn_OldBlendedNoiseBuilderContext) Builder_YScale() IBuilder_YScaleContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_YScaleContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_YScaleContext)
}

func (s *DensityFn_OldBlendedNoiseBuilderContext) Builder_XZFactor() IBuilder_XZFactorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_XZFactorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_XZFactorContext)
}

func (s *DensityFn_OldBlendedNoiseBuilderContext) Builder_YFactor() IBuilder_YFactorContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_YFactorContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_YFactorContext)
}

func (s *DensityFn_OldBlendedNoiseBuilderContext) Builder_Smear() IBuilder_SmearContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_SmearContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_SmearContext)
}

func (s *DensityFn_OldBlendedNoiseBuilderContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DensityFn_OldBlendedNoiseBuilderContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DensityFn_OldBlendedNoiseBuilderContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterDensityFn_OldBlendedNoiseBuilder(s)
	}
}

func (s *DensityFn_OldBlendedNoiseBuilderContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitDensityFn_OldBlendedNoiseBuilder(s)
	}
}

func (p *MinecraftMetascriptParser) DensityFn_OldBlendedNoiseBuilder() (localctx IDensityFn_OldBlendedNoiseBuilderContext) {
	localctx = NewDensityFn_OldBlendedNoiseBuilderContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 160, MinecraftMetascriptParserRULE_densityFn_OldBlendedNoiseBuilder)
	p.SetState(1387)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case MinecraftMetascriptParserT__28:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1382)
			p.Builder_XZScale()
		}

	case MinecraftMetascriptParserT__29:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1383)
			p.Builder_YScale()
		}

	case MinecraftMetascriptParserT__30:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1384)
			p.Builder_XZFactor()
		}

	case MinecraftMetascriptParserT__31:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1385)
			p.Builder_YFactor()
		}

	case MinecraftMetascriptParserT__33:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1386)
			p.Builder_Smear()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDensityFn_WierdScaledSamplerContext is an interface to support dynamic dispatch.
type IDensityFn_WierdScaledSamplerContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DensityFn() IDensityFnContext
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode
	AllDensityFn_WierdScaledSamplerBuilder() []IDensityFn_WierdScaledSamplerBuilderContext
	DensityFn_WierdScaledSamplerBuilder(i int) IDensityFn_WierdScaledSamplerBuilderContext

	// IsDensityFn_WierdScaledSamplerContext differentiates from other interfaces.
	IsDensityFn_WierdScaledSamplerContext()
}

type DensityFn_WierdScaledSamplerContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDensityFn_WierdScaledSamplerContext() *DensityFn_WierdScaledSamplerContext {
	var p = new(DensityFn_WierdScaledSamplerContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_WierdScaledSampler
	return p
}

func InitEmptyDensityFn_WierdScaledSamplerContext(p *DensityFn_WierdScaledSamplerContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_WierdScaledSampler
}

func (*DensityFn_WierdScaledSamplerContext) IsDensityFn_WierdScaledSamplerContext() {}

func NewDensityFn_WierdScaledSamplerContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DensityFn_WierdScaledSamplerContext {
	var p = new(DensityFn_WierdScaledSamplerContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_WierdScaledSampler

	return p
}

func (s *DensityFn_WierdScaledSamplerContext) GetParser() antlr.Parser { return s.parser }

func (s *DensityFn_WierdScaledSamplerContext) DensityFn() IDensityFnContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFnContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFnContext)
}

func (s *DensityFn_WierdScaledSamplerContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *DensityFn_WierdScaledSamplerContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *DensityFn_WierdScaledSamplerContext) AllDensityFn_WierdScaledSamplerBuilder() []IDensityFn_WierdScaledSamplerBuilderContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDensityFn_WierdScaledSamplerBuilderContext); ok {
			len++
		}
	}

	tst := make([]IDensityFn_WierdScaledSamplerBuilderContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDensityFn_WierdScaledSamplerBuilderContext); ok {
			tst[i] = t.(IDensityFn_WierdScaledSamplerBuilderContext)
			i++
		}
	}

	return tst
}

func (s *DensityFn_WierdScaledSamplerContext) DensityFn_WierdScaledSamplerBuilder(i int) IDensityFn_WierdScaledSamplerBuilderContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFn_WierdScaledSamplerBuilderContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFn_WierdScaledSamplerBuilderContext)
}

func (s *DensityFn_WierdScaledSamplerContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DensityFn_WierdScaledSamplerContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DensityFn_WierdScaledSamplerContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterDensityFn_WierdScaledSampler(s)
	}
}

func (s *DensityFn_WierdScaledSamplerContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitDensityFn_WierdScaledSampler(s)
	}
}

func (p *MinecraftMetascriptParser) DensityFn_WierdScaledSampler() (localctx IDensityFn_WierdScaledSamplerContext) {
	localctx = NewDensityFn_WierdScaledSamplerContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 162, MinecraftMetascriptParserRULE_densityFn_WierdScaledSampler)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1389)
		p.Match(MinecraftMetascriptParserT__71)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1393)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(1390)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1395)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1396)
		p.Match(MinecraftMetascriptParserT__7)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1400)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 149, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1397)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1402)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 149, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	{
		p.SetState(1403)
		p.DensityFn()
	}
	p.SetState(1407)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(1404)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1409)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1410)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1414)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 151, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1411)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1416)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 151, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1426)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&111669149696) != 0 {
		{
			p.SetState(1417)
			p.DensityFn_WierdScaledSamplerBuilder()
		}
		p.SetState(1421)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 152, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1418)
					p.Match(MinecraftMetascriptParserNL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(1423)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 152, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}

		p.SetState(1428)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDensityFn_WierdScaledSamplerBuilderContext is an interface to support dynamic dispatch.
type IDensityFn_WierdScaledSamplerBuilderContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Builder_Type1() IBuilder_Type1Context
	Builder_Type2() IBuilder_Type2Context
	Builder_Noise() IBuilder_NoiseContext

	// IsDensityFn_WierdScaledSamplerBuilderContext differentiates from other interfaces.
	IsDensityFn_WierdScaledSamplerBuilderContext()
}

type DensityFn_WierdScaledSamplerBuilderContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDensityFn_WierdScaledSamplerBuilderContext() *DensityFn_WierdScaledSamplerBuilderContext {
	var p = new(DensityFn_WierdScaledSamplerBuilderContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_WierdScaledSamplerBuilder
	return p
}

func InitEmptyDensityFn_WierdScaledSamplerBuilderContext(p *DensityFn_WierdScaledSamplerBuilderContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_WierdScaledSamplerBuilder
}

func (*DensityFn_WierdScaledSamplerBuilderContext) IsDensityFn_WierdScaledSamplerBuilderContext() {}

func NewDensityFn_WierdScaledSamplerBuilderContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DensityFn_WierdScaledSamplerBuilderContext {
	var p = new(DensityFn_WierdScaledSamplerBuilderContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_WierdScaledSamplerBuilder

	return p
}

func (s *DensityFn_WierdScaledSamplerBuilderContext) GetParser() antlr.Parser { return s.parser }

func (s *DensityFn_WierdScaledSamplerBuilderContext) Builder_Type1() IBuilder_Type1Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_Type1Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_Type1Context)
}

func (s *DensityFn_WierdScaledSamplerBuilderContext) Builder_Type2() IBuilder_Type2Context {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_Type2Context); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_Type2Context)
}

func (s *DensityFn_WierdScaledSamplerBuilderContext) Builder_Noise() IBuilder_NoiseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_NoiseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_NoiseContext)
}

func (s *DensityFn_WierdScaledSamplerBuilderContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DensityFn_WierdScaledSamplerBuilderContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DensityFn_WierdScaledSamplerBuilderContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterDensityFn_WierdScaledSamplerBuilder(s)
	}
}

func (s *DensityFn_WierdScaledSamplerBuilderContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitDensityFn_WierdScaledSamplerBuilder(s)
	}
}

func (p *MinecraftMetascriptParser) DensityFn_WierdScaledSamplerBuilder() (localctx IDensityFn_WierdScaledSamplerBuilderContext) {
	localctx = NewDensityFn_WierdScaledSamplerBuilderContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 164, MinecraftMetascriptParserRULE_densityFn_WierdScaledSamplerBuilder)
	p.SetState(1432)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case MinecraftMetascriptParserT__34:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1429)
			p.Builder_Type1()
		}

	case MinecraftMetascriptParserT__35:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1430)
			p.Builder_Type2()
		}

	case MinecraftMetascriptParserT__32:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1431)
			p.Builder_Noise()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDensityFn_ShiftedNoiseContext is an interface to support dynamic dispatch.
type IDensityFn_ShiftedNoiseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode
	AllDensityFn_ShiftedNoiseBuilder() []IDensityFn_ShiftedNoiseBuilderContext
	DensityFn_ShiftedNoiseBuilder(i int) IDensityFn_ShiftedNoiseBuilderContext

	// IsDensityFn_ShiftedNoiseContext differentiates from other interfaces.
	IsDensityFn_ShiftedNoiseContext()
}

type DensityFn_ShiftedNoiseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDensityFn_ShiftedNoiseContext() *DensityFn_ShiftedNoiseContext {
	var p = new(DensityFn_ShiftedNoiseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_ShiftedNoise
	return p
}

func InitEmptyDensityFn_ShiftedNoiseContext(p *DensityFn_ShiftedNoiseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_ShiftedNoise
}

func (*DensityFn_ShiftedNoiseContext) IsDensityFn_ShiftedNoiseContext() {}

func NewDensityFn_ShiftedNoiseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DensityFn_ShiftedNoiseContext {
	var p = new(DensityFn_ShiftedNoiseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_ShiftedNoise

	return p
}

func (s *DensityFn_ShiftedNoiseContext) GetParser() antlr.Parser { return s.parser }

func (s *DensityFn_ShiftedNoiseContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *DensityFn_ShiftedNoiseContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *DensityFn_ShiftedNoiseContext) AllDensityFn_ShiftedNoiseBuilder() []IDensityFn_ShiftedNoiseBuilderContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDensityFn_ShiftedNoiseBuilderContext); ok {
			len++
		}
	}

	tst := make([]IDensityFn_ShiftedNoiseBuilderContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDensityFn_ShiftedNoiseBuilderContext); ok {
			tst[i] = t.(IDensityFn_ShiftedNoiseBuilderContext)
			i++
		}
	}

	return tst
}

func (s *DensityFn_ShiftedNoiseContext) DensityFn_ShiftedNoiseBuilder(i int) IDensityFn_ShiftedNoiseBuilderContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFn_ShiftedNoiseBuilderContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFn_ShiftedNoiseBuilderContext)
}

func (s *DensityFn_ShiftedNoiseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DensityFn_ShiftedNoiseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DensityFn_ShiftedNoiseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterDensityFn_ShiftedNoise(s)
	}
}

func (s *DensityFn_ShiftedNoiseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitDensityFn_ShiftedNoise(s)
	}
}

func (p *MinecraftMetascriptParser) DensityFn_ShiftedNoise() (localctx IDensityFn_ShiftedNoiseContext) {
	localctx = NewDensityFn_ShiftedNoiseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 166, MinecraftMetascriptParserRULE_densityFn_ShiftedNoise)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1434)
		p.Match(MinecraftMetascriptParserT__72)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1438)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(1435)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1440)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1441)
		p.Match(MinecraftMetascriptParserT__7)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1445)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(1442)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1447)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1448)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1452)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 157, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1449)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1454)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 157, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1464)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&972273221632) != 0 {
		{
			p.SetState(1455)
			p.DensityFn_ShiftedNoiseBuilder()
		}
		p.SetState(1459)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 158, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1456)
					p.Match(MinecraftMetascriptParserNL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(1461)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 158, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}

		p.SetState(1466)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDensityFn_ShiftedNoiseBuilderContext is an interface to support dynamic dispatch.
type IDensityFn_ShiftedNoiseBuilderContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Builder_Noise() IBuilder_NoiseContext
	Builder_XZScale() IBuilder_XZScaleContext
	Builder_YScale() IBuilder_YScaleContext
	Builder_ShiftX() IBuilder_ShiftXContext
	Builder_ShiftY() IBuilder_ShiftYContext
	Builder_ShiftZ() IBuilder_ShiftZContext

	// IsDensityFn_ShiftedNoiseBuilderContext differentiates from other interfaces.
	IsDensityFn_ShiftedNoiseBuilderContext()
}

type DensityFn_ShiftedNoiseBuilderContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDensityFn_ShiftedNoiseBuilderContext() *DensityFn_ShiftedNoiseBuilderContext {
	var p = new(DensityFn_ShiftedNoiseBuilderContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_ShiftedNoiseBuilder
	return p
}

func InitEmptyDensityFn_ShiftedNoiseBuilderContext(p *DensityFn_ShiftedNoiseBuilderContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_ShiftedNoiseBuilder
}

func (*DensityFn_ShiftedNoiseBuilderContext) IsDensityFn_ShiftedNoiseBuilderContext() {}

func NewDensityFn_ShiftedNoiseBuilderContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DensityFn_ShiftedNoiseBuilderContext {
	var p = new(DensityFn_ShiftedNoiseBuilderContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_ShiftedNoiseBuilder

	return p
}

func (s *DensityFn_ShiftedNoiseBuilderContext) GetParser() antlr.Parser { return s.parser }

func (s *DensityFn_ShiftedNoiseBuilderContext) Builder_Noise() IBuilder_NoiseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_NoiseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_NoiseContext)
}

func (s *DensityFn_ShiftedNoiseBuilderContext) Builder_XZScale() IBuilder_XZScaleContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_XZScaleContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_XZScaleContext)
}

func (s *DensityFn_ShiftedNoiseBuilderContext) Builder_YScale() IBuilder_YScaleContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_YScaleContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_YScaleContext)
}

func (s *DensityFn_ShiftedNoiseBuilderContext) Builder_ShiftX() IBuilder_ShiftXContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_ShiftXContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_ShiftXContext)
}

func (s *DensityFn_ShiftedNoiseBuilderContext) Builder_ShiftY() IBuilder_ShiftYContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_ShiftYContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_ShiftYContext)
}

func (s *DensityFn_ShiftedNoiseBuilderContext) Builder_ShiftZ() IBuilder_ShiftZContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_ShiftZContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_ShiftZContext)
}

func (s *DensityFn_ShiftedNoiseBuilderContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DensityFn_ShiftedNoiseBuilderContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DensityFn_ShiftedNoiseBuilderContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterDensityFn_ShiftedNoiseBuilder(s)
	}
}

func (s *DensityFn_ShiftedNoiseBuilderContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitDensityFn_ShiftedNoiseBuilder(s)
	}
}

func (p *MinecraftMetascriptParser) DensityFn_ShiftedNoiseBuilder() (localctx IDensityFn_ShiftedNoiseBuilderContext) {
	localctx = NewDensityFn_ShiftedNoiseBuilderContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 168, MinecraftMetascriptParserRULE_densityFn_ShiftedNoiseBuilder)
	p.SetState(1473)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case MinecraftMetascriptParserT__32:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1467)
			p.Builder_Noise()
		}

	case MinecraftMetascriptParserT__28:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1468)
			p.Builder_XZScale()
		}

	case MinecraftMetascriptParserT__29:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1469)
			p.Builder_YScale()
		}

	case MinecraftMetascriptParserT__36:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1470)
			p.Builder_ShiftX()
		}

	case MinecraftMetascriptParserT__37:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1471)
			p.Builder_ShiftY()
		}

	case MinecraftMetascriptParserT__38:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1472)
			p.Builder_ShiftZ()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDensityFn_RangeChoiceContext is an interface to support dynamic dispatch.
type IDensityFn_RangeChoiceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DensityFn() IDensityFnContext
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode
	AllDensityFn_RangeChoiceBuilder() []IDensityFn_RangeChoiceBuilderContext
	DensityFn_RangeChoiceBuilder(i int) IDensityFn_RangeChoiceBuilderContext

	// IsDensityFn_RangeChoiceContext differentiates from other interfaces.
	IsDensityFn_RangeChoiceContext()
}

type DensityFn_RangeChoiceContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDensityFn_RangeChoiceContext() *DensityFn_RangeChoiceContext {
	var p = new(DensityFn_RangeChoiceContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_RangeChoice
	return p
}

func InitEmptyDensityFn_RangeChoiceContext(p *DensityFn_RangeChoiceContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_RangeChoice
}

func (*DensityFn_RangeChoiceContext) IsDensityFn_RangeChoiceContext() {}

func NewDensityFn_RangeChoiceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DensityFn_RangeChoiceContext {
	var p = new(DensityFn_RangeChoiceContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_RangeChoice

	return p
}

func (s *DensityFn_RangeChoiceContext) GetParser() antlr.Parser { return s.parser }

func (s *DensityFn_RangeChoiceContext) DensityFn() IDensityFnContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFnContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFnContext)
}

func (s *DensityFn_RangeChoiceContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *DensityFn_RangeChoiceContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *DensityFn_RangeChoiceContext) AllDensityFn_RangeChoiceBuilder() []IDensityFn_RangeChoiceBuilderContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDensityFn_RangeChoiceBuilderContext); ok {
			len++
		}
	}

	tst := make([]IDensityFn_RangeChoiceBuilderContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDensityFn_RangeChoiceBuilderContext); ok {
			tst[i] = t.(IDensityFn_RangeChoiceBuilderContext)
			i++
		}
	}

	return tst
}

func (s *DensityFn_RangeChoiceContext) DensityFn_RangeChoiceBuilder(i int) IDensityFn_RangeChoiceBuilderContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFn_RangeChoiceBuilderContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFn_RangeChoiceBuilderContext)
}

func (s *DensityFn_RangeChoiceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DensityFn_RangeChoiceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DensityFn_RangeChoiceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterDensityFn_RangeChoice(s)
	}
}

func (s *DensityFn_RangeChoiceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitDensityFn_RangeChoice(s)
	}
}

func (p *MinecraftMetascriptParser) DensityFn_RangeChoice() (localctx IDensityFn_RangeChoiceContext) {
	localctx = NewDensityFn_RangeChoiceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 170, MinecraftMetascriptParserRULE_densityFn_RangeChoice)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1475)
		p.Match(MinecraftMetascriptParserT__73)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1479)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(1476)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1481)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1482)
		p.Match(MinecraftMetascriptParserT__7)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1486)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 162, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1483)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1488)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 162, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	{
		p.SetState(1489)
		p.DensityFn()
	}
	p.SetState(1493)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(1490)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1495)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1496)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1500)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 164, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1497)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1502)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 164, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1512)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&897201488265216) != 0 {
		{
			p.SetState(1503)
			p.DensityFn_RangeChoiceBuilder()
		}
		p.SetState(1507)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 165, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1504)
					p.Match(MinecraftMetascriptParserNL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(1509)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 165, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}

		p.SetState(1514)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDensityFn_RangeChoiceBuilderContext is an interface to support dynamic dispatch.
type IDensityFn_RangeChoiceBuilderContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Builder_Min() IBuilder_MinContext
	Builder_Max() IBuilder_MaxContext
	Builder_InRange() IBuilder_InRangeContext
	Builder_OutRange() IBuilder_OutRangeContext

	// IsDensityFn_RangeChoiceBuilderContext differentiates from other interfaces.
	IsDensityFn_RangeChoiceBuilderContext()
}

type DensityFn_RangeChoiceBuilderContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDensityFn_RangeChoiceBuilderContext() *DensityFn_RangeChoiceBuilderContext {
	var p = new(DensityFn_RangeChoiceBuilderContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_RangeChoiceBuilder
	return p
}

func InitEmptyDensityFn_RangeChoiceBuilderContext(p *DensityFn_RangeChoiceBuilderContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_RangeChoiceBuilder
}

func (*DensityFn_RangeChoiceBuilderContext) IsDensityFn_RangeChoiceBuilderContext() {}

func NewDensityFn_RangeChoiceBuilderContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DensityFn_RangeChoiceBuilderContext {
	var p = new(DensityFn_RangeChoiceBuilderContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_RangeChoiceBuilder

	return p
}

func (s *DensityFn_RangeChoiceBuilderContext) GetParser() antlr.Parser { return s.parser }

func (s *DensityFn_RangeChoiceBuilderContext) Builder_Min() IBuilder_MinContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_MinContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_MinContext)
}

func (s *DensityFn_RangeChoiceBuilderContext) Builder_Max() IBuilder_MaxContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_MaxContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_MaxContext)
}

func (s *DensityFn_RangeChoiceBuilderContext) Builder_InRange() IBuilder_InRangeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_InRangeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_InRangeContext)
}

func (s *DensityFn_RangeChoiceBuilderContext) Builder_OutRange() IBuilder_OutRangeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_OutRangeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_OutRangeContext)
}

func (s *DensityFn_RangeChoiceBuilderContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DensityFn_RangeChoiceBuilderContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DensityFn_RangeChoiceBuilderContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterDensityFn_RangeChoiceBuilder(s)
	}
}

func (s *DensityFn_RangeChoiceBuilderContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitDensityFn_RangeChoiceBuilder(s)
	}
}

func (p *MinecraftMetascriptParser) DensityFn_RangeChoiceBuilder() (localctx IDensityFn_RangeChoiceBuilderContext) {
	localctx = NewDensityFn_RangeChoiceBuilderContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 172, MinecraftMetascriptParserRULE_densityFn_RangeChoiceBuilder)
	p.SetState(1519)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case MinecraftMetascriptParserT__43:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1515)
			p.Builder_Min()
		}

	case MinecraftMetascriptParserT__44:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1516)
			p.Builder_Max()
		}

	case MinecraftMetascriptParserT__47:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1517)
			p.Builder_InRange()
		}

	case MinecraftMetascriptParserT__48:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1518)
			p.Builder_OutRange()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDensityFn_ClampContext is an interface to support dynamic dispatch.
type IDensityFn_ClampContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DensityFn() IDensityFnContext
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode
	AllDensityFn_ClampBuilder() []IDensityFn_ClampBuilderContext
	DensityFn_ClampBuilder(i int) IDensityFn_ClampBuilderContext

	// IsDensityFn_ClampContext differentiates from other interfaces.
	IsDensityFn_ClampContext()
}

type DensityFn_ClampContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDensityFn_ClampContext() *DensityFn_ClampContext {
	var p = new(DensityFn_ClampContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_Clamp
	return p
}

func InitEmptyDensityFn_ClampContext(p *DensityFn_ClampContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_Clamp
}

func (*DensityFn_ClampContext) IsDensityFn_ClampContext() {}

func NewDensityFn_ClampContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DensityFn_ClampContext {
	var p = new(DensityFn_ClampContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_Clamp

	return p
}

func (s *DensityFn_ClampContext) GetParser() antlr.Parser { return s.parser }

func (s *DensityFn_ClampContext) DensityFn() IDensityFnContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFnContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFnContext)
}

func (s *DensityFn_ClampContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *DensityFn_ClampContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *DensityFn_ClampContext) AllDensityFn_ClampBuilder() []IDensityFn_ClampBuilderContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDensityFn_ClampBuilderContext); ok {
			len++
		}
	}

	tst := make([]IDensityFn_ClampBuilderContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDensityFn_ClampBuilderContext); ok {
			tst[i] = t.(IDensityFn_ClampBuilderContext)
			i++
		}
	}

	return tst
}

func (s *DensityFn_ClampContext) DensityFn_ClampBuilder(i int) IDensityFn_ClampBuilderContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFn_ClampBuilderContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFn_ClampBuilderContext)
}

func (s *DensityFn_ClampContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DensityFn_ClampContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DensityFn_ClampContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterDensityFn_Clamp(s)
	}
}

func (s *DensityFn_ClampContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitDensityFn_Clamp(s)
	}
}

func (p *MinecraftMetascriptParser) DensityFn_Clamp() (localctx IDensityFn_ClampContext) {
	localctx = NewDensityFn_ClampContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 174, MinecraftMetascriptParserRULE_densityFn_Clamp)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1521)
		p.Match(MinecraftMetascriptParserT__74)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1525)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(1522)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1527)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1528)
		p.Match(MinecraftMetascriptParserT__7)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1529)
		p.DensityFn()
	}
	{
		p.SetState(1530)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1534)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 169, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1531)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1536)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 169, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1546)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserT__43 || _la == MinecraftMetascriptParserT__44 {
		{
			p.SetState(1537)
			p.DensityFn_ClampBuilder()
		}
		p.SetState(1541)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 170, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1538)
					p.Match(MinecraftMetascriptParserNL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(1543)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 170, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}

		p.SetState(1548)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDensityFn_ClampBuilderContext is an interface to support dynamic dispatch.
type IDensityFn_ClampBuilderContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Builder_Min() IBuilder_MinContext
	Builder_Max() IBuilder_MaxContext

	// IsDensityFn_ClampBuilderContext differentiates from other interfaces.
	IsDensityFn_ClampBuilderContext()
}

type DensityFn_ClampBuilderContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDensityFn_ClampBuilderContext() *DensityFn_ClampBuilderContext {
	var p = new(DensityFn_ClampBuilderContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_ClampBuilder
	return p
}

func InitEmptyDensityFn_ClampBuilderContext(p *DensityFn_ClampBuilderContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_ClampBuilder
}

func (*DensityFn_ClampBuilderContext) IsDensityFn_ClampBuilderContext() {}

func NewDensityFn_ClampBuilderContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DensityFn_ClampBuilderContext {
	var p = new(DensityFn_ClampBuilderContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_ClampBuilder

	return p
}

func (s *DensityFn_ClampBuilderContext) GetParser() antlr.Parser { return s.parser }

func (s *DensityFn_ClampBuilderContext) Builder_Min() IBuilder_MinContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_MinContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_MinContext)
}

func (s *DensityFn_ClampBuilderContext) Builder_Max() IBuilder_MaxContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_MaxContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_MaxContext)
}

func (s *DensityFn_ClampBuilderContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DensityFn_ClampBuilderContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DensityFn_ClampBuilderContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterDensityFn_ClampBuilder(s)
	}
}

func (s *DensityFn_ClampBuilderContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitDensityFn_ClampBuilder(s)
	}
}

func (p *MinecraftMetascriptParser) DensityFn_ClampBuilder() (localctx IDensityFn_ClampBuilderContext) {
	localctx = NewDensityFn_ClampBuilderContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 176, MinecraftMetascriptParserRULE_densityFn_ClampBuilder)
	p.SetState(1551)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case MinecraftMetascriptParserT__43:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1549)
			p.Builder_Min()
		}

	case MinecraftMetascriptParserT__44:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1550)
			p.Builder_Max()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDensityFn_YClampedGradientContext is an interface to support dynamic dispatch.
type IDensityFn_YClampedGradientContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode
	AllDensityFn_YClampedGradientBuilder() []IDensityFn_YClampedGradientBuilderContext
	DensityFn_YClampedGradientBuilder(i int) IDensityFn_YClampedGradientBuilderContext

	// IsDensityFn_YClampedGradientContext differentiates from other interfaces.
	IsDensityFn_YClampedGradientContext()
}

type DensityFn_YClampedGradientContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDensityFn_YClampedGradientContext() *DensityFn_YClampedGradientContext {
	var p = new(DensityFn_YClampedGradientContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_YClampedGradient
	return p
}

func InitEmptyDensityFn_YClampedGradientContext(p *DensityFn_YClampedGradientContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_YClampedGradient
}

func (*DensityFn_YClampedGradientContext) IsDensityFn_YClampedGradientContext() {}

func NewDensityFn_YClampedGradientContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DensityFn_YClampedGradientContext {
	var p = new(DensityFn_YClampedGradientContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_YClampedGradient

	return p
}

func (s *DensityFn_YClampedGradientContext) GetParser() antlr.Parser { return s.parser }

func (s *DensityFn_YClampedGradientContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *DensityFn_YClampedGradientContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *DensityFn_YClampedGradientContext) AllDensityFn_YClampedGradientBuilder() []IDensityFn_YClampedGradientBuilderContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDensityFn_YClampedGradientBuilderContext); ok {
			len++
		}
	}

	tst := make([]IDensityFn_YClampedGradientBuilderContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDensityFn_YClampedGradientBuilderContext); ok {
			tst[i] = t.(IDensityFn_YClampedGradientBuilderContext)
			i++
		}
	}

	return tst
}

func (s *DensityFn_YClampedGradientContext) DensityFn_YClampedGradientBuilder(i int) IDensityFn_YClampedGradientBuilderContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFn_YClampedGradientBuilderContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFn_YClampedGradientBuilderContext)
}

func (s *DensityFn_YClampedGradientContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DensityFn_YClampedGradientContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DensityFn_YClampedGradientContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterDensityFn_YClampedGradient(s)
	}
}

func (s *DensityFn_YClampedGradientContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitDensityFn_YClampedGradient(s)
	}
}

func (p *MinecraftMetascriptParser) DensityFn_YClampedGradient() (localctx IDensityFn_YClampedGradientContext) {
	localctx = NewDensityFn_YClampedGradientContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 178, MinecraftMetascriptParserRULE_densityFn_YClampedGradient)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1553)
		p.Match(MinecraftMetascriptParserT__75)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1557)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(1554)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1559)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1560)
		p.Match(MinecraftMetascriptParserT__7)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1564)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(1561)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1566)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1567)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1571)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 175, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1568)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1573)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 175, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1583)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for (int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&263882790666240) != 0 {
		{
			p.SetState(1574)
			p.DensityFn_YClampedGradientBuilder()
		}
		p.SetState(1578)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 176, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1575)
					p.Match(MinecraftMetascriptParserNL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(1580)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 176, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}

		p.SetState(1585)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDensityFn_YClampedGradientBuilderContext is an interface to support dynamic dispatch.
type IDensityFn_YClampedGradientBuilderContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Builder_TopLiteral() IBuilder_TopLiteralContext
	Builder_BottomLiteral() IBuilder_BottomLiteralContext
	Builder_Min() IBuilder_MinContext
	Builder_Max() IBuilder_MaxContext

	// IsDensityFn_YClampedGradientBuilderContext differentiates from other interfaces.
	IsDensityFn_YClampedGradientBuilderContext()
}

type DensityFn_YClampedGradientBuilderContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDensityFn_YClampedGradientBuilderContext() *DensityFn_YClampedGradientBuilderContext {
	var p = new(DensityFn_YClampedGradientBuilderContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_YClampedGradientBuilder
	return p
}

func InitEmptyDensityFn_YClampedGradientBuilderContext(p *DensityFn_YClampedGradientBuilderContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_YClampedGradientBuilder
}

func (*DensityFn_YClampedGradientBuilderContext) IsDensityFn_YClampedGradientBuilderContext() {}

func NewDensityFn_YClampedGradientBuilderContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DensityFn_YClampedGradientBuilderContext {
	var p = new(DensityFn_YClampedGradientBuilderContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_YClampedGradientBuilder

	return p
}

func (s *DensityFn_YClampedGradientBuilderContext) GetParser() antlr.Parser { return s.parser }

func (s *DensityFn_YClampedGradientBuilderContext) Builder_TopLiteral() IBuilder_TopLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_TopLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_TopLiteralContext)
}

func (s *DensityFn_YClampedGradientBuilderContext) Builder_BottomLiteral() IBuilder_BottomLiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_BottomLiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_BottomLiteralContext)
}

func (s *DensityFn_YClampedGradientBuilderContext) Builder_Min() IBuilder_MinContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_MinContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_MinContext)
}

func (s *DensityFn_YClampedGradientBuilderContext) Builder_Max() IBuilder_MaxContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_MaxContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_MaxContext)
}

func (s *DensityFn_YClampedGradientBuilderContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DensityFn_YClampedGradientBuilderContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DensityFn_YClampedGradientBuilderContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterDensityFn_YClampedGradientBuilder(s)
	}
}

func (s *DensityFn_YClampedGradientBuilderContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitDensityFn_YClampedGradientBuilder(s)
	}
}

func (p *MinecraftMetascriptParser) DensityFn_YClampedGradientBuilder() (localctx IDensityFn_YClampedGradientBuilderContext) {
	localctx = NewDensityFn_YClampedGradientBuilderContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 180, MinecraftMetascriptParserRULE_densityFn_YClampedGradientBuilder)
	p.SetState(1590)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case MinecraftMetascriptParserT__45:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1586)
			p.Builder_TopLiteral()
		}

	case MinecraftMetascriptParserT__46:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1587)
			p.Builder_BottomLiteral()
		}

	case MinecraftMetascriptParserT__43:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1588)
			p.Builder_Min()
		}

	case MinecraftMetascriptParserT__44:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1589)
			p.Builder_Max()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDensityFn_SplineFnContext is an interface to support dynamic dispatch.
type IDensityFn_SplineFnContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DensityFn_Spline() IDensityFn_SplineContext

	// IsDensityFn_SplineFnContext differentiates from other interfaces.
	IsDensityFn_SplineFnContext()
}

type DensityFn_SplineFnContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDensityFn_SplineFnContext() *DensityFn_SplineFnContext {
	var p = new(DensityFn_SplineFnContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_SplineFn
	return p
}

func InitEmptyDensityFn_SplineFnContext(p *DensityFn_SplineFnContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_SplineFn
}

func (*DensityFn_SplineFnContext) IsDensityFn_SplineFnContext() {}

func NewDensityFn_SplineFnContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DensityFn_SplineFnContext {
	var p = new(DensityFn_SplineFnContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_SplineFn

	return p
}

func (s *DensityFn_SplineFnContext) GetParser() antlr.Parser { return s.parser }

func (s *DensityFn_SplineFnContext) DensityFn_Spline() IDensityFn_SplineContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFn_SplineContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFn_SplineContext)
}

func (s *DensityFn_SplineFnContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DensityFn_SplineFnContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DensityFn_SplineFnContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterDensityFn_SplineFn(s)
	}
}

func (s *DensityFn_SplineFnContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitDensityFn_SplineFn(s)
	}
}

func (p *MinecraftMetascriptParser) DensityFn_SplineFn() (localctx IDensityFn_SplineFnContext) {
	localctx = NewDensityFn_SplineFnContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 182, MinecraftMetascriptParserRULE_densityFn_SplineFn)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1592)
		p.DensityFn_Spline()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDensityFn_SplineContext is an interface to support dynamic dispatch.
type IDensityFn_SplineContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Number() INumberContext
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode
	DensityFn() IDensityFnContext
	AllDensityFn_SplinePoint() []IDensityFn_SplinePointContext
	DensityFn_SplinePoint(i int) IDensityFn_SplinePointContext

	// IsDensityFn_SplineContext differentiates from other interfaces.
	IsDensityFn_SplineContext()
}

type DensityFn_SplineContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDensityFn_SplineContext() *DensityFn_SplineContext {
	var p = new(DensityFn_SplineContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_Spline
	return p
}

func InitEmptyDensityFn_SplineContext(p *DensityFn_SplineContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_Spline
}

func (*DensityFn_SplineContext) IsDensityFn_SplineContext() {}

func NewDensityFn_SplineContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DensityFn_SplineContext {
	var p = new(DensityFn_SplineContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_Spline

	return p
}

func (s *DensityFn_SplineContext) GetParser() antlr.Parser { return s.parser }

func (s *DensityFn_SplineContext) Number() INumberContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumberContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumberContext)
}

func (s *DensityFn_SplineContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *DensityFn_SplineContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *DensityFn_SplineContext) DensityFn() IDensityFnContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFnContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFnContext)
}

func (s *DensityFn_SplineContext) AllDensityFn_SplinePoint() []IDensityFn_SplinePointContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IDensityFn_SplinePointContext); ok {
			len++
		}
	}

	tst := make([]IDensityFn_SplinePointContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IDensityFn_SplinePointContext); ok {
			tst[i] = t.(IDensityFn_SplinePointContext)
			i++
		}
	}

	return tst
}

func (s *DensityFn_SplineContext) DensityFn_SplinePoint(i int) IDensityFn_SplinePointContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFn_SplinePointContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFn_SplinePointContext)
}

func (s *DensityFn_SplineContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DensityFn_SplineContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DensityFn_SplineContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterDensityFn_Spline(s)
	}
}

func (s *DensityFn_SplineContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitDensityFn_Spline(s)
	}
}

func (p *MinecraftMetascriptParser) DensityFn_Spline() (localctx IDensityFn_SplineContext) {
	localctx = NewDensityFn_SplineContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 184, MinecraftMetascriptParserRULE_densityFn_Spline)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1594)
		p.Match(MinecraftMetascriptParserT__76)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1598)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(1595)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1600)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(1638)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 185, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1601)
			p.Match(MinecraftMetascriptParserT__7)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1605)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 180, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1602)
					p.Match(MinecraftMetascriptParserNL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(1607)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 180, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		{
			p.SetState(1608)
			p.DensityFn()
		}
		p.SetState(1612)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == MinecraftMetascriptParserNL {
			{
				p.SetState(1609)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

			p.SetState(1614)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1615)
			p.Match(MinecraftMetascriptParserT__8)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(1619)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 182, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1616)
					p.Match(MinecraftMetascriptParserNL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(1621)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 182, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(1631)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == MinecraftMetascriptParserT__77 {
			{
				p.SetState(1622)
				p.DensityFn_SplinePoint()
			}
			p.SetState(1626)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 183, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(1623)
						p.Match(MinecraftMetascriptParserNL)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}

				}
				p.SetState(1628)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 183, p.GetParserRuleContext())
				if p.HasError() {
					goto errorExit
				}
			}

			p.SetState(1633)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}

	case 2:
		{
			p.SetState(1634)
			p.Match(MinecraftMetascriptParserT__7)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1635)
			p.Number()
		}
		{
			p.SetState(1636)
			p.Match(MinecraftMetascriptParserT__8)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDensityFn_SplinePointContext is an interface to support dynamic dispatch.
type IDensityFn_SplinePointContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllNumber() []INumberContext
	Number(i int) INumberContext
	DensityFn_Spline() IDensityFn_SplineContext
	ResourceReference() IResourceReferenceContext

	// IsDensityFn_SplinePointContext differentiates from other interfaces.
	IsDensityFn_SplinePointContext()
}

type DensityFn_SplinePointContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDensityFn_SplinePointContext() *DensityFn_SplinePointContext {
	var p = new(DensityFn_SplinePointContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_SplinePoint
	return p
}

func InitEmptyDensityFn_SplinePointContext(p *DensityFn_SplinePointContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_SplinePoint
}

func (*DensityFn_SplinePointContext) IsDensityFn_SplinePointContext() {}

func NewDensityFn_SplinePointContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DensityFn_SplinePointContext {
	var p = new(DensityFn_SplinePointContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_SplinePoint

	return p
}

func (s *DensityFn_SplinePointContext) GetParser() antlr.Parser { return s.parser }

func (s *DensityFn_SplinePointContext) AllNumber() []INumberContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INumberContext); ok {
			len++
		}
	}

	tst := make([]INumberContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INumberContext); ok {
			tst[i] = t.(INumberContext)
			i++
		}
	}

	return tst
}

func (s *DensityFn_SplinePointContext) Number(i int) INumberContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumberContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumberContext)
}

func (s *DensityFn_SplinePointContext) DensityFn_Spline() IDensityFn_SplineContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFn_SplineContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFn_SplineContext)
}

func (s *DensityFn_SplinePointContext) ResourceReference() IResourceReferenceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IResourceReferenceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IResourceReferenceContext)
}

func (s *DensityFn_SplinePointContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DensityFn_SplinePointContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DensityFn_SplinePointContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterDensityFn_SplinePoint(s)
	}
}

func (s *DensityFn_SplinePointContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitDensityFn_SplinePoint(s)
	}
}

func (p *MinecraftMetascriptParser) DensityFn_SplinePoint() (localctx IDensityFn_SplinePointContext) {
	localctx = NewDensityFn_SplinePointContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 186, MinecraftMetascriptParserRULE_densityFn_SplinePoint)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1640)
		p.Match(MinecraftMetascriptParserT__77)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1641)
		p.Match(MinecraftMetascriptParserT__7)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1642)
		p.Number()
	}
	{
		p.SetState(1643)
		p.Match(MinecraftMetascriptParserT__12)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1647)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case MinecraftMetascriptParserInt, MinecraftMetascriptParserFloat:
		{
			p.SetState(1644)
			p.Number()
		}

	case MinecraftMetascriptParserT__76:
		{
			p.SetState(1645)
			p.DensityFn_Spline()
		}

	case MinecraftMetascriptParserIdentifier:
		{
			p.SetState(1646)
			p.ResourceReference()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}
	{
		p.SetState(1649)
		p.Match(MinecraftMetascriptParserT__12)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1650)
		p.Number()
	}
	{
		p.SetState(1651)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDensityFn_ConstantContext is an interface to support dynamic dispatch.
type IDensityFn_ConstantContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Number() INumberContext

	// IsDensityFn_ConstantContext differentiates from other interfaces.
	IsDensityFn_ConstantContext()
}

type DensityFn_ConstantContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDensityFn_ConstantContext() *DensityFn_ConstantContext {
	var p = new(DensityFn_ConstantContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_Constant
	return p
}

func InitEmptyDensityFn_ConstantContext(p *DensityFn_ConstantContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_Constant
}

func (*DensityFn_ConstantContext) IsDensityFn_ConstantContext() {}

func NewDensityFn_ConstantContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DensityFn_ConstantContext {
	var p = new(DensityFn_ConstantContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_Constant

	return p
}

func (s *DensityFn_ConstantContext) GetParser() antlr.Parser { return s.parser }

func (s *DensityFn_ConstantContext) Number() INumberContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INumberContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INumberContext)
}

func (s *DensityFn_ConstantContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DensityFn_ConstantContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DensityFn_ConstantContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterDensityFn_Constant(s)
	}
}

func (s *DensityFn_ConstantContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitDensityFn_Constant(s)
	}
}

func (p *MinecraftMetascriptParser) DensityFn_Constant() (localctx IDensityFn_ConstantContext) {
	localctx = NewDensityFn_ConstantContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 188, MinecraftMetascriptParserRULE_densityFn_Constant)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1653)
		p.Number()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDensityFn_ReferenceContext is an interface to support dynamic dispatch.
type IDensityFn_ReferenceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ResourceReference() IResourceReferenceContext

	// IsDensityFn_ReferenceContext differentiates from other interfaces.
	IsDensityFn_ReferenceContext()
}

type DensityFn_ReferenceContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDensityFn_ReferenceContext() *DensityFn_ReferenceContext {
	var p = new(DensityFn_ReferenceContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_Reference
	return p
}

func InitEmptyDensityFn_ReferenceContext(p *DensityFn_ReferenceContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_Reference
}

func (*DensityFn_ReferenceContext) IsDensityFn_ReferenceContext() {}

func NewDensityFn_ReferenceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DensityFn_ReferenceContext {
	var p = new(DensityFn_ReferenceContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_Reference

	return p
}

func (s *DensityFn_ReferenceContext) GetParser() antlr.Parser { return s.parser }

func (s *DensityFn_ReferenceContext) ResourceReference() IResourceReferenceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IResourceReferenceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IResourceReferenceContext)
}

func (s *DensityFn_ReferenceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DensityFn_ReferenceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DensityFn_ReferenceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterDensityFn_Reference(s)
	}
}

func (s *DensityFn_ReferenceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitDensityFn_Reference(s)
	}
}

func (p *MinecraftMetascriptParser) DensityFn_Reference() (localctx IDensityFn_ReferenceContext) {
	localctx = NewDensityFn_ReferenceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 190, MinecraftMetascriptParserRULE_densityFn_Reference)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1655)
		p.ResourceReference()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IDensityFn_MathContext is an interface to support dynamic dispatch.
type IDensityFn_MathContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DensityFn() IDensityFnContext
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode

	// IsDensityFn_MathContext differentiates from other interfaces.
	IsDensityFn_MathContext()
}

type DensityFn_MathContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDensityFn_MathContext() *DensityFn_MathContext {
	var p = new(DensityFn_MathContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_Math
	return p
}

func InitEmptyDensityFn_MathContext(p *DensityFn_MathContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_Math
}

func (*DensityFn_MathContext) IsDensityFn_MathContext() {}

func NewDensityFn_MathContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DensityFn_MathContext {
	var p = new(DensityFn_MathContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_densityFn_Math

	return p
}

func (s *DensityFn_MathContext) GetParser() antlr.Parser { return s.parser }

func (s *DensityFn_MathContext) DensityFn() IDensityFnContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFnContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFnContext)
}

func (s *DensityFn_MathContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *DensityFn_MathContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *DensityFn_MathContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DensityFn_MathContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DensityFn_MathContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterDensityFn_Math(s)
	}
}

func (s *DensityFn_MathContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitDensityFn_Math(s)
	}
}

func (p *MinecraftMetascriptParser) DensityFn_Math() (localctx IDensityFn_MathContext) {
	localctx = NewDensityFn_MathContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 192, MinecraftMetascriptParserRULE_densityFn_Math)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1657)
		_la = p.GetTokenStream().LA(1)

		if !(_la == MinecraftMetascriptParserT__78 || _la == MinecraftMetascriptParserT__79) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(1661)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 187, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1658)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1663)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 187, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	{
		p.SetState(1664)
		p.DensityFn()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INoiseRouterBlockContext is an interface to support dynamic dispatch.
type INoiseRouterBlockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode
	AllNoiseRouterDeclaration() []INoiseRouterDeclarationContext
	NoiseRouterDeclaration(i int) INoiseRouterDeclarationContext

	// IsNoiseRouterBlockContext differentiates from other interfaces.
	IsNoiseRouterBlockContext()
}

type NoiseRouterBlockContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNoiseRouterBlockContext() *NoiseRouterBlockContext {
	var p = new(NoiseRouterBlockContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_noiseRouterBlock
	return p
}

func InitEmptyNoiseRouterBlockContext(p *NoiseRouterBlockContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_noiseRouterBlock
}

func (*NoiseRouterBlockContext) IsNoiseRouterBlockContext() {}

func NewNoiseRouterBlockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NoiseRouterBlockContext {
	var p = new(NoiseRouterBlockContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_noiseRouterBlock

	return p
}

func (s *NoiseRouterBlockContext) GetParser() antlr.Parser { return s.parser }

func (s *NoiseRouterBlockContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *NoiseRouterBlockContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *NoiseRouterBlockContext) AllNoiseRouterDeclaration() []INoiseRouterDeclarationContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INoiseRouterDeclarationContext); ok {
			len++
		}
	}

	tst := make([]INoiseRouterDeclarationContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INoiseRouterDeclarationContext); ok {
			tst[i] = t.(INoiseRouterDeclarationContext)
			i++
		}
	}

	return tst
}

func (s *NoiseRouterBlockContext) NoiseRouterDeclaration(i int) INoiseRouterDeclarationContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INoiseRouterDeclarationContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INoiseRouterDeclarationContext)
}

func (s *NoiseRouterBlockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NoiseRouterBlockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NoiseRouterBlockContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterNoiseRouterBlock(s)
	}
}

func (s *NoiseRouterBlockContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitNoiseRouterBlock(s)
	}
}

func (p *MinecraftMetascriptParser) NoiseRouterBlock() (localctx INoiseRouterBlockContext) {
	localctx = NewNoiseRouterBlockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 194, MinecraftMetascriptParserRULE_noiseRouterBlock)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1666)
		p.Match(MinecraftMetascriptParserT__80)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1670)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(1667)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1672)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1673)
		p.Match(MinecraftMetascriptParserT__1)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1677)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 189, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1674)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1679)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 189, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1689)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserIdentifier {
		{
			p.SetState(1680)
			p.NoiseRouterDeclaration()
		}
		p.SetState(1684)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 190, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1681)
					p.Match(MinecraftMetascriptParserNL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(1686)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 190, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}

		p.SetState(1691)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(1695)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(1692)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1697)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1698)
		p.Match(MinecraftMetascriptParserT__2)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INoiseRouterDeclarationContext is an interface to support dynamic dispatch.
type INoiseRouterDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Declare() IDeclareContext
	NoiseRouter() INoiseRouterContext

	// IsNoiseRouterDeclarationContext differentiates from other interfaces.
	IsNoiseRouterDeclarationContext()
}

type NoiseRouterDeclarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNoiseRouterDeclarationContext() *NoiseRouterDeclarationContext {
	var p = new(NoiseRouterDeclarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_noiseRouterDeclaration
	return p
}

func InitEmptyNoiseRouterDeclarationContext(p *NoiseRouterDeclarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_noiseRouterDeclaration
}

func (*NoiseRouterDeclarationContext) IsNoiseRouterDeclarationContext() {}

func NewNoiseRouterDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NoiseRouterDeclarationContext {
	var p = new(NoiseRouterDeclarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_noiseRouterDeclaration

	return p
}

func (s *NoiseRouterDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *NoiseRouterDeclarationContext) Declare() IDeclareContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDeclareContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDeclareContext)
}

func (s *NoiseRouterDeclarationContext) NoiseRouter() INoiseRouterContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INoiseRouterContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INoiseRouterContext)
}

func (s *NoiseRouterDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NoiseRouterDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NoiseRouterDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterNoiseRouterDeclaration(s)
	}
}

func (s *NoiseRouterDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitNoiseRouterDeclaration(s)
	}
}

func (p *MinecraftMetascriptParser) NoiseRouterDeclaration() (localctx INoiseRouterDeclarationContext) {
	localctx = NewNoiseRouterDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 196, MinecraftMetascriptParserRULE_noiseRouterDeclaration)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1700)
		p.Declare()
	}
	{
		p.SetState(1701)
		p.NoiseRouter()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INoiseRouterContext is an interface to support dynamic dispatch.
type INoiseRouterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode
	AllNoiseRouter_Builder() []INoiseRouter_BuilderContext
	NoiseRouter_Builder(i int) INoiseRouter_BuilderContext

	// IsNoiseRouterContext differentiates from other interfaces.
	IsNoiseRouterContext()
}

type NoiseRouterContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNoiseRouterContext() *NoiseRouterContext {
	var p = new(NoiseRouterContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_noiseRouter
	return p
}

func InitEmptyNoiseRouterContext(p *NoiseRouterContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_noiseRouter
}

func (*NoiseRouterContext) IsNoiseRouterContext() {}

func NewNoiseRouterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NoiseRouterContext {
	var p = new(NoiseRouterContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_noiseRouter

	return p
}

func (s *NoiseRouterContext) GetParser() antlr.Parser { return s.parser }

func (s *NoiseRouterContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *NoiseRouterContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *NoiseRouterContext) AllNoiseRouter_Builder() []INoiseRouter_BuilderContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INoiseRouter_BuilderContext); ok {
			len++
		}
	}

	tst := make([]INoiseRouter_BuilderContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INoiseRouter_BuilderContext); ok {
			tst[i] = t.(INoiseRouter_BuilderContext)
			i++
		}
	}

	return tst
}

func (s *NoiseRouterContext) NoiseRouter_Builder(i int) INoiseRouter_BuilderContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INoiseRouter_BuilderContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INoiseRouter_BuilderContext)
}

func (s *NoiseRouterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NoiseRouterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NoiseRouterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterNoiseRouter(s)
	}
}

func (s *NoiseRouterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitNoiseRouter(s)
	}
}

func (p *MinecraftMetascriptParser) NoiseRouter() (localctx INoiseRouterContext) {
	localctx = NewNoiseRouterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 198, MinecraftMetascriptParserRULE_noiseRouter)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1703)
		p.Match(MinecraftMetascriptParserT__81)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1707)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(1704)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1709)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1710)
		p.Match(MinecraftMetascriptParserT__7)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1714)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(1711)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1716)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1717)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1721)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 195, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1718)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1723)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 195, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1733)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserT__82 {
		{
			p.SetState(1724)
			p.NoiseRouter_Builder()
		}
		p.SetState(1728)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 196, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1725)
					p.Match(MinecraftMetascriptParserNL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(1730)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 196, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}

		p.SetState(1735)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INoiseRouter_BuilderContext is an interface to support dynamic dispatch.
type INoiseRouter_BuilderContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	DensityFn() IDensityFnContext
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode

	// IsNoiseRouter_BuilderContext differentiates from other interfaces.
	IsNoiseRouter_BuilderContext()
}

type NoiseRouter_BuilderContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNoiseRouter_BuilderContext() *NoiseRouter_BuilderContext {
	var p = new(NoiseRouter_BuilderContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_noiseRouter_Builder
	return p
}

func InitEmptyNoiseRouter_BuilderContext(p *NoiseRouter_BuilderContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_noiseRouter_Builder
}

func (*NoiseRouter_BuilderContext) IsNoiseRouter_BuilderContext() {}

func NewNoiseRouter_BuilderContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NoiseRouter_BuilderContext {
	var p = new(NoiseRouter_BuilderContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_noiseRouter_Builder

	return p
}

func (s *NoiseRouter_BuilderContext) GetParser() antlr.Parser { return s.parser }

func (s *NoiseRouter_BuilderContext) DensityFn() IDensityFnContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDensityFnContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDensityFnContext)
}

func (s *NoiseRouter_BuilderContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *NoiseRouter_BuilderContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *NoiseRouter_BuilderContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NoiseRouter_BuilderContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NoiseRouter_BuilderContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterNoiseRouter_Builder(s)
	}
}

func (s *NoiseRouter_BuilderContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitNoiseRouter_Builder(s)
	}
}

func (p *MinecraftMetascriptParser) NoiseRouter_Builder() (localctx INoiseRouter_BuilderContext) {
	localctx = NewNoiseRouter_BuilderContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 200, MinecraftMetascriptParserRULE_noiseRouter_Builder)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1736)
		p.Match(MinecraftMetascriptParserT__82)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1737)
		_la = p.GetTokenStream().LA(1)

		if !((int64((_la-84)) & ^0x3f) == 0 && ((int64(1)<<(_la-84))&16383) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(1741)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(1738)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1743)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1744)
		p.Match(MinecraftMetascriptParserT__7)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1748)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 199, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1745)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1750)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 199, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	{
		p.SetState(1751)
		p.DensityFn()
	}
	p.SetState(1755)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(1752)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1757)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1758)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INoiseSettingsBlockContext is an interface to support dynamic dispatch.
type INoiseSettingsBlockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode
	AllNoiseSettingsDeclaration() []INoiseSettingsDeclarationContext
	NoiseSettingsDeclaration(i int) INoiseSettingsDeclarationContext

	// IsNoiseSettingsBlockContext differentiates from other interfaces.
	IsNoiseSettingsBlockContext()
}

type NoiseSettingsBlockContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNoiseSettingsBlockContext() *NoiseSettingsBlockContext {
	var p = new(NoiseSettingsBlockContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_noiseSettingsBlock
	return p
}

func InitEmptyNoiseSettingsBlockContext(p *NoiseSettingsBlockContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_noiseSettingsBlock
}

func (*NoiseSettingsBlockContext) IsNoiseSettingsBlockContext() {}

func NewNoiseSettingsBlockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NoiseSettingsBlockContext {
	var p = new(NoiseSettingsBlockContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_noiseSettingsBlock

	return p
}

func (s *NoiseSettingsBlockContext) GetParser() antlr.Parser { return s.parser }

func (s *NoiseSettingsBlockContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *NoiseSettingsBlockContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *NoiseSettingsBlockContext) AllNoiseSettingsDeclaration() []INoiseSettingsDeclarationContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INoiseSettingsDeclarationContext); ok {
			len++
		}
	}

	tst := make([]INoiseSettingsDeclarationContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INoiseSettingsDeclarationContext); ok {
			tst[i] = t.(INoiseSettingsDeclarationContext)
			i++
		}
	}

	return tst
}

func (s *NoiseSettingsBlockContext) NoiseSettingsDeclaration(i int) INoiseSettingsDeclarationContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INoiseSettingsDeclarationContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INoiseSettingsDeclarationContext)
}

func (s *NoiseSettingsBlockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NoiseSettingsBlockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NoiseSettingsBlockContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterNoiseSettingsBlock(s)
	}
}

func (s *NoiseSettingsBlockContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitNoiseSettingsBlock(s)
	}
}

func (p *MinecraftMetascriptParser) NoiseSettingsBlock() (localctx INoiseSettingsBlockContext) {
	localctx = NewNoiseSettingsBlockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 202, MinecraftMetascriptParserRULE_noiseSettingsBlock)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1760)
		p.Match(MinecraftMetascriptParserT__97)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1764)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(1761)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1766)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1767)
		p.Match(MinecraftMetascriptParserT__1)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1771)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 202, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1768)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1773)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 202, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1783)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserIdentifier {
		{
			p.SetState(1774)
			p.NoiseSettingsDeclaration()
		}
		p.SetState(1778)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 203, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1775)
					p.Match(MinecraftMetascriptParserNL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(1780)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 203, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}

		p.SetState(1785)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(1789)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(1786)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1791)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1792)
		p.Match(MinecraftMetascriptParserT__2)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INoiseSettingsDeclarationContext is an interface to support dynamic dispatch.
type INoiseSettingsDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Declare() IDeclareContext
	NoiseSettings() INoiseSettingsContext

	// IsNoiseSettingsDeclarationContext differentiates from other interfaces.
	IsNoiseSettingsDeclarationContext()
}

type NoiseSettingsDeclarationContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNoiseSettingsDeclarationContext() *NoiseSettingsDeclarationContext {
	var p = new(NoiseSettingsDeclarationContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_noiseSettingsDeclaration
	return p
}

func InitEmptyNoiseSettingsDeclarationContext(p *NoiseSettingsDeclarationContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_noiseSettingsDeclaration
}

func (*NoiseSettingsDeclarationContext) IsNoiseSettingsDeclarationContext() {}

func NewNoiseSettingsDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NoiseSettingsDeclarationContext {
	var p = new(NoiseSettingsDeclarationContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_noiseSettingsDeclaration

	return p
}

func (s *NoiseSettingsDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *NoiseSettingsDeclarationContext) Declare() IDeclareContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IDeclareContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IDeclareContext)
}

func (s *NoiseSettingsDeclarationContext) NoiseSettings() INoiseSettingsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INoiseSettingsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INoiseSettingsContext)
}

func (s *NoiseSettingsDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NoiseSettingsDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NoiseSettingsDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterNoiseSettingsDeclaration(s)
	}
}

func (s *NoiseSettingsDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitNoiseSettingsDeclaration(s)
	}
}

func (p *MinecraftMetascriptParser) NoiseSettingsDeclaration() (localctx INoiseSettingsDeclarationContext) {
	localctx = NewNoiseSettingsDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 204, MinecraftMetascriptParserRULE_noiseSettingsDeclaration)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1794)
		p.Declare()
	}
	{
		p.SetState(1795)
		p.NoiseSettings()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INoiseSettingsContext is an interface to support dynamic dispatch.
type INoiseSettingsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode
	AllNoiseSettings_Builder() []INoiseSettings_BuilderContext
	NoiseSettings_Builder(i int) INoiseSettings_BuilderContext

	// IsNoiseSettingsContext differentiates from other interfaces.
	IsNoiseSettingsContext()
}

type NoiseSettingsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNoiseSettingsContext() *NoiseSettingsContext {
	var p = new(NoiseSettingsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_noiseSettings
	return p
}

func InitEmptyNoiseSettingsContext(p *NoiseSettingsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_noiseSettings
}

func (*NoiseSettingsContext) IsNoiseSettingsContext() {}

func NewNoiseSettingsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NoiseSettingsContext {
	var p = new(NoiseSettingsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_noiseSettings

	return p
}

func (s *NoiseSettingsContext) GetParser() antlr.Parser { return s.parser }

func (s *NoiseSettingsContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *NoiseSettingsContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *NoiseSettingsContext) AllNoiseSettings_Builder() []INoiseSettings_BuilderContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(INoiseSettings_BuilderContext); ok {
			len++
		}
	}

	tst := make([]INoiseSettings_BuilderContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(INoiseSettings_BuilderContext); ok {
			tst[i] = t.(INoiseSettings_BuilderContext)
			i++
		}
	}

	return tst
}

func (s *NoiseSettingsContext) NoiseSettings_Builder(i int) INoiseSettings_BuilderContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INoiseSettings_BuilderContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(INoiseSettings_BuilderContext)
}

func (s *NoiseSettingsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NoiseSettingsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NoiseSettingsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterNoiseSettings(s)
	}
}

func (s *NoiseSettingsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitNoiseSettings(s)
	}
}

func (p *MinecraftMetascriptParser) NoiseSettings() (localctx INoiseSettingsContext) {
	localctx = NewNoiseSettingsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 206, MinecraftMetascriptParserRULE_noiseSettings)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1797)
		p.Match(MinecraftMetascriptParserT__97)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1801)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(1798)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1803)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1804)
		p.Match(MinecraftMetascriptParserT__7)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1808)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 207, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1805)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1810)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 207, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1814)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(1811)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1816)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1817)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1821)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 209, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1818)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1823)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 209, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1833)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for (int64((_la-99)) & ^0x3f) == 0 && ((int64(1)<<(_la-99))&8191) != 0 {
		{
			p.SetState(1824)
			p.NoiseSettings_Builder()
		}
		p.SetState(1828)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 210, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1825)
					p.Match(MinecraftMetascriptParserNL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(1830)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 210, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}

		p.SetState(1835)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// INoiseSettings_BuilderContext is an interface to support dynamic dispatch.
type INoiseSettings_BuilderContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Builder_SeaLevel() IBuilder_SeaLevelContext
	Builder_DisableCreatures() IBuilder_DisableCreaturesContext
	Builder_DisableVeins() IBuilder_DisableVeinsContext
	Builder_DisableAquifers() IBuilder_DisableAquifersContext
	Builder_LegacyRandomSource() IBuilder_LegacyRandomSourceContext
	Builder_DefaultBlock() IBuilder_DefaultBlockContext
	Builder_DefaultFluid() IBuilder_DefaultFluidContext
	Builder_SpawnTarget() IBuilder_SpawnTargetContext
	Builder_MinY() IBuilder_MinYContext
	Builder_Height() IBuilder_HeightContext
	Builder_NoiseSize() IBuilder_NoiseSizeContext
	Builder_NoiseRouter() IBuilder_NoiseRouterContext
	Builder_SurfaceRule() IBuilder_SurfaceRuleContext

	// IsNoiseSettings_BuilderContext differentiates from other interfaces.
	IsNoiseSettings_BuilderContext()
}

type NoiseSettings_BuilderContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNoiseSettings_BuilderContext() *NoiseSettings_BuilderContext {
	var p = new(NoiseSettings_BuilderContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_noiseSettings_Builder
	return p
}

func InitEmptyNoiseSettings_BuilderContext(p *NoiseSettings_BuilderContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_noiseSettings_Builder
}

func (*NoiseSettings_BuilderContext) IsNoiseSettings_BuilderContext() {}

func NewNoiseSettings_BuilderContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NoiseSettings_BuilderContext {
	var p = new(NoiseSettings_BuilderContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_noiseSettings_Builder

	return p
}

func (s *NoiseSettings_BuilderContext) GetParser() antlr.Parser { return s.parser }

func (s *NoiseSettings_BuilderContext) Builder_SeaLevel() IBuilder_SeaLevelContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_SeaLevelContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_SeaLevelContext)
}

func (s *NoiseSettings_BuilderContext) Builder_DisableCreatures() IBuilder_DisableCreaturesContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_DisableCreaturesContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_DisableCreaturesContext)
}

func (s *NoiseSettings_BuilderContext) Builder_DisableVeins() IBuilder_DisableVeinsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_DisableVeinsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_DisableVeinsContext)
}

func (s *NoiseSettings_BuilderContext) Builder_DisableAquifers() IBuilder_DisableAquifersContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_DisableAquifersContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_DisableAquifersContext)
}

func (s *NoiseSettings_BuilderContext) Builder_LegacyRandomSource() IBuilder_LegacyRandomSourceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_LegacyRandomSourceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_LegacyRandomSourceContext)
}

func (s *NoiseSettings_BuilderContext) Builder_DefaultBlock() IBuilder_DefaultBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_DefaultBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_DefaultBlockContext)
}

func (s *NoiseSettings_BuilderContext) Builder_DefaultFluid() IBuilder_DefaultFluidContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_DefaultFluidContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_DefaultFluidContext)
}

func (s *NoiseSettings_BuilderContext) Builder_SpawnTarget() IBuilder_SpawnTargetContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_SpawnTargetContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_SpawnTargetContext)
}

func (s *NoiseSettings_BuilderContext) Builder_MinY() IBuilder_MinYContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_MinYContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_MinYContext)
}

func (s *NoiseSettings_BuilderContext) Builder_Height() IBuilder_HeightContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_HeightContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_HeightContext)
}

func (s *NoiseSettings_BuilderContext) Builder_NoiseSize() IBuilder_NoiseSizeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_NoiseSizeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_NoiseSizeContext)
}

func (s *NoiseSettings_BuilderContext) Builder_NoiseRouter() IBuilder_NoiseRouterContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_NoiseRouterContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_NoiseRouterContext)
}

func (s *NoiseSettings_BuilderContext) Builder_SurfaceRule() IBuilder_SurfaceRuleContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBuilder_SurfaceRuleContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBuilder_SurfaceRuleContext)
}

func (s *NoiseSettings_BuilderContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NoiseSettings_BuilderContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NoiseSettings_BuilderContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterNoiseSettings_Builder(s)
	}
}

func (s *NoiseSettings_BuilderContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitNoiseSettings_Builder(s)
	}
}

func (p *MinecraftMetascriptParser) NoiseSettings_Builder() (localctx INoiseSettings_BuilderContext) {
	localctx = NewNoiseSettings_BuilderContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 208, MinecraftMetascriptParserRULE_noiseSettings_Builder)
	p.SetState(1849)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case MinecraftMetascriptParserT__100:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1836)
			p.Builder_SeaLevel()
		}

	case MinecraftMetascriptParserT__101:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1837)
			p.Builder_DisableCreatures()
		}

	case MinecraftMetascriptParserT__102:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1838)
			p.Builder_DisableVeins()
		}

	case MinecraftMetascriptParserT__103:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1839)
			p.Builder_DisableAquifers()
		}

	case MinecraftMetascriptParserT__104:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1840)
			p.Builder_LegacyRandomSource()
		}

	case MinecraftMetascriptParserT__105:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1841)
			p.Builder_DefaultBlock()
		}

	case MinecraftMetascriptParserT__106:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1842)
			p.Builder_DefaultFluid()
		}

	case MinecraftMetascriptParserT__107:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1843)
			p.Builder_SpawnTarget()
		}

	case MinecraftMetascriptParserT__108:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(1844)
			p.Builder_MinY()
		}

	case MinecraftMetascriptParserT__109:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(1845)
			p.Builder_Height()
		}

	case MinecraftMetascriptParserT__98:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(1846)
			p.Builder_NoiseSize()
		}

	case MinecraftMetascriptParserT__99:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(1847)
			p.Builder_NoiseRouter()
		}

	case MinecraftMetascriptParserT__110:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(1848)
			p.Builder_SurfaceRule()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBuilder_NoiseSizeContext is an interface to support dynamic dispatch.
type IBuilder_NoiseSizeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllInt() []antlr.TerminalNode
	Int(i int) antlr.TerminalNode
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode

	// IsBuilder_NoiseSizeContext differentiates from other interfaces.
	IsBuilder_NoiseSizeContext()
}

type Builder_NoiseSizeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBuilder_NoiseSizeContext() *Builder_NoiseSizeContext {
	var p = new(Builder_NoiseSizeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_NoiseSize
	return p
}

func InitEmptyBuilder_NoiseSizeContext(p *Builder_NoiseSizeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_NoiseSize
}

func (*Builder_NoiseSizeContext) IsBuilder_NoiseSizeContext() {}

func NewBuilder_NoiseSizeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Builder_NoiseSizeContext {
	var p = new(Builder_NoiseSizeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_NoiseSize

	return p
}

func (s *Builder_NoiseSizeContext) GetParser() antlr.Parser { return s.parser }

func (s *Builder_NoiseSizeContext) AllInt() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserInt)
}

func (s *Builder_NoiseSizeContext) Int(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserInt, i)
}

func (s *Builder_NoiseSizeContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *Builder_NoiseSizeContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *Builder_NoiseSizeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Builder_NoiseSizeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Builder_NoiseSizeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterBuilder_NoiseSize(s)
	}
}

func (s *Builder_NoiseSizeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitBuilder_NoiseSize(s)
	}
}

func (p *MinecraftMetascriptParser) Builder_NoiseSize() (localctx IBuilder_NoiseSizeContext) {
	localctx = NewBuilder_NoiseSizeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 210, MinecraftMetascriptParserRULE_builder_NoiseSize)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1851)
		p.Match(MinecraftMetascriptParserT__98)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1852)
		p.Match(MinecraftMetascriptParserT__7)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1856)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(1853)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1858)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1859)
		p.Match(MinecraftMetascriptParserInt)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1863)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(1860)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1865)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1866)
		p.Match(MinecraftMetascriptParserT__12)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1870)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(1867)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1872)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1873)
		p.Match(MinecraftMetascriptParserInt)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1877)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(1874)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1879)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1880)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBuilder_NoiseRouterContext is an interface to support dynamic dispatch.
type IBuilder_NoiseRouterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	NoiseRouter() INoiseRouterContext
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode

	// IsBuilder_NoiseRouterContext differentiates from other interfaces.
	IsBuilder_NoiseRouterContext()
}

type Builder_NoiseRouterContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBuilder_NoiseRouterContext() *Builder_NoiseRouterContext {
	var p = new(Builder_NoiseRouterContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_NoiseRouter
	return p
}

func InitEmptyBuilder_NoiseRouterContext(p *Builder_NoiseRouterContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_NoiseRouter
}

func (*Builder_NoiseRouterContext) IsBuilder_NoiseRouterContext() {}

func NewBuilder_NoiseRouterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Builder_NoiseRouterContext {
	var p = new(Builder_NoiseRouterContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_NoiseRouter

	return p
}

func (s *Builder_NoiseRouterContext) GetParser() antlr.Parser { return s.parser }

func (s *Builder_NoiseRouterContext) NoiseRouter() INoiseRouterContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(INoiseRouterContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(INoiseRouterContext)
}

func (s *Builder_NoiseRouterContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *Builder_NoiseRouterContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *Builder_NoiseRouterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Builder_NoiseRouterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Builder_NoiseRouterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterBuilder_NoiseRouter(s)
	}
}

func (s *Builder_NoiseRouterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitBuilder_NoiseRouter(s)
	}
}

func (p *MinecraftMetascriptParser) Builder_NoiseRouter() (localctx IBuilder_NoiseRouterContext) {
	localctx = NewBuilder_NoiseRouterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 212, MinecraftMetascriptParserRULE_builder_NoiseRouter)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1882)
		p.Match(MinecraftMetascriptParserT__99)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1883)
		p.Match(MinecraftMetascriptParserT__7)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1887)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(1884)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1889)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1890)
		p.NoiseRouter()
	}
	p.SetState(1894)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(1891)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1896)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1897)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBuilder_SeaLevelContext is an interface to support dynamic dispatch.
type IBuilder_SeaLevelContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Int() antlr.TerminalNode
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode

	// IsBuilder_SeaLevelContext differentiates from other interfaces.
	IsBuilder_SeaLevelContext()
}

type Builder_SeaLevelContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBuilder_SeaLevelContext() *Builder_SeaLevelContext {
	var p = new(Builder_SeaLevelContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_SeaLevel
	return p
}

func InitEmptyBuilder_SeaLevelContext(p *Builder_SeaLevelContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_SeaLevel
}

func (*Builder_SeaLevelContext) IsBuilder_SeaLevelContext() {}

func NewBuilder_SeaLevelContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Builder_SeaLevelContext {
	var p = new(Builder_SeaLevelContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_SeaLevel

	return p
}

func (s *Builder_SeaLevelContext) GetParser() antlr.Parser { return s.parser }

func (s *Builder_SeaLevelContext) Int() antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserInt, 0)
}

func (s *Builder_SeaLevelContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *Builder_SeaLevelContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *Builder_SeaLevelContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Builder_SeaLevelContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Builder_SeaLevelContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterBuilder_SeaLevel(s)
	}
}

func (s *Builder_SeaLevelContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitBuilder_SeaLevel(s)
	}
}

func (p *MinecraftMetascriptParser) Builder_SeaLevel() (localctx IBuilder_SeaLevelContext) {
	localctx = NewBuilder_SeaLevelContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 214, MinecraftMetascriptParserRULE_builder_SeaLevel)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1899)
		p.Match(MinecraftMetascriptParserT__100)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1900)
		p.Match(MinecraftMetascriptParserT__7)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1904)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(1901)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1906)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1907)
		p.Match(MinecraftMetascriptParserInt)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1911)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(1908)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1913)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1914)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBuilder_DisableCreaturesContext is an interface to support dynamic dispatch.
type IBuilder_DisableCreaturesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode

	// IsBuilder_DisableCreaturesContext differentiates from other interfaces.
	IsBuilder_DisableCreaturesContext()
}

type Builder_DisableCreaturesContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBuilder_DisableCreaturesContext() *Builder_DisableCreaturesContext {
	var p = new(Builder_DisableCreaturesContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_DisableCreatures
	return p
}

func InitEmptyBuilder_DisableCreaturesContext(p *Builder_DisableCreaturesContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_DisableCreatures
}

func (*Builder_DisableCreaturesContext) IsBuilder_DisableCreaturesContext() {}

func NewBuilder_DisableCreaturesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Builder_DisableCreaturesContext {
	var p = new(Builder_DisableCreaturesContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_DisableCreatures

	return p
}

func (s *Builder_DisableCreaturesContext) GetParser() antlr.Parser { return s.parser }

func (s *Builder_DisableCreaturesContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *Builder_DisableCreaturesContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *Builder_DisableCreaturesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Builder_DisableCreaturesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Builder_DisableCreaturesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterBuilder_DisableCreatures(s)
	}
}

func (s *Builder_DisableCreaturesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitBuilder_DisableCreatures(s)
	}
}

func (p *MinecraftMetascriptParser) Builder_DisableCreatures() (localctx IBuilder_DisableCreaturesContext) {
	localctx = NewBuilder_DisableCreaturesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 216, MinecraftMetascriptParserRULE_builder_DisableCreatures)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1916)
		p.Match(MinecraftMetascriptParserT__101)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1917)
		p.Match(MinecraftMetascriptParserT__7)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1921)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 221, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1918)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1923)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 221, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1927)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(1924)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1929)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1930)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBuilder_DisableVeinsContext is an interface to support dynamic dispatch.
type IBuilder_DisableVeinsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode

	// IsBuilder_DisableVeinsContext differentiates from other interfaces.
	IsBuilder_DisableVeinsContext()
}

type Builder_DisableVeinsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBuilder_DisableVeinsContext() *Builder_DisableVeinsContext {
	var p = new(Builder_DisableVeinsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_DisableVeins
	return p
}

func InitEmptyBuilder_DisableVeinsContext(p *Builder_DisableVeinsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_DisableVeins
}

func (*Builder_DisableVeinsContext) IsBuilder_DisableVeinsContext() {}

func NewBuilder_DisableVeinsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Builder_DisableVeinsContext {
	var p = new(Builder_DisableVeinsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_DisableVeins

	return p
}

func (s *Builder_DisableVeinsContext) GetParser() antlr.Parser { return s.parser }

func (s *Builder_DisableVeinsContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *Builder_DisableVeinsContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *Builder_DisableVeinsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Builder_DisableVeinsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Builder_DisableVeinsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterBuilder_DisableVeins(s)
	}
}

func (s *Builder_DisableVeinsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitBuilder_DisableVeins(s)
	}
}

func (p *MinecraftMetascriptParser) Builder_DisableVeins() (localctx IBuilder_DisableVeinsContext) {
	localctx = NewBuilder_DisableVeinsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 218, MinecraftMetascriptParserRULE_builder_DisableVeins)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1932)
		p.Match(MinecraftMetascriptParserT__102)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1933)
		p.Match(MinecraftMetascriptParserT__7)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1937)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 223, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1934)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1939)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 223, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1943)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(1940)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1945)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1946)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBuilder_DisableAquifersContext is an interface to support dynamic dispatch.
type IBuilder_DisableAquifersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode

	// IsBuilder_DisableAquifersContext differentiates from other interfaces.
	IsBuilder_DisableAquifersContext()
}

type Builder_DisableAquifersContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBuilder_DisableAquifersContext() *Builder_DisableAquifersContext {
	var p = new(Builder_DisableAquifersContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_DisableAquifers
	return p
}

func InitEmptyBuilder_DisableAquifersContext(p *Builder_DisableAquifersContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_DisableAquifers
}

func (*Builder_DisableAquifersContext) IsBuilder_DisableAquifersContext() {}

func NewBuilder_DisableAquifersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Builder_DisableAquifersContext {
	var p = new(Builder_DisableAquifersContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_DisableAquifers

	return p
}

func (s *Builder_DisableAquifersContext) GetParser() antlr.Parser { return s.parser }

func (s *Builder_DisableAquifersContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *Builder_DisableAquifersContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *Builder_DisableAquifersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Builder_DisableAquifersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Builder_DisableAquifersContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterBuilder_DisableAquifers(s)
	}
}

func (s *Builder_DisableAquifersContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitBuilder_DisableAquifers(s)
	}
}

func (p *MinecraftMetascriptParser) Builder_DisableAquifers() (localctx IBuilder_DisableAquifersContext) {
	localctx = NewBuilder_DisableAquifersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 220, MinecraftMetascriptParserRULE_builder_DisableAquifers)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1948)
		p.Match(MinecraftMetascriptParserT__103)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1949)
		p.Match(MinecraftMetascriptParserT__7)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1953)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 225, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1950)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1955)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 225, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1959)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(1956)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1961)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1962)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBuilder_LegacyRandomSourceContext is an interface to support dynamic dispatch.
type IBuilder_LegacyRandomSourceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode

	// IsBuilder_LegacyRandomSourceContext differentiates from other interfaces.
	IsBuilder_LegacyRandomSourceContext()
}

type Builder_LegacyRandomSourceContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBuilder_LegacyRandomSourceContext() *Builder_LegacyRandomSourceContext {
	var p = new(Builder_LegacyRandomSourceContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_LegacyRandomSource
	return p
}

func InitEmptyBuilder_LegacyRandomSourceContext(p *Builder_LegacyRandomSourceContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_LegacyRandomSource
}

func (*Builder_LegacyRandomSourceContext) IsBuilder_LegacyRandomSourceContext() {}

func NewBuilder_LegacyRandomSourceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Builder_LegacyRandomSourceContext {
	var p = new(Builder_LegacyRandomSourceContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_LegacyRandomSource

	return p
}

func (s *Builder_LegacyRandomSourceContext) GetParser() antlr.Parser { return s.parser }

func (s *Builder_LegacyRandomSourceContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *Builder_LegacyRandomSourceContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *Builder_LegacyRandomSourceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Builder_LegacyRandomSourceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Builder_LegacyRandomSourceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterBuilder_LegacyRandomSource(s)
	}
}

func (s *Builder_LegacyRandomSourceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitBuilder_LegacyRandomSource(s)
	}
}

func (p *MinecraftMetascriptParser) Builder_LegacyRandomSource() (localctx IBuilder_LegacyRandomSourceContext) {
	localctx = NewBuilder_LegacyRandomSourceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 222, MinecraftMetascriptParserRULE_builder_LegacyRandomSource)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1964)
		p.Match(MinecraftMetascriptParserT__104)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1965)
		p.Match(MinecraftMetascriptParserT__7)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1969)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 227, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1966)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(1971)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 227, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1975)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(1972)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1977)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1978)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBuilder_DefaultBlockContext is an interface to support dynamic dispatch.
type IBuilder_DefaultBlockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	BlockState() IBlockStateContext
	ResourceReference() IResourceReferenceContext
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode

	// IsBuilder_DefaultBlockContext differentiates from other interfaces.
	IsBuilder_DefaultBlockContext()
}

type Builder_DefaultBlockContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBuilder_DefaultBlockContext() *Builder_DefaultBlockContext {
	var p = new(Builder_DefaultBlockContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_DefaultBlock
	return p
}

func InitEmptyBuilder_DefaultBlockContext(p *Builder_DefaultBlockContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_DefaultBlock
}

func (*Builder_DefaultBlockContext) IsBuilder_DefaultBlockContext() {}

func NewBuilder_DefaultBlockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Builder_DefaultBlockContext {
	var p = new(Builder_DefaultBlockContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_DefaultBlock

	return p
}

func (s *Builder_DefaultBlockContext) GetParser() antlr.Parser { return s.parser }

func (s *Builder_DefaultBlockContext) BlockState() IBlockStateContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockStateContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockStateContext)
}

func (s *Builder_DefaultBlockContext) ResourceReference() IResourceReferenceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IResourceReferenceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IResourceReferenceContext)
}

func (s *Builder_DefaultBlockContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *Builder_DefaultBlockContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *Builder_DefaultBlockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Builder_DefaultBlockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Builder_DefaultBlockContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterBuilder_DefaultBlock(s)
	}
}

func (s *Builder_DefaultBlockContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitBuilder_DefaultBlock(s)
	}
}

func (p *MinecraftMetascriptParser) Builder_DefaultBlock() (localctx IBuilder_DefaultBlockContext) {
	localctx = NewBuilder_DefaultBlockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 224, MinecraftMetascriptParserRULE_builder_DefaultBlock)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1980)
		p.Match(MinecraftMetascriptParserT__105)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1981)
		p.Match(MinecraftMetascriptParserT__7)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1985)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(1982)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1987)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(1990)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case MinecraftMetascriptParserT__22:
		{
			p.SetState(1988)
			p.BlockState()
		}

	case MinecraftMetascriptParserIdentifier:
		{
			p.SetState(1989)
			p.ResourceReference()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}
	p.SetState(1995)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(1992)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(1997)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1998)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBuilder_DefaultFluidContext is an interface to support dynamic dispatch.
type IBuilder_DefaultFluidContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	BlockState() IBlockStateContext
	ResourceReference() IResourceReferenceContext
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode

	// IsBuilder_DefaultFluidContext differentiates from other interfaces.
	IsBuilder_DefaultFluidContext()
}

type Builder_DefaultFluidContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBuilder_DefaultFluidContext() *Builder_DefaultFluidContext {
	var p = new(Builder_DefaultFluidContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_DefaultFluid
	return p
}

func InitEmptyBuilder_DefaultFluidContext(p *Builder_DefaultFluidContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_DefaultFluid
}

func (*Builder_DefaultFluidContext) IsBuilder_DefaultFluidContext() {}

func NewBuilder_DefaultFluidContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Builder_DefaultFluidContext {
	var p = new(Builder_DefaultFluidContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_DefaultFluid

	return p
}

func (s *Builder_DefaultFluidContext) GetParser() antlr.Parser { return s.parser }

func (s *Builder_DefaultFluidContext) BlockState() IBlockStateContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockStateContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockStateContext)
}

func (s *Builder_DefaultFluidContext) ResourceReference() IResourceReferenceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IResourceReferenceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IResourceReferenceContext)
}

func (s *Builder_DefaultFluidContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *Builder_DefaultFluidContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *Builder_DefaultFluidContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Builder_DefaultFluidContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Builder_DefaultFluidContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterBuilder_DefaultFluid(s)
	}
}

func (s *Builder_DefaultFluidContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitBuilder_DefaultFluid(s)
	}
}

func (p *MinecraftMetascriptParser) Builder_DefaultFluid() (localctx IBuilder_DefaultFluidContext) {
	localctx = NewBuilder_DefaultFluidContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 226, MinecraftMetascriptParserRULE_builder_DefaultFluid)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2000)
		p.Match(MinecraftMetascriptParserT__106)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2001)
		p.Match(MinecraftMetascriptParserT__7)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(2005)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(2002)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(2007)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(2010)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case MinecraftMetascriptParserT__22:
		{
			p.SetState(2008)
			p.BlockState()
		}

	case MinecraftMetascriptParserIdentifier:
		{
			p.SetState(2009)
			p.ResourceReference()
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}
	p.SetState(2015)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(2012)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(2017)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2018)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBuilder_SpawnTargetContext is an interface to support dynamic dispatch.
type IBuilder_SpawnTargetContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode

	// IsBuilder_SpawnTargetContext differentiates from other interfaces.
	IsBuilder_SpawnTargetContext()
}

type Builder_SpawnTargetContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBuilder_SpawnTargetContext() *Builder_SpawnTargetContext {
	var p = new(Builder_SpawnTargetContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_SpawnTarget
	return p
}

func InitEmptyBuilder_SpawnTargetContext(p *Builder_SpawnTargetContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_SpawnTarget
}

func (*Builder_SpawnTargetContext) IsBuilder_SpawnTargetContext() {}

func NewBuilder_SpawnTargetContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Builder_SpawnTargetContext {
	var p = new(Builder_SpawnTargetContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_SpawnTarget

	return p
}

func (s *Builder_SpawnTargetContext) GetParser() antlr.Parser { return s.parser }

func (s *Builder_SpawnTargetContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *Builder_SpawnTargetContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *Builder_SpawnTargetContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Builder_SpawnTargetContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Builder_SpawnTargetContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterBuilder_SpawnTarget(s)
	}
}

func (s *Builder_SpawnTargetContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitBuilder_SpawnTarget(s)
	}
}

func (p *MinecraftMetascriptParser) Builder_SpawnTarget() (localctx IBuilder_SpawnTargetContext) {
	localctx = NewBuilder_SpawnTargetContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 228, MinecraftMetascriptParserRULE_builder_SpawnTarget)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2020)
		p.Match(MinecraftMetascriptParserT__107)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2021)
		p.Match(MinecraftMetascriptParserT__7)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(2025)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 235, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2022)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(2027)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 235, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(2031)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(2028)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(2033)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2034)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBuilder_MinYContext is an interface to support dynamic dispatch.
type IBuilder_MinYContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Int() antlr.TerminalNode
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode

	// IsBuilder_MinYContext differentiates from other interfaces.
	IsBuilder_MinYContext()
}

type Builder_MinYContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBuilder_MinYContext() *Builder_MinYContext {
	var p = new(Builder_MinYContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_MinY
	return p
}

func InitEmptyBuilder_MinYContext(p *Builder_MinYContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_MinY
}

func (*Builder_MinYContext) IsBuilder_MinYContext() {}

func NewBuilder_MinYContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Builder_MinYContext {
	var p = new(Builder_MinYContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_MinY

	return p
}

func (s *Builder_MinYContext) GetParser() antlr.Parser { return s.parser }

func (s *Builder_MinYContext) Int() antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserInt, 0)
}

func (s *Builder_MinYContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *Builder_MinYContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *Builder_MinYContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Builder_MinYContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Builder_MinYContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterBuilder_MinY(s)
	}
}

func (s *Builder_MinYContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitBuilder_MinY(s)
	}
}

func (p *MinecraftMetascriptParser) Builder_MinY() (localctx IBuilder_MinYContext) {
	localctx = NewBuilder_MinYContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 230, MinecraftMetascriptParserRULE_builder_MinY)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2036)
		p.Match(MinecraftMetascriptParserT__108)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2037)
		p.Match(MinecraftMetascriptParserT__7)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(2041)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(2038)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(2043)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2044)
		p.Match(MinecraftMetascriptParserInt)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(2048)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(2045)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(2050)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2051)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBuilder_HeightContext is an interface to support dynamic dispatch.
type IBuilder_HeightContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Int() antlr.TerminalNode
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode

	// IsBuilder_HeightContext differentiates from other interfaces.
	IsBuilder_HeightContext()
}

type Builder_HeightContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBuilder_HeightContext() *Builder_HeightContext {
	var p = new(Builder_HeightContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Height
	return p
}

func InitEmptyBuilder_HeightContext(p *Builder_HeightContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Height
}

func (*Builder_HeightContext) IsBuilder_HeightContext() {}

func NewBuilder_HeightContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Builder_HeightContext {
	var p = new(Builder_HeightContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_Height

	return p
}

func (s *Builder_HeightContext) GetParser() antlr.Parser { return s.parser }

func (s *Builder_HeightContext) Int() antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserInt, 0)
}

func (s *Builder_HeightContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *Builder_HeightContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *Builder_HeightContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Builder_HeightContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Builder_HeightContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterBuilder_Height(s)
	}
}

func (s *Builder_HeightContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitBuilder_Height(s)
	}
}

func (p *MinecraftMetascriptParser) Builder_Height() (localctx IBuilder_HeightContext) {
	localctx = NewBuilder_HeightContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 232, MinecraftMetascriptParserRULE_builder_Height)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2053)
		p.Match(MinecraftMetascriptParserT__109)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2054)
		p.Match(MinecraftMetascriptParserT__7)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(2058)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(2055)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(2060)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2061)
		p.Match(MinecraftMetascriptParserInt)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(2065)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(2062)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(2067)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2068)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBuilder_SurfaceRuleContext is an interface to support dynamic dispatch.
type IBuilder_SurfaceRuleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SurfaceRule() ISurfaceRuleContext
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode

	// IsBuilder_SurfaceRuleContext differentiates from other interfaces.
	IsBuilder_SurfaceRuleContext()
}

type Builder_SurfaceRuleContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBuilder_SurfaceRuleContext() *Builder_SurfaceRuleContext {
	var p = new(Builder_SurfaceRuleContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_SurfaceRule
	return p
}

func InitEmptyBuilder_SurfaceRuleContext(p *Builder_SurfaceRuleContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_SurfaceRule
}

func (*Builder_SurfaceRuleContext) IsBuilder_SurfaceRuleContext() {}

func NewBuilder_SurfaceRuleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Builder_SurfaceRuleContext {
	var p = new(Builder_SurfaceRuleContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_builder_SurfaceRule

	return p
}

func (s *Builder_SurfaceRuleContext) GetParser() antlr.Parser { return s.parser }

func (s *Builder_SurfaceRuleContext) SurfaceRule() ISurfaceRuleContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISurfaceRuleContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISurfaceRuleContext)
}

func (s *Builder_SurfaceRuleContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *Builder_SurfaceRuleContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *Builder_SurfaceRuleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Builder_SurfaceRuleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Builder_SurfaceRuleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterBuilder_SurfaceRule(s)
	}
}

func (s *Builder_SurfaceRuleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitBuilder_SurfaceRule(s)
	}
}

func (p *MinecraftMetascriptParser) Builder_SurfaceRule() (localctx IBuilder_SurfaceRuleContext) {
	localctx = NewBuilder_SurfaceRuleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 234, MinecraftMetascriptParserRULE_builder_SurfaceRule)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2070)
		p.Match(MinecraftMetascriptParserT__110)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2071)
		p.Match(MinecraftMetascriptParserT__7)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(2075)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(2072)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(2077)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2078)
		p.SurfaceRule()
	}
	p.SetState(2082)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(2079)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(2084)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2085)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBlockStateContext is an interface to support dynamic dispatch.
type IBlockStateContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ResourceReference() IResourceReferenceContext
	AllNL() []antlr.TerminalNode
	NL(i int) antlr.TerminalNode
	AllBlockState_Builder() []IBlockState_BuilderContext
	BlockState_Builder(i int) IBlockState_BuilderContext

	// IsBlockStateContext differentiates from other interfaces.
	IsBlockStateContext()
}

type BlockStateContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBlockStateContext() *BlockStateContext {
	var p = new(BlockStateContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_blockState
	return p
}

func InitEmptyBlockStateContext(p *BlockStateContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_blockState
}

func (*BlockStateContext) IsBlockStateContext() {}

func NewBlockStateContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BlockStateContext {
	var p = new(BlockStateContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_blockState

	return p
}

func (s *BlockStateContext) GetParser() antlr.Parser { return s.parser }

func (s *BlockStateContext) ResourceReference() IResourceReferenceContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IResourceReferenceContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IResourceReferenceContext)
}

func (s *BlockStateContext) AllNL() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserNL)
}

func (s *BlockStateContext) NL(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserNL, i)
}

func (s *BlockStateContext) AllBlockState_Builder() []IBlockState_BuilderContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IBlockState_BuilderContext); ok {
			len++
		}
	}

	tst := make([]IBlockState_BuilderContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IBlockState_BuilderContext); ok {
			tst[i] = t.(IBlockState_BuilderContext)
			i++
		}
	}

	return tst
}

func (s *BlockStateContext) BlockState_Builder(i int) IBlockState_BuilderContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockState_BuilderContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockState_BuilderContext)
}

func (s *BlockStateContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BlockStateContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BlockStateContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterBlockState(s)
	}
}

func (s *BlockStateContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitBlockState(s)
	}
}

func (p *MinecraftMetascriptParser) BlockState() (localctx IBlockStateContext) {
	localctx = NewBlockStateContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 236, MinecraftMetascriptParserRULE_blockState)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2087)
		p.Match(MinecraftMetascriptParserT__22)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(2091)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(2088)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(2093)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2094)
		p.Match(MinecraftMetascriptParserT__7)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(2098)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(2095)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(2100)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2101)
		p.ResourceReference()
	}
	p.SetState(2105)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserNL {
		{
			p.SetState(2102)
			p.Match(MinecraftMetascriptParserNL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

		p.SetState(2107)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(2108)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(2112)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 246, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(2109)
				p.Match(MinecraftMetascriptParserNL)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		p.SetState(2114)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 246, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(2124)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == MinecraftMetascriptParserT__82 {
		{
			p.SetState(2115)
			p.BlockState_Builder()
		}
		p.SetState(2119)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 247, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(2116)
					p.Match(MinecraftMetascriptParserNL)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			}
			p.SetState(2121)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 247, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}

		p.SetState(2126)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBlockState_BuilderContext is an interface to support dynamic dispatch.
type IBlockState_BuilderContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllString_() []antlr.TerminalNode
	String_(i int) antlr.TerminalNode

	// IsBlockState_BuilderContext differentiates from other interfaces.
	IsBlockState_BuilderContext()
}

type BlockState_BuilderContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBlockState_BuilderContext() *BlockState_BuilderContext {
	var p = new(BlockState_BuilderContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_blockState_Builder
	return p
}

func InitEmptyBlockState_BuilderContext(p *BlockState_BuilderContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = MinecraftMetascriptParserRULE_blockState_Builder
}

func (*BlockState_BuilderContext) IsBlockState_BuilderContext() {}

func NewBlockState_BuilderContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BlockState_BuilderContext {
	var p = new(BlockState_BuilderContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = MinecraftMetascriptParserRULE_blockState_Builder

	return p
}

func (s *BlockState_BuilderContext) GetParser() antlr.Parser { return s.parser }

func (s *BlockState_BuilderContext) AllString_() []antlr.TerminalNode {
	return s.GetTokens(MinecraftMetascriptParserString_)
}

func (s *BlockState_BuilderContext) String_(i int) antlr.TerminalNode {
	return s.GetToken(MinecraftMetascriptParserString_, i)
}

func (s *BlockState_BuilderContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BlockState_BuilderContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BlockState_BuilderContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.EnterBlockState_Builder(s)
	}
}

func (s *BlockState_BuilderContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(MinecraftMetascriptListener); ok {
		listenerT.ExitBlockState_Builder(s)
	}
}

func (p *MinecraftMetascriptParser) BlockState_Builder() (localctx IBlockState_BuilderContext) {
	localctx = NewBlockState_BuilderContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 238, MinecraftMetascriptParserRULE_blockState_Builder)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(2127)
		p.Match(MinecraftMetascriptParserT__82)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2128)
		p.Match(MinecraftMetascriptParserT__111)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2129)
		p.Match(MinecraftMetascriptParserT__7)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2130)
		p.Match(MinecraftMetascriptParserString_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2131)
		p.Match(MinecraftMetascriptParserT__12)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2132)
		p.Match(MinecraftMetascriptParserString_)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(2133)
		p.Match(MinecraftMetascriptParserT__8)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}
