// Code generated from ./grammars/MMSLexer.g4 by ANTLR 4.13.2. DO NOT EDIT.

package grammars

import (
	"fmt"
	"github.com/antlr4-go/antlr/v4"
	"sync"
	"unicode"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = sync.Once{}
var _ = unicode.IsLetter

type MMSLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var MMSLexerLexerStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	ChannelNames           []string
	ModeNames              []string
	LiteralNames           []string
	SymbolicNames          []string
	RuleNames              []string
	PredictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func mmslexerLexerInit() {
	staticData := &MMSLexerLexerStaticData
	staticData.ChannelNames = []string{
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	}
	staticData.ModeNames = []string{
		"DEFAULT_MODE",
	}
	staticData.LiteralNames = []string{
		"", "", "", "'surface'", "'rule'", "'condition'", "'sequence'", "'block'",
		"'bandlands'", "'above_preliminary_surface'", "'biome'", "'hole'", "'noise'",
		"'steep'", "'stone_depth'", "'freezing'", "'temperature'", "'vertical_gradient'",
		"'above_water'", "'y_above'", "'floor'", "'ceiling'", "'and'", "'add'",
		"'sub'", "'worldgen'", "'absolute'", "'above_bottom'", "'below_top'",
		"'namespace'", "'if'", "'else'", "'in'", "", "", "'['", "']'", "'{'",
		"'}'", "'('", "')'", "'!'", "','", "':'", "';'",
	}
	staticData.SymbolicNames = []string{
		"", "Int", "Float", "Keyword_Surface", "Keyword_Rule", "Keyword_Condition",
		"Keyword_Sequence", "Keyword_Block", "Keyword_Bandlands", "Keyword_AbovePreliminarySurface",
		"Keyword_Biome", "Keyword_Hole", "Keyword_Noise", "Keyword_Steep", "Keyword_StoneDepth",
		"Keyword_Freezing", "Keyword_Temperature", "Keyword_VerticalGradient",
		"Keyword_AboveWater", "Keyword_YAbove", "Keyword_Floor", "Keyword_Ceiling",
		"Keyword_And", "Keyword_Add", "Keyword_Sub", "Keyword_WorldGen", "Keyword_Absolute",
		"Keyword_AboveBottom", "Keyword_BelowTop", "Keyword_Namespace", "Keyword_If",
		"Keyword_Else", "Keyword_In", "WS", "NL", "SquareOpen", "SquareClose",
		"CurlyOpen", "CurlyClose", "RoundOpen", "RoundClose", "Bang", "Comma",
		"Colon", "SemiColon", "String", "Identifier", "LineComment", "BlockComment",
	}
	staticData.RuleNames = []string{
		"Int", "Float", "Keyword_Surface", "Keyword_Rule", "Keyword_Condition",
		"Keyword_Sequence", "Keyword_Block", "Keyword_Bandlands", "Keyword_AbovePreliminarySurface",
		"Keyword_Biome", "Keyword_Hole", "Keyword_Noise", "Keyword_Steep", "Keyword_StoneDepth",
		"Keyword_Freezing", "Keyword_Temperature", "Keyword_VerticalGradient",
		"Keyword_AboveWater", "Keyword_YAbove", "Keyword_Floor", "Keyword_Ceiling",
		"Keyword_And", "Keyword_Add", "Keyword_Sub", "Keyword_WorldGen", "Keyword_Absolute",
		"Keyword_AboveBottom", "Keyword_BelowTop", "Keyword_Namespace", "Keyword_If",
		"Keyword_Else", "Keyword_In", "WS", "NL", "SquareOpen", "SquareClose",
		"CurlyOpen", "CurlyClose", "RoundOpen", "RoundClose", "Bang", "Comma",
		"Colon", "SemiColon", "String", "Identifier", "LineComment", "BlockComment",
	}
	staticData.PredictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 0, 48, 445, 6, -1, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2,
		4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2,
		10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15,
		7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7,
		20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25,
		2, 26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2,
		31, 7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36,
		7, 36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7,
		41, 2, 42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46,
		2, 47, 7, 47, 1, 0, 3, 0, 99, 8, 0, 1, 0, 4, 0, 102, 8, 0, 11, 0, 12, 0,
		103, 1, 1, 3, 1, 107, 8, 1, 1, 1, 4, 1, 110, 8, 1, 11, 1, 12, 1, 111, 1,
		1, 1, 1, 4, 1, 116, 8, 1, 11, 1, 12, 1, 117, 1, 2, 1, 2, 1, 2, 1, 2, 1,
		2, 1, 2, 1, 2, 1, 2, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 4, 1, 4, 1, 4, 1,
		4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1,
		5, 1, 5, 1, 5, 1, 5, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 7, 1, 7, 1,
		7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 8, 1, 8, 1, 8, 1, 8, 1,
		8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1,
		8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 9, 1, 9, 1,
		9, 1, 9, 1, 9, 1, 9, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 11, 1, 11, 1,
		11, 1, 11, 1, 11, 1, 11, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 13,
		1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1,
		13, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 15,
		1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1,
		15, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16,
		1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 17, 1, 17, 1,
		17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 18,
		1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 19, 1, 19, 1, 19, 1,
		19, 1, 19, 1, 19, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20,
		1, 21, 1, 21, 1, 21, 1, 21, 1, 22, 1, 22, 1, 22, 1, 22, 1, 23, 1, 23, 1,
		23, 1, 23, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24,
		1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 26, 1,
		26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26,
		1, 26, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1,
		27, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28,
		1, 29, 1, 29, 1, 29, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 31, 1, 31, 1,
		31, 1, 32, 4, 32, 377, 8, 32, 11, 32, 12, 32, 378, 1, 32, 1, 32, 1, 33,
		1, 33, 1, 34, 1, 34, 1, 35, 1, 35, 1, 36, 1, 36, 1, 37, 1, 37, 1, 38, 1,
		38, 1, 39, 1, 39, 1, 40, 1, 40, 1, 41, 1, 41, 1, 42, 1, 42, 1, 43, 1, 43,
		1, 44, 1, 44, 5, 44, 407, 8, 44, 10, 44, 12, 44, 410, 9, 44, 1, 44, 1,
		44, 1, 45, 1, 45, 5, 45, 416, 8, 45, 10, 45, 12, 45, 419, 9, 45, 1, 46,
		1, 46, 1, 46, 1, 46, 5, 46, 425, 8, 46, 10, 46, 12, 46, 428, 9, 46, 1,
		46, 1, 46, 1, 47, 1, 47, 1, 47, 1, 47, 5, 47, 436, 8, 47, 10, 47, 12, 47,
		439, 9, 47, 1, 47, 1, 47, 1, 47, 1, 47, 1, 47, 1, 437, 0, 48, 1, 1, 3,
		2, 5, 3, 7, 4, 9, 5, 11, 6, 13, 7, 15, 8, 17, 9, 19, 10, 21, 11, 23, 12,
		25, 13, 27, 14, 29, 15, 31, 16, 33, 17, 35, 18, 37, 19, 39, 20, 41, 21,
		43, 22, 45, 23, 47, 24, 49, 25, 51, 26, 53, 27, 55, 28, 57, 29, 59, 30,
		61, 31, 63, 32, 65, 33, 67, 34, 69, 35, 71, 36, 73, 37, 75, 38, 77, 39,
		79, 40, 81, 41, 83, 42, 85, 43, 87, 44, 89, 45, 91, 46, 93, 47, 95, 48,
		1, 0, 5, 1, 0, 48, 57, 2, 0, 9, 9, 32, 32, 2, 0, 10, 10, 13, 13, 3, 0,
		65, 90, 95, 95, 97, 122, 4, 0, 48, 57, 65, 90, 95, 95, 97, 122, 454, 0,
		1, 1, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 5, 1, 0, 0, 0, 0, 7, 1, 0, 0, 0, 0,
		9, 1, 0, 0, 0, 0, 11, 1, 0, 0, 0, 0, 13, 1, 0, 0, 0, 0, 15, 1, 0, 0, 0,
		0, 17, 1, 0, 0, 0, 0, 19, 1, 0, 0, 0, 0, 21, 1, 0, 0, 0, 0, 23, 1, 0, 0,
		0, 0, 25, 1, 0, 0, 0, 0, 27, 1, 0, 0, 0, 0, 29, 1, 0, 0, 0, 0, 31, 1, 0,
		0, 0, 0, 33, 1, 0, 0, 0, 0, 35, 1, 0, 0, 0, 0, 37, 1, 0, 0, 0, 0, 39, 1,
		0, 0, 0, 0, 41, 1, 0, 0, 0, 0, 43, 1, 0, 0, 0, 0, 45, 1, 0, 0, 0, 0, 47,
		1, 0, 0, 0, 0, 49, 1, 0, 0, 0, 0, 51, 1, 0, 0, 0, 0, 53, 1, 0, 0, 0, 0,
		55, 1, 0, 0, 0, 0, 57, 1, 0, 0, 0, 0, 59, 1, 0, 0, 0, 0, 61, 1, 0, 0, 0,
		0, 63, 1, 0, 0, 0, 0, 65, 1, 0, 0, 0, 0, 67, 1, 0, 0, 0, 0, 69, 1, 0, 0,
		0, 0, 71, 1, 0, 0, 0, 0, 73, 1, 0, 0, 0, 0, 75, 1, 0, 0, 0, 0, 77, 1, 0,
		0, 0, 0, 79, 1, 0, 0, 0, 0, 81, 1, 0, 0, 0, 0, 83, 1, 0, 0, 0, 0, 85, 1,
		0, 0, 0, 0, 87, 1, 0, 0, 0, 0, 89, 1, 0, 0, 0, 0, 91, 1, 0, 0, 0, 0, 93,
		1, 0, 0, 0, 0, 95, 1, 0, 0, 0, 1, 98, 1, 0, 0, 0, 3, 106, 1, 0, 0, 0, 5,
		119, 1, 0, 0, 0, 7, 127, 1, 0, 0, 0, 9, 132, 1, 0, 0, 0, 11, 142, 1, 0,
		0, 0, 13, 151, 1, 0, 0, 0, 15, 157, 1, 0, 0, 0, 17, 167, 1, 0, 0, 0, 19,
		193, 1, 0, 0, 0, 21, 199, 1, 0, 0, 0, 23, 204, 1, 0, 0, 0, 25, 210, 1,
		0, 0, 0, 27, 216, 1, 0, 0, 0, 29, 228, 1, 0, 0, 0, 31, 237, 1, 0, 0, 0,
		33, 249, 1, 0, 0, 0, 35, 267, 1, 0, 0, 0, 37, 279, 1, 0, 0, 0, 39, 287,
		1, 0, 0, 0, 41, 293, 1, 0, 0, 0, 43, 301, 1, 0, 0, 0, 45, 305, 1, 0, 0,
		0, 47, 309, 1, 0, 0, 0, 49, 313, 1, 0, 0, 0, 51, 322, 1, 0, 0, 0, 53, 331,
		1, 0, 0, 0, 55, 344, 1, 0, 0, 0, 57, 354, 1, 0, 0, 0, 59, 364, 1, 0, 0,
		0, 61, 367, 1, 0, 0, 0, 63, 372, 1, 0, 0, 0, 65, 376, 1, 0, 0, 0, 67, 382,
		1, 0, 0, 0, 69, 384, 1, 0, 0, 0, 71, 386, 1, 0, 0, 0, 73, 388, 1, 0, 0,
		0, 75, 390, 1, 0, 0, 0, 77, 392, 1, 0, 0, 0, 79, 394, 1, 0, 0, 0, 81, 396,
		1, 0, 0, 0, 83, 398, 1, 0, 0, 0, 85, 400, 1, 0, 0, 0, 87, 402, 1, 0, 0,
		0, 89, 404, 1, 0, 0, 0, 91, 413, 1, 0, 0, 0, 93, 420, 1, 0, 0, 0, 95, 431,
		1, 0, 0, 0, 97, 99, 5, 45, 0, 0, 98, 97, 1, 0, 0, 0, 98, 99, 1, 0, 0, 0,
		99, 101, 1, 0, 0, 0, 100, 102, 7, 0, 0, 0, 101, 100, 1, 0, 0, 0, 102, 103,
		1, 0, 0, 0, 103, 101, 1, 0, 0, 0, 103, 104, 1, 0, 0, 0, 104, 2, 1, 0, 0,
		0, 105, 107, 5, 45, 0, 0, 106, 105, 1, 0, 0, 0, 106, 107, 1, 0, 0, 0, 107,
		109, 1, 0, 0, 0, 108, 110, 7, 0, 0, 0, 109, 108, 1, 0, 0, 0, 110, 111,
		1, 0, 0, 0, 111, 109, 1, 0, 0, 0, 111, 112, 1, 0, 0, 0, 112, 113, 1, 0,
		0, 0, 113, 115, 5, 46, 0, 0, 114, 116, 7, 0, 0, 0, 115, 114, 1, 0, 0, 0,
		116, 117, 1, 0, 0, 0, 117, 115, 1, 0, 0, 0, 117, 118, 1, 0, 0, 0, 118,
		4, 1, 0, 0, 0, 119, 120, 5, 115, 0, 0, 120, 121, 5, 117, 0, 0, 121, 122,
		5, 114, 0, 0, 122, 123, 5, 102, 0, 0, 123, 124, 5, 97, 0, 0, 124, 125,
		5, 99, 0, 0, 125, 126, 5, 101, 0, 0, 126, 6, 1, 0, 0, 0, 127, 128, 5, 114,
		0, 0, 128, 129, 5, 117, 0, 0, 129, 130, 5, 108, 0, 0, 130, 131, 5, 101,
		0, 0, 131, 8, 1, 0, 0, 0, 132, 133, 5, 99, 0, 0, 133, 134, 5, 111, 0, 0,
		134, 135, 5, 110, 0, 0, 135, 136, 5, 100, 0, 0, 136, 137, 5, 105, 0, 0,
		137, 138, 5, 116, 0, 0, 138, 139, 5, 105, 0, 0, 139, 140, 5, 111, 0, 0,
		140, 141, 5, 110, 0, 0, 141, 10, 1, 0, 0, 0, 142, 143, 5, 115, 0, 0, 143,
		144, 5, 101, 0, 0, 144, 145, 5, 113, 0, 0, 145, 146, 5, 117, 0, 0, 146,
		147, 5, 101, 0, 0, 147, 148, 5, 110, 0, 0, 148, 149, 5, 99, 0, 0, 149,
		150, 5, 101, 0, 0, 150, 12, 1, 0, 0, 0, 151, 152, 5, 98, 0, 0, 152, 153,
		5, 108, 0, 0, 153, 154, 5, 111, 0, 0, 154, 155, 5, 99, 0, 0, 155, 156,
		5, 107, 0, 0, 156, 14, 1, 0, 0, 0, 157, 158, 5, 98, 0, 0, 158, 159, 5,
		97, 0, 0, 159, 160, 5, 110, 0, 0, 160, 161, 5, 100, 0, 0, 161, 162, 5,
		108, 0, 0, 162, 163, 5, 97, 0, 0, 163, 164, 5, 110, 0, 0, 164, 165, 5,
		100, 0, 0, 165, 166, 5, 115, 0, 0, 166, 16, 1, 0, 0, 0, 167, 168, 5, 97,
		0, 0, 168, 169, 5, 98, 0, 0, 169, 170, 5, 111, 0, 0, 170, 171, 5, 118,
		0, 0, 171, 172, 5, 101, 0, 0, 172, 173, 5, 95, 0, 0, 173, 174, 5, 112,
		0, 0, 174, 175, 5, 114, 0, 0, 175, 176, 5, 101, 0, 0, 176, 177, 5, 108,
		0, 0, 177, 178, 5, 105, 0, 0, 178, 179, 5, 109, 0, 0, 179, 180, 5, 105,
		0, 0, 180, 181, 5, 110, 0, 0, 181, 182, 5, 97, 0, 0, 182, 183, 5, 114,
		0, 0, 183, 184, 5, 121, 0, 0, 184, 185, 5, 95, 0, 0, 185, 186, 5, 115,
		0, 0, 186, 187, 5, 117, 0, 0, 187, 188, 5, 114, 0, 0, 188, 189, 5, 102,
		0, 0, 189, 190, 5, 97, 0, 0, 190, 191, 5, 99, 0, 0, 191, 192, 5, 101, 0,
		0, 192, 18, 1, 0, 0, 0, 193, 194, 5, 98, 0, 0, 194, 195, 5, 105, 0, 0,
		195, 196, 5, 111, 0, 0, 196, 197, 5, 109, 0, 0, 197, 198, 5, 101, 0, 0,
		198, 20, 1, 0, 0, 0, 199, 200, 5, 104, 0, 0, 200, 201, 5, 111, 0, 0, 201,
		202, 5, 108, 0, 0, 202, 203, 5, 101, 0, 0, 203, 22, 1, 0, 0, 0, 204, 205,
		5, 110, 0, 0, 205, 206, 5, 111, 0, 0, 206, 207, 5, 105, 0, 0, 207, 208,
		5, 115, 0, 0, 208, 209, 5, 101, 0, 0, 209, 24, 1, 0, 0, 0, 210, 211, 5,
		115, 0, 0, 211, 212, 5, 116, 0, 0, 212, 213, 5, 101, 0, 0, 213, 214, 5,
		101, 0, 0, 214, 215, 5, 112, 0, 0, 215, 26, 1, 0, 0, 0, 216, 217, 5, 115,
		0, 0, 217, 218, 5, 116, 0, 0, 218, 219, 5, 111, 0, 0, 219, 220, 5, 110,
		0, 0, 220, 221, 5, 101, 0, 0, 221, 222, 5, 95, 0, 0, 222, 223, 5, 100,
		0, 0, 223, 224, 5, 101, 0, 0, 224, 225, 5, 112, 0, 0, 225, 226, 5, 116,
		0, 0, 226, 227, 5, 104, 0, 0, 227, 28, 1, 0, 0, 0, 228, 229, 5, 102, 0,
		0, 229, 230, 5, 114, 0, 0, 230, 231, 5, 101, 0, 0, 231, 232, 5, 101, 0,
		0, 232, 233, 5, 122, 0, 0, 233, 234, 5, 105, 0, 0, 234, 235, 5, 110, 0,
		0, 235, 236, 5, 103, 0, 0, 236, 30, 1, 0, 0, 0, 237, 238, 5, 116, 0, 0,
		238, 239, 5, 101, 0, 0, 239, 240, 5, 109, 0, 0, 240, 241, 5, 112, 0, 0,
		241, 242, 5, 101, 0, 0, 242, 243, 5, 114, 0, 0, 243, 244, 5, 97, 0, 0,
		244, 245, 5, 116, 0, 0, 245, 246, 5, 117, 0, 0, 246, 247, 5, 114, 0, 0,
		247, 248, 5, 101, 0, 0, 248, 32, 1, 0, 0, 0, 249, 250, 5, 118, 0, 0, 250,
		251, 5, 101, 0, 0, 251, 252, 5, 114, 0, 0, 252, 253, 5, 116, 0, 0, 253,
		254, 5, 105, 0, 0, 254, 255, 5, 99, 0, 0, 255, 256, 5, 97, 0, 0, 256, 257,
		5, 108, 0, 0, 257, 258, 5, 95, 0, 0, 258, 259, 5, 103, 0, 0, 259, 260,
		5, 114, 0, 0, 260, 261, 5, 97, 0, 0, 261, 262, 5, 100, 0, 0, 262, 263,
		5, 105, 0, 0, 263, 264, 5, 101, 0, 0, 264, 265, 5, 110, 0, 0, 265, 266,
		5, 116, 0, 0, 266, 34, 1, 0, 0, 0, 267, 268, 5, 97, 0, 0, 268, 269, 5,
		98, 0, 0, 269, 270, 5, 111, 0, 0, 270, 271, 5, 118, 0, 0, 271, 272, 5,
		101, 0, 0, 272, 273, 5, 95, 0, 0, 273, 274, 5, 119, 0, 0, 274, 275, 5,
		97, 0, 0, 275, 276, 5, 116, 0, 0, 276, 277, 5, 101, 0, 0, 277, 278, 5,
		114, 0, 0, 278, 36, 1, 0, 0, 0, 279, 280, 5, 121, 0, 0, 280, 281, 5, 95,
		0, 0, 281, 282, 5, 97, 0, 0, 282, 283, 5, 98, 0, 0, 283, 284, 5, 111, 0,
		0, 284, 285, 5, 118, 0, 0, 285, 286, 5, 101, 0, 0, 286, 38, 1, 0, 0, 0,
		287, 288, 5, 102, 0, 0, 288, 289, 5, 108, 0, 0, 289, 290, 5, 111, 0, 0,
		290, 291, 5, 111, 0, 0, 291, 292, 5, 114, 0, 0, 292, 40, 1, 0, 0, 0, 293,
		294, 5, 99, 0, 0, 294, 295, 5, 101, 0, 0, 295, 296, 5, 105, 0, 0, 296,
		297, 5, 108, 0, 0, 297, 298, 5, 105, 0, 0, 298, 299, 5, 110, 0, 0, 299,
		300, 5, 103, 0, 0, 300, 42, 1, 0, 0, 0, 301, 302, 5, 97, 0, 0, 302, 303,
		5, 110, 0, 0, 303, 304, 5, 100, 0, 0, 304, 44, 1, 0, 0, 0, 305, 306, 5,
		97, 0, 0, 306, 307, 5, 100, 0, 0, 307, 308, 5, 100, 0, 0, 308, 46, 1, 0,
		0, 0, 309, 310, 5, 115, 0, 0, 310, 311, 5, 117, 0, 0, 311, 312, 5, 98,
		0, 0, 312, 48, 1, 0, 0, 0, 313, 314, 5, 119, 0, 0, 314, 315, 5, 111, 0,
		0, 315, 316, 5, 114, 0, 0, 316, 317, 5, 108, 0, 0, 317, 318, 5, 100, 0,
		0, 318, 319, 5, 103, 0, 0, 319, 320, 5, 101, 0, 0, 320, 321, 5, 110, 0,
		0, 321, 50, 1, 0, 0, 0, 322, 323, 5, 97, 0, 0, 323, 324, 5, 98, 0, 0, 324,
		325, 5, 115, 0, 0, 325, 326, 5, 111, 0, 0, 326, 327, 5, 108, 0, 0, 327,
		328, 5, 117, 0, 0, 328, 329, 5, 116, 0, 0, 329, 330, 5, 101, 0, 0, 330,
		52, 1, 0, 0, 0, 331, 332, 5, 97, 0, 0, 332, 333, 5, 98, 0, 0, 333, 334,
		5, 111, 0, 0, 334, 335, 5, 118, 0, 0, 335, 336, 5, 101, 0, 0, 336, 337,
		5, 95, 0, 0, 337, 338, 5, 98, 0, 0, 338, 339, 5, 111, 0, 0, 339, 340, 5,
		116, 0, 0, 340, 341, 5, 116, 0, 0, 341, 342, 5, 111, 0, 0, 342, 343, 5,
		109, 0, 0, 343, 54, 1, 0, 0, 0, 344, 345, 5, 98, 0, 0, 345, 346, 5, 101,
		0, 0, 346, 347, 5, 108, 0, 0, 347, 348, 5, 111, 0, 0, 348, 349, 5, 119,
		0, 0, 349, 350, 5, 95, 0, 0, 350, 351, 5, 116, 0, 0, 351, 352, 5, 111,
		0, 0, 352, 353, 5, 112, 0, 0, 353, 56, 1, 0, 0, 0, 354, 355, 5, 110, 0,
		0, 355, 356, 5, 97, 0, 0, 356, 357, 5, 109, 0, 0, 357, 358, 5, 101, 0,
		0, 358, 359, 5, 115, 0, 0, 359, 360, 5, 112, 0, 0, 360, 361, 5, 97, 0,
		0, 361, 362, 5, 99, 0, 0, 362, 363, 5, 101, 0, 0, 363, 58, 1, 0, 0, 0,
		364, 365, 5, 105, 0, 0, 365, 366, 5, 102, 0, 0, 366, 60, 1, 0, 0, 0, 367,
		368, 5, 101, 0, 0, 368, 369, 5, 108, 0, 0, 369, 370, 5, 115, 0, 0, 370,
		371, 5, 101, 0, 0, 371, 62, 1, 0, 0, 0, 372, 373, 5, 105, 0, 0, 373, 374,
		5, 110, 0, 0, 374, 64, 1, 0, 0, 0, 375, 377, 7, 1, 0, 0, 376, 375, 1, 0,
		0, 0, 377, 378, 1, 0, 0, 0, 378, 376, 1, 0, 0, 0, 378, 379, 1, 0, 0, 0,
		379, 380, 1, 0, 0, 0, 380, 381, 6, 32, 0, 0, 381, 66, 1, 0, 0, 0, 382,
		383, 7, 2, 0, 0, 383, 68, 1, 0, 0, 0, 384, 385, 5, 91, 0, 0, 385, 70, 1,
		0, 0, 0, 386, 387, 5, 93, 0, 0, 387, 72, 1, 0, 0, 0, 388, 389, 5, 123,
		0, 0, 389, 74, 1, 0, 0, 0, 390, 391, 5, 125, 0, 0, 391, 76, 1, 0, 0, 0,
		392, 393, 5, 40, 0, 0, 393, 78, 1, 0, 0, 0, 394, 395, 5, 41, 0, 0, 395,
		80, 1, 0, 0, 0, 396, 397, 5, 33, 0, 0, 397, 82, 1, 0, 0, 0, 398, 399, 5,
		44, 0, 0, 399, 84, 1, 0, 0, 0, 400, 401, 5, 58, 0, 0, 401, 86, 1, 0, 0,
		0, 402, 403, 5, 59, 0, 0, 403, 88, 1, 0, 0, 0, 404, 408, 5, 34, 0, 0, 405,
		407, 8, 2, 0, 0, 406, 405, 1, 0, 0, 0, 407, 410, 1, 0, 0, 0, 408, 406,
		1, 0, 0, 0, 408, 409, 1, 0, 0, 0, 409, 411, 1, 0, 0, 0, 410, 408, 1, 0,
		0, 0, 411, 412, 5, 34, 0, 0, 412, 90, 1, 0, 0, 0, 413, 417, 7, 3, 0, 0,
		414, 416, 7, 4, 0, 0, 415, 414, 1, 0, 0, 0, 416, 419, 1, 0, 0, 0, 417,
		415, 1, 0, 0, 0, 417, 418, 1, 0, 0, 0, 418, 92, 1, 0, 0, 0, 419, 417, 1,
		0, 0, 0, 420, 421, 5, 47, 0, 0, 421, 422, 5, 47, 0, 0, 422, 426, 1, 0,
		0, 0, 423, 425, 8, 2, 0, 0, 424, 423, 1, 0, 0, 0, 425, 428, 1, 0, 0, 0,
		426, 424, 1, 0, 0, 0, 426, 427, 1, 0, 0, 0, 427, 429, 1, 0, 0, 0, 428,
		426, 1, 0, 0, 0, 429, 430, 6, 46, 0, 0, 430, 94, 1, 0, 0, 0, 431, 432,
		5, 47, 0, 0, 432, 433, 5, 42, 0, 0, 433, 437, 1, 0, 0, 0, 434, 436, 9,
		0, 0, 0, 435, 434, 1, 0, 0, 0, 436, 439, 1, 0, 0, 0, 437, 438, 1, 0, 0,
		0, 437, 435, 1, 0, 0, 0, 438, 440, 1, 0, 0, 0, 439, 437, 1, 0, 0, 0, 440,
		441, 5, 42, 0, 0, 441, 442, 5, 47, 0, 0, 442, 443, 1, 0, 0, 0, 443, 444,
		6, 47, 0, 0, 444, 96, 1, 0, 0, 0, 11, 0, 98, 103, 106, 111, 117, 378, 408,
		417, 426, 437, 1, 6, 0, 0,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// MMSLexerInit initializes any static state used to implement MMSLexer. By default the
// static state used to implement the lexer is lazily initialized during the first call to
// NewMMSLexer(). You can call this function if you wish to initialize the static state ahead
// of time.
func MMSLexerInit() {
	staticData := &MMSLexerLexerStaticData
	staticData.once.Do(mmslexerLexerInit)
}

// NewMMSLexer produces a new lexer instance for the optional input antlr.CharStream.
func NewMMSLexer(input antlr.CharStream) *MMSLexer {
	MMSLexerInit()
	l := new(MMSLexer)
	l.BaseLexer = antlr.NewBaseLexer(input)
	staticData := &MMSLexerLexerStaticData
	l.Interpreter = antlr.NewLexerATNSimulator(l, staticData.atn, staticData.decisionToDFA, staticData.PredictionContextCache)
	l.channelNames = staticData.ChannelNames
	l.modeNames = staticData.ModeNames
	l.RuleNames = staticData.RuleNames
	l.LiteralNames = staticData.LiteralNames
	l.SymbolicNames = staticData.SymbolicNames
	l.GrammarFileName = "MMSLexer.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// MMSLexer tokens.
const (
	MMSLexerInt                             = 1
	MMSLexerFloat                           = 2
	MMSLexerKeyword_Surface                 = 3
	MMSLexerKeyword_Rule                    = 4
	MMSLexerKeyword_Condition               = 5
	MMSLexerKeyword_Sequence                = 6
	MMSLexerKeyword_Block                   = 7
	MMSLexerKeyword_Bandlands               = 8
	MMSLexerKeyword_AbovePreliminarySurface = 9
	MMSLexerKeyword_Biome                   = 10
	MMSLexerKeyword_Hole                    = 11
	MMSLexerKeyword_Noise                   = 12
	MMSLexerKeyword_Steep                   = 13
	MMSLexerKeyword_StoneDepth              = 14
	MMSLexerKeyword_Freezing                = 15
	MMSLexerKeyword_Temperature             = 16
	MMSLexerKeyword_VerticalGradient        = 17
	MMSLexerKeyword_AboveWater              = 18
	MMSLexerKeyword_YAbove                  = 19
	MMSLexerKeyword_Floor                   = 20
	MMSLexerKeyword_Ceiling                 = 21
	MMSLexerKeyword_And                     = 22
	MMSLexerKeyword_Add                     = 23
	MMSLexerKeyword_Sub                     = 24
	MMSLexerKeyword_WorldGen                = 25
	MMSLexerKeyword_Absolute                = 26
	MMSLexerKeyword_AboveBottom             = 27
	MMSLexerKeyword_BelowTop                = 28
	MMSLexerKeyword_Namespace               = 29
	MMSLexerKeyword_If                      = 30
	MMSLexerKeyword_Else                    = 31
	MMSLexerKeyword_In                      = 32
	MMSLexerWS                              = 33
	MMSLexerNL                              = 34
	MMSLexerSquareOpen                      = 35
	MMSLexerSquareClose                     = 36
	MMSLexerCurlyOpen                       = 37
	MMSLexerCurlyClose                      = 38
	MMSLexerRoundOpen                       = 39
	MMSLexerRoundClose                      = 40
	MMSLexerBang                            = 41
	MMSLexerComma                           = 42
	MMSLexerColon                           = 43
	MMSLexerSemiColon                       = 44
	MMSLexerString_                         = 45
	MMSLexerIdentifier                      = 46
	MMSLexerLineComment                     = 47
	MMSLexerBlockComment                    = 48
)
